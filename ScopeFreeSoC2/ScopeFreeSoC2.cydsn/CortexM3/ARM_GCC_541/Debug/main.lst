ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	DMA_Channel_1_Chan,1,1
  20              		.comm	DMA_Channel_1_TD,1,4
  21              		.comm	DMA_Channel_2_Chan,1,1
  22              		.comm	DMA_Channel_2_TD,1,4
  23              		.comm	Channel_1_Data,2048,4
  24              		.comm	Channel_2_Data,2048,4
  25              		.comm	szTempBuffer,64,4
  26              		.comm	cCharsReceived,1,1
  27              		.comm	szCommandsBuffer,4096,4
  28              		.comm	iRead,2,2
  29              		.comm	iWrite,2,2
  30              		.comm	cCommandsReady,2,2
  31              		.comm	szCommand,64,4
  32              		.comm	bCommandReady,1,1
  33              		.comm	preamp_a,1,1
  34              		.comm	preamp_b,1,1
  35              		.comm	trigger_source,1,1
  36              		.comm	preamp_trig,1,1
  37              		.comm	USB_Out_Buffer,64,4
  38              		.comm	Waveform_Buffer,256,4
  39              		.comm	Waveform_Temp_Buffer,256,4
  40              		.global	wave_gain
  41              		.bss
  42              		.type	wave_gain, %object
  43              		.size	wave_gain, 1
  44              	wave_gain:
  45 0000 00       		.space	1
  46              		.global	wave_offset
  47              		.type	wave_offset, %object
  48              		.size	wave_offset, 1
  49              	wave_offset:
  50 0001 00       		.space	1
  51              		.comm	Digital_Input_Status_Last,1,1
  52              		.comm	Digital_AutoUpdate,1,1
  53              		.section	.rodata
  54              		.align	2
  55              	.LC0:
  56 0000 2000     		.ascii	" \000"
  57 0002 0000     		.align	2
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 2


  58              	.LC1:
  59 0004 2A537973 		.ascii	"*Syscomp CircuitGear V1.3\012\015\000"
  59      636F6D70 
  59      20436972 
  59      63756974 
  59      47656172 
  60              		.align	2
  61              	.LC2:
  62 0020 25687500 		.ascii	"%hu\000"
  63              		.global	__aeabi_ui2f
  64              		.global	__aeabi_fmul
  65              		.global	__aeabi_f2d
  66              		.global	__aeabi_ddiv
  67              		.global	__aeabi_dadd
  68              		.global	__aeabi_d2f
  69              		.global	__aeabi_fcmpgt
  70              		.global	__aeabi_f2uiz
  71              		.global	__aeabi_dmul
  72              		.global	__aeabi_fdiv
  73              		.global	__aeabi_i2d
  74              		.global	__aeabi_fcmple
  75              		.global	__aeabi_fcmpge
  76              		.global	__aeabi_dsub
  77              		.global	__aeabi_d2uiz
  78              		.align	2
  79              	.LC3:
  80 0024 4572726F 		.ascii	"Error: Unrecognized Scope Command\012\015\000"
  80      723A2055 
  80      6E726563 
  80      6F676E69 
  80      7A656420 
  81              		.align	2
  82              	.LC4:
  83 0048 4572726F 		.ascii	"Error: Unknown Command\012\015\000"
  83      723A2055 
  83      6E6B6E6F 
  83      776E2043 
  83      6F6D6D61 
  84              		.section	.text.main,"ax",%progbits
  85              		.align	2
  86              		.global	main
  87              		.thumb
  88              		.thumb_func
  89              		.type	main, %function
  90              	main:
  91              	.LFB64:
  92              		.file 1 "main.c"
   1:main.c        **** /* ========================================
   2:main.c        ****  *
   3:main.c        ****  * Copyright Cypress Semiconductor, 2016
   4:main.c        ****  * All Rights Reserved
   5:main.c        ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:main.c        ****  *
   7:main.c        ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:main.c        ****  * WHICH IS THE PROPERTY OF Cypress Semiconductor.
   9:main.c        ****  *
  10:main.c        ****  * ========================================
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 3


  11:main.c        **** */
  12:main.c        **** #include <device.h>
  13:main.c        **** #include <string.h>
  14:main.c        **** #include <stdio.h>
  15:main.c        **** 
  16:main.c        **** void DMA_Config(void);
  17:main.c        **** void Hardware_Config(void);
  18:main.c        **** uint16 GetLastSampleIndex(uint8 chHandle);
  19:main.c        **** void CommandCheck(void);
  20:main.c        **** void PutString(char * string);  // actually checks to see if the CDC device is ready before sending
  21:main.c        **** void PutChar(char Data);
  22:main.c        **** 
  23:main.c        **** // 2047 is the max buffer size in samples
  24:main.c        **** #define BUFFER_SIZE 1024
  25:main.c        **** 
  26:main.c        **** // trigger setup control register definitions
  27:main.c        **** #define FALLING_EDGE_TRIGGERED 0x01
  28:main.c        **** #define RISING_EDGE_TRIGGERED 0x02
  29:main.c        **** #define EITHER_EDGE_TRIGGERED 0x04
  30:main.c        **** #define EXTERNAL_TRIGGERED 0x08
  31:main.c        **** 
  32:main.c        **** #define TRIGGER_MASK 0x0F
  33:main.c        **** 
  34:main.c        **** #define MANUAL_TRIGGER 0x10
  35:main.c        **** #define TRIGGER_ARM 0x40
  36:main.c        **** #define RESET_PWM 0x80
  37:main.c        **** 
  38:main.c        **** // analog mux channel selection defines
  39:main.c        **** #define SCOPE_CHANNEL_1 0
  40:main.c        **** #define SCOPE_CHANNEL_2 1
  41:main.c        **** 
  42:main.c        **** // status register defines
  43:main.c        **** #define COMP_LEVEL 0x01
  44:main.c        **** #define TRIGGERED 0x02
  45:main.c        **** #define CAPTURE_COMPLETE 0x04
  46:main.c        **** 
  47:main.c        **** // Wave_Control control register definitions
  48:main.c        **** #define WAVE_SELECT_MASK 0x01
  49:main.c        **** #define WAVE_SELECT_WAVE 0x00
  50:main.c        **** #define WAVE_SELECT_NOISE 0x01
  51:main.c        **** 
  52:main.c        **** /* DMA Configuration for DMA_Channel_1 */
  53:main.c        **** #define DMA_Channel_1_BYTES_PER_BURST 2
  54:main.c        **** #define DMA_Channel_1_REQUEST_PER_BURST 1
  55:main.c        **** #define DMA_Channel_1_SRC_BASE (CYDEV_PERIPH_BASE)
  56:main.c        **** #define DMA_Channel_1_DST_BASE (CYDEV_SRAM_BASE)
  57:main.c        **** 
  58:main.c        **** /* DMA Configuration for DMA_Channel_2 */
  59:main.c        **** #define DMA_Channel_2_BYTES_PER_BURST 2
  60:main.c        **** #define DMA_Channel_2_REQUEST_PER_BURST 1
  61:main.c        **** #define DMA_Channel_2_SRC_BASE (CYDEV_PERIPH_BASE)
  62:main.c        **** #define DMA_Channel_2_DST_BASE (CYDEV_SRAM_BASE)
  63:main.c        **** 
  64:main.c        **** /* Variable declarations for DMA_Channel_1 */
  65:main.c        **** /* Move these variable declarations to the top of the function */
  66:main.c        **** uint8 DMA_Channel_1_Chan;
  67:main.c        **** uint8 DMA_Channel_1_TD[1];
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 4


  68:main.c        **** 
  69:main.c        **** /* Variable declarations for DMA_Channel_2 */
  70:main.c        **** /* Move these variable declarations to the top of the function */
  71:main.c        **** uint8 DMA_Channel_2_Chan;
  72:main.c        **** uint8 DMA_Channel_2_TD[1];
  73:main.c        **** 
  74:main.c        **** // RAM data arrays for storing the sampled data
  75:main.c        **** uint16 Channel_1_Data[BUFFER_SIZE];
  76:main.c        **** uint16 Channel_2_Data[BUFFER_SIZE];
  77:main.c        **** 
  78:main.c        **** // USB UART variables
  79:main.c        **** #define COMMAND_BUFFER_SIZE 64
  80:main.c        **** char szTempBuffer[COMMAND_BUFFER_SIZE];
  81:main.c        **** uint8 cCharsReceived;
  82:main.c        **** 
  83:main.c        **** #define CIRCULAR_BUFFER_SIZE 4096
  84:main.c        **** char szCommandsBuffer[CIRCULAR_BUFFER_SIZE]; // need to make this many times bigger to deal with th
  85:main.c        **** uint16 iRead, iWrite;
  86:main.c        **** uint16 cCommandsReady;
  87:main.c        **** 
  88:main.c        **** char szCommand[COMMAND_BUFFER_SIZE];
  89:main.c        **** uint8 bCommandReady;
  90:main.c        **** 
  91:main.c        **** // scope status variable
  92:main.c        **** uint8 preamp_a, preamp_b, trigger_source, preamp_trig;
  93:main.c        **** 
  94:main.c        **** // for dumping data out (its 64 bytes, but if you want anything less, it has to be a multiple of 4)
  95:main.c        **** // also a good idea to make it a multiple of the ADC buffer size, defined above
  96:main.c        **** #define USBUART_BUFFER_SIZE 64
  97:main.c        **** uint8 USB_Out_Buffer[USBUART_BUFFER_SIZE];
  98:main.c        **** 
  99:main.c        **** // Waveform generator variables
 100:main.c        **** #define WAVEFORM_BUFFER_SIZE 256
 101:main.c        **** uint8 Waveform_Buffer[WAVEFORM_BUFFER_SIZE];
 102:main.c        **** uint8 Waveform_Temp_Buffer[WAVEFORM_BUFFER_SIZE];
 103:main.c        **** uint8 wave_gain = 0;
 104:main.c        **** uint8 wave_offset = 0;
 105:main.c        **** 
 106:main.c        **** // digital input last state variable
 107:main.c        **** uint8 Digital_Input_Status_Last;
 108:main.c        **** uint8 Digital_AutoUpdate;
 109:main.c        **** 
 110:main.c        **** // For the SAR ADC to run at 18MHz, it *must* have a 50% duty cycle. 
 111:main.c        **** // There are 3 frequencies from the PLL that satisfy
 112:main.c        **** // generating an 18 Mhz clock from integer divides off the PLL: 36 Mhz
 113:main.c        **** // 54 Mhz and 72 Mhz.  Of these three choices, 54 Mhz requires a divide of
 114:main.c        **** // 3 which does not produce a 50% duty cycle.
 115:main.c        **** 
 116:main.c        **** int main()
 117:main.c        **** {
  93              		.loc 1 117 0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 32
  96              		@ frame_needed = 1, uses_anonymous_args = 0
  97 0000 B0B5     		push	{r4, r5, r7, lr}
  98              		.cfi_def_cfa_offset 16
  99              		.cfi_offset 4, -16
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 5


 100              		.cfi_offset 5, -12
 101              		.cfi_offset 7, -8
 102              		.cfi_offset 14, -4
 103 0002 88B0     		sub	sp, sp, #32
 104              		.cfi_def_cfa_offset 48
 105 0004 00AF     		add	r7, sp, #0
 106              		.cfi_def_cfa_register 7
 118:main.c        **** 	uint8 status;
 119:main.c        **** 	uint16 ending_offset;
 120:main.c        **** 	char * psz;
 121:main.c        **** 	uint16 avar, bvar, i;
 122:main.c        **** 	uint32 phase_int;
 123:main.c        **** 	float freq;
 124:main.c        **** 	float cvar;
 125:main.c        ****     float wave_temp;
 126:main.c        ****  
 127:main.c        ****     Hardware_Config();
 107              		.loc 1 127 0
 108 0006 FFF7FEFF 		bl	Hardware_Config
 128:main.c        ****     DMA_Config();
 109              		.loc 1 128 0
 110 000a FFF7FEFF 		bl	DMA_Config
 111              	.L111:
 129:main.c        **** 
 130:main.c        ****     for(;;)
 131:main.c        ****     {
 132:main.c        **** 	
 133:main.c        **** 		CommandCheck();
 112              		.loc 1 133 0
 113 000e FFF7FEFF 		bl	CommandCheck
 134:main.c        **** 		
 135:main.c        **** 		if(bCommandReady != 0)
 114              		.loc 1 135 0
 115 0012 9C4B     		ldr	r3, .L119
 116 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 117 0016 002B     		cmp	r3, #0
 118 0018 00F09386 		beq	.L2
 136:main.c        **** 		{
 137:main.c        **** 			psz = strtok(szCommand, " ");
 119              		.loc 1 137 0
 120 001c 9A49     		ldr	r1, .L119+4
 121 001e 9B48     		ldr	r0, .L119+8
 122 0020 FFF7FEFF 		bl	strtok
 123 0024 F860     		str	r0, [r7, #12]
 138:main.c        **** 			if(*psz == 'i')
 124              		.loc 1 138 0
 125 0026 FB68     		ldr	r3, [r7, #12]
 126 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 127 002a 692B     		cmp	r3, #105
 128 002c 04D1     		bne	.L3
 139:main.c        **** 			{
 140:main.c        **** 				// it all started here.  NOTE!  \n\r THE ORDER MATTERS!
 141:main.c        **** 				PutString("*Syscomp CircuitGear V1.3\n\r");
 129              		.loc 1 141 0
 130 002e 9848     		ldr	r0, .L119+12
 131 0030 FFF7FEFF 		bl	PutString
 132 0034 00F082BE 		b	.L4
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 6


 133              	.L3:
 142:main.c        **** 			}
 143:main.c        **** 			else if(*psz == 'D')
 134              		.loc 1 143 0
 135 0038 FB68     		ldr	r3, [r7, #12]
 136 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 137 003c 442B     		cmp	r3, #68
 138 003e 40F0ED80 		bne	.L5
 144:main.c        **** 			{
 145:main.c        **** 				// Digital I/O commands
 146:main.c        **** 				
 147:main.c        **** 				psz = strtok(0, " ");
 139              		.loc 1 147 0
 140 0042 9149     		ldr	r1, .L119+4
 141 0044 0020     		movs	r0, #0
 142 0046 FFF7FEFF 		bl	strtok
 143 004a F860     		str	r0, [r7, #12]
 148:main.c        **** 				if(*psz == 'O')
 144              		.loc 1 148 0
 145 004c FB68     		ldr	r3, [r7, #12]
 146 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 147 0050 4F2B     		cmp	r3, #79
 148 0052 11D1     		bne	.L6
 149:main.c        **** 				{
 150:main.c        **** 					// Digital output
 151:main.c        **** 					// D O N, where N is the output byte value as an ascii 8 bit number
 152:main.c        **** 					psz = strtok(0, " ");
 149              		.loc 1 152 0
 150 0054 8C49     		ldr	r1, .L119+4
 151 0056 0020     		movs	r0, #0
 152 0058 FFF7FEFF 		bl	strtok
 153 005c F860     		str	r0, [r7, #12]
 153:main.c        **** 					sscanf(psz,"%hu", &avar);
 154              		.loc 1 153 0
 155 005e BB1C     		adds	r3, r7, #2
 156 0060 1A46     		mov	r2, r3
 157 0062 8C49     		ldr	r1, .L119+16
 158 0064 F868     		ldr	r0, [r7, #12]
 159 0066 FFF7FEFF 		bl	sscanf
 154:main.c        **** 					
 155:main.c        **** 					Digital_Out_Control_Write((uint8) avar);
 160              		.loc 1 155 0
 161 006a 7B88     		ldrh	r3, [r7, #2]
 162 006c DBB2     		uxtb	r3, r3
 163 006e 1846     		mov	r0, r3
 164 0070 FFF7FEFF 		bl	Digital_Out_Control_Write
 165 0074 00F062BE 		b	.L4
 166              	.L6:
 156:main.c        **** 				}
 157:main.c        **** 				else if(*psz == 'I')
 167              		.loc 1 157 0
 168 0078 FB68     		ldr	r3, [r7, #12]
 169 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170 007c 492B     		cmp	r3, #73
 171 007e 0AD1     		bne	.L7
 158:main.c        **** 				{
 159:main.c        **** 					// reads digital inputs
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 7


 160:main.c        **** 					// returns Ix where x is an 8 bit (binary) value representing the status
 161:main.c        **** 					// of the digital input pins
 162:main.c        **** 					
 163:main.c        **** 					PutChar('I');
 172              		.loc 1 163 0
 173 0080 4920     		movs	r0, #73
 174 0082 FFF7FEFF 		bl	PutChar
 164:main.c        **** 					PutChar((uint8) Digital_Input_Status_Read());
 175              		.loc 1 164 0
 176 0086 FFF7FEFF 		bl	Digital_Input_Status_Read
 177 008a 0346     		mov	r3, r0
 178 008c 1846     		mov	r0, r3
 179 008e FFF7FEFF 		bl	PutChar
 180 0092 00F053BE 		b	.L4
 181              	.L7:
 165:main.c        **** 				}
 166:main.c        **** 				else if(*psz == 'A')
 182              		.loc 1 166 0
 183 0096 FB68     		ldr	r3, [r7, #12]
 184 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 185 009a 412B     		cmp	r3, #65
 186 009c 0DD1     		bne	.L8
 167:main.c        **** 				{
 168:main.c        **** 					Digital_AutoUpdate = 1;
 187              		.loc 1 168 0
 188 009e 7E4B     		ldr	r3, .L119+20
 189 00a0 0122     		movs	r2, #1
 190 00a2 1A70     		strb	r2, [r3]
 169:main.c        ****                     PutChar('I');
 191              		.loc 1 169 0
 192 00a4 4920     		movs	r0, #73
 193 00a6 FFF7FEFF 		bl	PutChar
 170:main.c        **** 					PutChar((uint8) Digital_Input_Status_Read());
 194              		.loc 1 170 0
 195 00aa FFF7FEFF 		bl	Digital_Input_Status_Read
 196 00ae 0346     		mov	r3, r0
 197 00b0 1846     		mov	r0, r3
 198 00b2 FFF7FEFF 		bl	PutChar
 199 00b6 00F041BE 		b	.L4
 200              	.L8:
 171:main.c        **** 				}
 172:main.c        **** 				else if(*psz == 'a')
 201              		.loc 1 172 0
 202 00ba FB68     		ldr	r3, [r7, #12]
 203 00bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 204 00be 612B     		cmp	r3, #97
 205 00c0 04D1     		bne	.L9
 173:main.c        **** 				{
 174:main.c        **** 					Digital_AutoUpdate = 0;
 206              		.loc 1 174 0
 207 00c2 754B     		ldr	r3, .L119+20
 208 00c4 0022     		movs	r2, #0
 209 00c6 1A70     		strb	r2, [r3]
 210 00c8 00F038BE 		b	.L4
 211              	.L9:
 175:main.c        **** 				}
 176:main.c        **** 				else if(*psz == 'F')
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 8


 212              		.loc 1 176 0
 213 00cc FB68     		ldr	r3, [r7, #12]
 214 00ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 215 00d0 462B     		cmp	r3, #70
 216 00d2 65D1     		bne	.L10
 177:main.c        **** 				{
 178:main.c        **** 					// set PWM output frequency
 179:main.c        **** 			    	// D F N where N is an 8 bit ascii value that corresponds to these frequencies
 180:main.c        **** 					// 0 72 Khz
 181:main.c        **** 					// 1 36 Khz
 182:main.c        **** 					// 2 9 Khz
 183:main.c        **** 					// 3 4.5 Khz
 184:main.c        **** 					// 4 1.125 Khz
 185:main.c        **** 					// 5 564 Hz
 186:main.c        **** 					// 6 281 Hz
 187:main.c        **** 					// 7 141 Hz
 188:main.c        **** 					// 8 70 Hz
 189:main.c        **** 					// 9 35 Hz
 190:main.c        **** 					// 10 - 255 disabled
 191:main.c        **** 					psz = strtok(0, " ");
 217              		.loc 1 191 0
 218 00d4 6C49     		ldr	r1, .L119+4
 219 00d6 0020     		movs	r0, #0
 220 00d8 FFF7FEFF 		bl	strtok
 221 00dc F860     		str	r0, [r7, #12]
 192:main.c        **** 					sscanf(psz,"%hu", &avar);
 222              		.loc 1 192 0
 223 00de BB1C     		adds	r3, r7, #2
 224 00e0 1A46     		mov	r2, r3
 225 00e2 6C49     		ldr	r1, .L119+16
 226 00e4 F868     		ldr	r0, [r7, #12]
 227 00e6 FFF7FEFF 		bl	sscanf
 193:main.c        **** 					
 194:main.c        **** 					switch(avar)
 228              		.loc 1 194 0
 229 00ea 7B88     		ldrh	r3, [r7, #2]
 230 00ec 092B     		cmp	r3, #9
 231 00ee 00F22486 		bhi	.L118
 232 00f2 01A2     		adr	r2, .L13
 233 00f4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 234              		.p2align 2
 235              	.L13:
 236 00f8 21010000 		.word	.L12+1
 237 00fc 2D010000 		.word	.L14+1
 238 0100 39010000 		.word	.L15+1
 239 0104 45010000 		.word	.L16+1
 240 0108 51010000 		.word	.L17+1
 241 010c 5D010000 		.word	.L18+1
 242 0110 69010000 		.word	.L19+1
 243 0114 77010000 		.word	.L20+1
 244 0118 85010000 		.word	.L21+1
 245 011c 93010000 		.word	.L22+1
 246              		.p2align 1
 247              	.L12:
 195:main.c        **** 					{
 196:main.c        **** 						// GJL - change PWM period to 250 to get exact frequency
 197:main.c        ****                         case 0: // (36 Mhz / 250 (period of the PWM)) / 72 Khz = 2
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 9


 198:main.c        **** 							PWM_Clock_SetDividerValue(2);
 248              		.loc 1 198 0
 249 0120 0121     		movs	r1, #1
 250 0122 0120     		movs	r0, #1
 251 0124 FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 199:main.c        **** 							break;
 252              		.loc 1 199 0
 253 0128 00F008BE 		b	.L4
 254              	.L14:
 200:main.c        **** 							
 201:main.c        **** 						case 1:
 202:main.c        **** 							PWM_Clock_SetDividerValue(4);
 255              		.loc 1 202 0
 256 012c 0121     		movs	r1, #1
 257 012e 0320     		movs	r0, #3
 258 0130 FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 203:main.c        **** 							break;
 259              		.loc 1 203 0
 260 0134 00F002BE 		b	.L4
 261              	.L15:
 204:main.c        **** 							
 205:main.c        **** 						case 2:
 206:main.c        **** 							PWM_Clock_SetDividerValue(16);
 262              		.loc 1 206 0
 263 0138 0121     		movs	r1, #1
 264 013a 0F20     		movs	r0, #15
 265 013c FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 207:main.c        **** 							break;
 266              		.loc 1 207 0
 267 0140 00F0FCBD 		b	.L4
 268              	.L16:
 208:main.c        **** 						
 209:main.c        **** 						case 3:
 210:main.c        **** 							PWM_Clock_SetDividerValue(32);
 269              		.loc 1 210 0
 270 0144 0121     		movs	r1, #1
 271 0146 1F20     		movs	r0, #31
 272 0148 FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 211:main.c        **** 							break;
 273              		.loc 1 211 0
 274 014c 00F0F6BD 		b	.L4
 275              	.L17:
 212:main.c        **** 							
 213:main.c        **** 						case 4:
 214:main.c        **** 							PWM_Clock_SetDividerValue(128);
 276              		.loc 1 214 0
 277 0150 0121     		movs	r1, #1
 278 0152 7F20     		movs	r0, #127
 279 0154 FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 215:main.c        **** 							break;
 280              		.loc 1 215 0
 281 0158 00F0F0BD 		b	.L4
 282              	.L18:
 216:main.c        **** 							
 217:main.c        **** 						case 5:
 218:main.c        **** 							PWM_Clock_SetDividerValue(255);
 283              		.loc 1 218 0
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 10


 284 015c 0121     		movs	r1, #1
 285 015e FE20     		movs	r0, #254
 286 0160 FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 219:main.c        **** 							break;
 287              		.loc 1 219 0
 288 0164 00F0EABD 		b	.L4
 289              	.L19:
 220:main.c        **** 							
 221:main.c        **** 						case 6:
 222:main.c        **** 							PWM_Clock_SetDividerValue(512);
 290              		.loc 1 222 0
 291 0168 0121     		movs	r1, #1
 292 016a 40F2FF10 		movw	r0, #511
 293 016e FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 223:main.c        **** 							break;
 294              		.loc 1 223 0
 295 0172 00F0E3BD 		b	.L4
 296              	.L20:
 224:main.c        **** 							
 225:main.c        **** 						case 7:
 226:main.c        **** 							PWM_Clock_SetDividerValue(1021);
 297              		.loc 1 226 0
 298 0176 0121     		movs	r1, #1
 299 0178 4FF47F70 		mov	r0, #1020
 300 017c FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 227:main.c        **** 							break;
 301              		.loc 1 227 0
 302 0180 00F0DCBD 		b	.L4
 303              	.L21:
 228:main.c        **** 							
 229:main.c        **** 						case 8:
 230:main.c        **** 							PWM_Clock_SetDividerValue(2057);
 304              		.loc 1 230 0
 305 0184 0121     		movs	r1, #1
 306 0186 40F60800 		movw	r0, #2056
 307 018a FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 231:main.c        **** 							break;
 308              		.loc 1 231 0
 309 018e 00F0D5BD 		b	.L4
 310              	.L22:
 232:main.c        **** 						
 233:main.c        **** 						case 9:
 234:main.c        **** 							PWM_Clock_SetDividerValue(4114);
 311              		.loc 1 234 0
 312 0192 0121     		movs	r1, #1
 313 0194 41F21100 		movw	r0, #4113
 314 0198 FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 235:main.c        **** 							break;
 315              		.loc 1 235 0
 316 019c 00F0CEBD 		b	.L4
 317              	.L10:
 236:main.c        **** 							
 237:main.c        **** 						default:
 238:main.c        **** 							//PWM_Stop();
 239:main.c        **** 							break;
 240:main.c        **** 					}
 241:main.c        **** 				}
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 11


 242:main.c        **** 				else if(*psz == 'D')
 318              		.loc 1 242 0
 319 01a0 FB68     		ldr	r3, [r7, #12]
 320 01a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 321 01a4 442B     		cmp	r3, #68
 322 01a6 1BD1     		bne	.L24
 243:main.c        **** 				{
 244:main.c        **** 					// Set PWM Duty cycle
 245:main.c        **** 					// D D N where N is an 8 bit ascii value representing the duty cycle
 246:main.c        **** 					// from 0 to 255
 247:main.c        **** 					psz = strtok(0, " ");
 323              		.loc 1 247 0
 324 01a8 3749     		ldr	r1, .L119+4
 325 01aa 0020     		movs	r0, #0
 326 01ac FFF7FEFF 		bl	strtok
 327 01b0 F860     		str	r0, [r7, #12]
 248:main.c        **** 					sscanf(psz,"%hu", &avar);
 328              		.loc 1 248 0
 329 01b2 BB1C     		adds	r3, r7, #2
 330 01b4 1A46     		mov	r2, r3
 331 01b6 3749     		ldr	r1, .L119+16
 332 01b8 F868     		ldr	r0, [r7, #12]
 333 01ba FFF7FEFF 		bl	sscanf
 249:main.c        **** 					// GJL: Limit upper compare value to 249 since period is 249
 250:main.c        ****                     if(avar > 249)
 334              		.loc 1 250 0
 335 01be 7B88     		ldrh	r3, [r7, #2]
 336 01c0 F92B     		cmp	r3, #249
 337 01c2 01D9     		bls	.L25
 251:main.c        ****                     {
 252:main.c        ****                         avar = 249;
 338              		.loc 1 252 0
 339 01c4 F923     		movs	r3, #249
 340 01c6 7B80     		strh	r3, [r7, #2]	@ movhi
 341              	.L25:
 253:main.c        ****                     }
 254:main.c        **** 					Digital_PWM_WriteCompare1((uint8) avar);
 342              		.loc 1 254 0
 343 01c8 7B88     		ldrh	r3, [r7, #2]
 344 01ca DBB2     		uxtb	r3, r3
 345 01cc 1846     		mov	r0, r3
 346 01ce FFF7FEFF 		bl	Digital_PWM_WriteCompare1
 255:main.c        **** 					Digital_PWM_WriteCompare2((uint8) avar);
 347              		.loc 1 255 0
 348 01d2 7B88     		ldrh	r3, [r7, #2]
 349 01d4 DBB2     		uxtb	r3, r3
 350 01d6 1846     		mov	r0, r3
 351 01d8 FFF7FEFF 		bl	Digital_PWM_WriteCompare2
 352 01dc 00F0AEBD 		b	.L4
 353              	.L24:
 256:main.c        **** 				}
 257:main.c        **** 				else if(*psz == '!')
 354              		.loc 1 257 0
 355 01e0 FB68     		ldr	r3, [r7, #12]
 356 01e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 357 01e4 212B     		cmp	r3, #33
 358 01e6 40F0A985 		bne	.L4
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 12


 258:main.c        **** 				{
 259:main.c        **** 					// interrupt line configuration.  not implemented yet
 260:main.c        **** 					// sends back a '!' character when the interrupt condition is met
 261:main.c        **** 					// D ! M where M is the mode:
 262:main.c        **** 					// M = D : Disable
 263:main.c        **** 					// M = R : Rising Edge
 264:main.c        **** 					// M = F : Falling Edge
 265:main.c        **** 					// M = H : High Level
 266:main.c        **** 					// M = L : Low Level
 267:main.c        **** 					psz = strtok(0, " ");
 359              		.loc 1 267 0
 360 01ea 2749     		ldr	r1, .L119+4
 361 01ec 0020     		movs	r0, #0
 362 01ee FFF7FEFF 		bl	strtok
 363 01f2 F860     		str	r0, [r7, #12]
 268:main.c        **** 					
 269:main.c        **** 					if(*psz == 'D')
 364              		.loc 1 269 0
 365 01f4 FB68     		ldr	r3, [r7, #12]
 366 01f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 367 01f8 442B     		cmp	r3, #68
 368 01fa 00F09F85 		beq	.L4
 270:main.c        **** 					{
 271:main.c        **** 					}
 272:main.c        **** 					else if(*psz == 'R')
 369              		.loc 1 272 0
 370 01fe FB68     		ldr	r3, [r7, #12]
 371 0200 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 372 0202 522B     		cmp	r3, #82
 373 0204 00F09A85 		beq	.L4
 273:main.c        **** 					{
 274:main.c        **** 					}
 275:main.c        **** 					else if(*psz == 'F')
 374              		.loc 1 275 0
 375 0208 FB68     		ldr	r3, [r7, #12]
 376 020a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 377 020c 462B     		cmp	r3, #70
 378 020e 00F09585 		beq	.L4
 276:main.c        **** 					{
 277:main.c        **** 					}
 278:main.c        **** 					else if(*psz == 'H')
 379              		.loc 1 278 0
 380 0212 FB68     		ldr	r3, [r7, #12]
 381 0214 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 382 0216 482B     		cmp	r3, #72
 383 0218 00F090BD 		b	.L4
 384              	.L5:
 279:main.c        **** 					{
 280:main.c        **** 					}
 281:main.c        **** 					else if(*psz == 'L')
 282:main.c        **** 					{
 283:main.c        **** 					}
 284:main.c        **** 					
 285:main.c        **** 					// if trigger condition is met, send back the '!' character
 286:main.c        **** 					//PutChar('!');
 287:main.c        **** 				}
 288:main.c        **** 			}
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 13


 289:main.c        **** 			else if(*psz == 'W')
 385              		.loc 1 289 0
 386 021c FB68     		ldr	r3, [r7, #12]
 387 021e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 388 0220 572B     		cmp	r3, #87
 389 0222 40F01382 		bne	.L26
 290:main.c        **** 			{
 291:main.c        **** 				// waveform generator commands
 292:main.c        **** 				
 293:main.c        **** 				psz = strtok(0, " ");
 390              		.loc 1 293 0
 391 0226 1849     		ldr	r1, .L119+4
 392 0228 0020     		movs	r0, #0
 393 022a FFF7FEFF 		bl	strtok
 394 022e F860     		str	r0, [r7, #12]
 294:main.c        **** 				if(*psz == 'S')
 395              		.loc 1 294 0
 396 0230 FB68     		ldr	r3, [r7, #12]
 397 0232 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 398 0234 532B     		cmp	r3, #83
 399 0236 1ED1     		bne	.L27
 295:main.c        **** 				{
 296:main.c        **** 					// sample data into the buffer
 297:main.c        **** 					// command is W S ADDR DATA
 298:main.c        **** 					// ADDR is the 8 bit address 0 - 255
 299:main.c        **** 					// DATA is the waveform amplitude 0 - 255
 300:main.c        **** 					psz = strtok(0, " ");
 400              		.loc 1 300 0
 401 0238 1349     		ldr	r1, .L119+4
 402 023a 0020     		movs	r0, #0
 403 023c FFF7FEFF 		bl	strtok
 404 0240 F860     		str	r0, [r7, #12]
 301:main.c        **** 					sscanf(psz,"%hu", &avar);
 405              		.loc 1 301 0
 406 0242 BB1C     		adds	r3, r7, #2
 407 0244 1A46     		mov	r2, r3
 408 0246 1349     		ldr	r1, .L119+16
 409 0248 F868     		ldr	r0, [r7, #12]
 410 024a FFF7FEFF 		bl	sscanf
 302:main.c        **** 					bvar = avar;  // something is wacky with sscanf.  if I dont move the data into bvar, then on t
 411              		.loc 1 302 0
 412 024e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 413 0250 FB83     		strh	r3, [r7, #30]	@ movhi
 303:main.c        **** 					// if I use another variable, avar gets reset to zero!
 304:main.c        **** 					// got the address
 305:main.c        **** 					
 306:main.c        **** 					psz = strtok(0, " ");
 414              		.loc 1 306 0
 415 0252 0D49     		ldr	r1, .L119+4
 416 0254 0020     		movs	r0, #0
 417 0256 FFF7FEFF 		bl	strtok
 418 025a F860     		str	r0, [r7, #12]
 307:main.c        **** 					sscanf(psz,"%hu", &avar);
 419              		.loc 1 307 0
 420 025c BB1C     		adds	r3, r7, #2
 421 025e 1A46     		mov	r2, r3
 422 0260 0C49     		ldr	r1, .L119+16
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 14


 423 0262 F868     		ldr	r0, [r7, #12]
 424 0264 FFF7FEFF 		bl	sscanf
 308:main.c        **** 					// got the data
 309:main.c        **** 					
 310:main.c        **** 					// store it in the buffer
 311:main.c        **** 					Waveform_Temp_Buffer[bvar] = avar;
 425              		.loc 1 311 0
 426 0268 FB8B     		ldrh	r3, [r7, #30]
 427 026a 7A88     		ldrh	r2, [r7, #2]
 428 026c D1B2     		uxtb	r1, r2
 429 026e 0B4A     		ldr	r2, .L119+24
 430 0270 D154     		strb	r1, [r2, r3]
 431 0272 00F063BD 		b	.L4
 432              	.L27:
 312:main.c        **** 				}
 313:main.c        **** 				else if(*psz == 'P')
 433              		.loc 1 313 0
 434 0276 FB68     		ldr	r3, [r7, #12]
 435 0278 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 436 027a 502B     		cmp	r3, #80
 437 027c 5ED1     		bne	.L29
 314:main.c        **** 				{
 315:main.c        **** 					// program the waveform by copying it into the array that the waveform generator uses
 316:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 438              		.loc 1 316 0
 439 027e 0023     		movs	r3, #0
 440 0280 BB83     		strh	r3, [r7, #28]	@ movhi
 441 0282 56E0     		b	.L30
 442              	.L120:
 443              		.align	2
 444              	.L119:
 445 0284 00000000 		.word	bCommandReady
 446 0288 00000000 		.word	.LC0
 447 028c 00000000 		.word	szCommand
 448 0290 04000000 		.word	.LC1
 449 0294 20000000 		.word	.LC2
 450 0298 00000000 		.word	Digital_AutoUpdate
 451 029c 00000000 		.word	Waveform_Temp_Buffer
 452              	.L33:
 317:main.c        **** 					{
 318:main.c        **** 						// GJL - add offset and max checking
 319:main.c        ****                         wave_temp = (((float) Waveform_Temp_Buffer[i]) * ((float)wave_gain)/255.0) 
 453              		.loc 1 319 0
 454 02a0 BB8B     		ldrh	r3, [r7, #28]
 455 02a2 A34A     		ldr	r2, .L121+8
 456 02a4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 457 02a6 1846     		mov	r0, r3
 458 02a8 FFF7FEFF 		bl	__aeabi_ui2f
 459 02ac 0446     		mov	r4, r0
 460 02ae A14B     		ldr	r3, .L121+12
 461 02b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 462 02b2 1846     		mov	r0, r3
 463 02b4 FFF7FEFF 		bl	__aeabi_ui2f
 464 02b8 0346     		mov	r3, r0
 465 02ba 1946     		mov	r1, r3
 466 02bc 2046     		mov	r0, r4
 467 02be FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 15


 468 02c2 0346     		mov	r3, r0
 469 02c4 1846     		mov	r0, r3
 470 02c6 FFF7FEFF 		bl	__aeabi_f2d
 471 02ca 97A3     		adr	r3, .L121
 472 02cc D3E90023 		ldrd	r2, [r3]
 473 02d0 FFF7FEFF 		bl	__aeabi_ddiv
 474 02d4 0346     		mov	r3, r0
 475 02d6 0C46     		mov	r4, r1
 476 02d8 2546     		mov	r5, r4
 477 02da 1C46     		mov	r4, r3
 478 02dc 964B     		ldr	r3, .L121+16
 479 02de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 480 02e0 1846     		mov	r0, r3
 481 02e2 FFF7FEFF 		bl	__aeabi_ui2f
 482 02e6 0346     		mov	r3, r0
 483 02e8 1846     		mov	r0, r3
 484 02ea FFF7FEFF 		bl	__aeabi_f2d
 485 02ee 0246     		mov	r2, r0
 486 02f0 0B46     		mov	r3, r1
 487 02f2 2046     		mov	r0, r4
 488 02f4 2946     		mov	r1, r5
 489 02f6 FFF7FEFF 		bl	__aeabi_dadd
 490 02fa 0346     		mov	r3, r0
 491 02fc 0C46     		mov	r4, r1
 492 02fe 1846     		mov	r0, r3
 493 0300 2146     		mov	r1, r4
 494 0302 FFF7FEFF 		bl	__aeabi_d2f
 495 0306 0346     		mov	r3, r0
 496 0308 3B61     		str	r3, [r7, #16]	@ float
 320:main.c        ****                         if(wave_temp > 255.0)
 497              		.loc 1 320 0
 498 030a 8C49     		ldr	r1, .L121+20
 499 030c 3869     		ldr	r0, [r7, #16]	@ float
 500 030e FFF7FEFF 		bl	__aeabi_fcmpgt
 501 0312 0346     		mov	r3, r0
 502 0314 002B     		cmp	r3, #0
 503 0316 01D0     		beq	.L31
 321:main.c        ****                         {
 322:main.c        ****                             wave_temp = 255.0;
 504              		.loc 1 322 0
 505 0318 884B     		ldr	r3, .L121+20
 506 031a 3B61     		str	r3, [r7, #16]	@ float
 507              	.L31:
 323:main.c        ****                         }
 324:main.c        ****                         Waveform_Buffer[i] = (uint8) wave_temp;
 508              		.loc 1 324 0 discriminator 2
 509 031c BC8B     		ldrh	r4, [r7, #28]
 510 031e 3869     		ldr	r0, [r7, #16]	@ float
 511 0320 FFF7FEFF 		bl	__aeabi_f2uiz
 512 0324 0346     		mov	r3, r0
 513 0326 DAB2     		uxtb	r2, r3
 514 0328 854B     		ldr	r3, .L121+24
 515 032a 1A55     		strb	r2, [r3, r4]
 316:main.c        **** 					{
 516              		.loc 1 316 0 discriminator 2
 517 032c BB8B     		ldrh	r3, [r7, #28]
 518 032e 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 16


 519 0330 BB83     		strh	r3, [r7, #28]	@ movhi
 520              	.L30:
 316:main.c        **** 					{
 521              		.loc 1 316 0 is_stmt 0 discriminator 1
 522 0332 BB8B     		ldrh	r3, [r7, #28]
 523 0334 FF2B     		cmp	r3, #255
 524 0336 B3D9     		bls	.L33
 525 0338 00F000BD 		b	.L4
 526              	.L29:
 325:main.c        **** 					}   
 326:main.c        **** 				}
 327:main.c        **** 				else if(*psz == 'A')
 527              		.loc 1 327 0 is_stmt 1
 528 033c FB68     		ldr	r3, [r7, #12]
 529 033e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 530 0340 412B     		cmp	r3, #65
 531 0342 5FD1     		bne	.L34
 328:main.c        **** 				{
 329:main.c        **** 					// set the waveform amplitude
 330:main.c        **** 					// W A A0, where A0 is the a bit amplitude, 0 = 0%, 255 = 100%
 331:main.c        **** 					// program the waveform amplitude by copying it into the array that the waveform generator use
 332:main.c        **** 					// but scale it during the copy
 333:main.c        **** 					
 334:main.c        **** 					psz = strtok(0, " ");
 532              		.loc 1 334 0
 533 0344 7F49     		ldr	r1, .L121+28
 534 0346 0020     		movs	r0, #0
 535 0348 FFF7FEFF 		bl	strtok
 536 034c F860     		str	r0, [r7, #12]
 335:main.c        **** 					sscanf(psz,"%hu", &avar);
 537              		.loc 1 335 0
 538 034e BB1C     		adds	r3, r7, #2
 539 0350 1A46     		mov	r2, r3
 540 0352 7D49     		ldr	r1, .L121+32
 541 0354 F868     		ldr	r0, [r7, #12]
 542 0356 FFF7FEFF 		bl	sscanf
 336:main.c        **** 					
 337:main.c        **** 					wave_gain = avar;
 543              		.loc 1 337 0
 544 035a 7B88     		ldrh	r3, [r7, #2]
 545 035c DAB2     		uxtb	r2, r3
 546 035e 754B     		ldr	r3, .L121+12
 547 0360 1A70     		strb	r2, [r3]
 338:main.c        **** 					
 339:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 548              		.loc 1 339 0
 549 0362 0023     		movs	r3, #0
 550 0364 BB83     		strh	r3, [r7, #28]	@ movhi
 551 0366 48E0     		b	.L35
 552              	.L38:
 340:main.c        **** 					{
 341:main.c        **** 						// GJL - add offset and max checking
 342:main.c        ****                         wave_temp = (((float) Waveform_Temp_Buffer[i]) * ((float)wave_gain)/255.0) 
 553              		.loc 1 342 0
 554 0368 BB8B     		ldrh	r3, [r7, #28]
 555 036a 714A     		ldr	r2, .L121+8
 556 036c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 17


 557 036e 1846     		mov	r0, r3
 558 0370 FFF7FEFF 		bl	__aeabi_ui2f
 559 0374 0446     		mov	r4, r0
 560 0376 6F4B     		ldr	r3, .L121+12
 561 0378 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 562 037a 1846     		mov	r0, r3
 563 037c FFF7FEFF 		bl	__aeabi_ui2f
 564 0380 0346     		mov	r3, r0
 565 0382 1946     		mov	r1, r3
 566 0384 2046     		mov	r0, r4
 567 0386 FFF7FEFF 		bl	__aeabi_fmul
 568 038a 0346     		mov	r3, r0
 569 038c 1846     		mov	r0, r3
 570 038e FFF7FEFF 		bl	__aeabi_f2d
 571 0392 65A3     		adr	r3, .L121
 572 0394 D3E90023 		ldrd	r2, [r3]
 573 0398 FFF7FEFF 		bl	__aeabi_ddiv
 574 039c 0346     		mov	r3, r0
 575 039e 0C46     		mov	r4, r1
 576 03a0 2546     		mov	r5, r4
 577 03a2 1C46     		mov	r4, r3
 578 03a4 644B     		ldr	r3, .L121+16
 579 03a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 580 03a8 1846     		mov	r0, r3
 581 03aa FFF7FEFF 		bl	__aeabi_ui2f
 582 03ae 0346     		mov	r3, r0
 583 03b0 1846     		mov	r0, r3
 584 03b2 FFF7FEFF 		bl	__aeabi_f2d
 585 03b6 0246     		mov	r2, r0
 586 03b8 0B46     		mov	r3, r1
 587 03ba 2046     		mov	r0, r4
 588 03bc 2946     		mov	r1, r5
 589 03be FFF7FEFF 		bl	__aeabi_dadd
 590 03c2 0346     		mov	r3, r0
 591 03c4 0C46     		mov	r4, r1
 592 03c6 1846     		mov	r0, r3
 593 03c8 2146     		mov	r1, r4
 594 03ca FFF7FEFF 		bl	__aeabi_d2f
 595 03ce 0346     		mov	r3, r0
 596 03d0 3B61     		str	r3, [r7, #16]	@ float
 343:main.c        ****                         if(wave_temp > 255.0)
 597              		.loc 1 343 0
 598 03d2 5A49     		ldr	r1, .L121+20
 599 03d4 3869     		ldr	r0, [r7, #16]	@ float
 600 03d6 FFF7FEFF 		bl	__aeabi_fcmpgt
 601 03da 0346     		mov	r3, r0
 602 03dc 002B     		cmp	r3, #0
 603 03de 01D0     		beq	.L36
 344:main.c        ****                         {
 345:main.c        ****                             wave_temp = 255.0;
 604              		.loc 1 345 0
 605 03e0 564B     		ldr	r3, .L121+20
 606 03e2 3B61     		str	r3, [r7, #16]	@ float
 607              	.L36:
 346:main.c        ****                         }
 347:main.c        ****                         Waveform_Buffer[i] = (uint8) wave_temp;
 608              		.loc 1 347 0 discriminator 2
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 18


 609 03e4 BC8B     		ldrh	r4, [r7, #28]
 610 03e6 3869     		ldr	r0, [r7, #16]	@ float
 611 03e8 FFF7FEFF 		bl	__aeabi_f2uiz
 612 03ec 0346     		mov	r3, r0
 613 03ee DAB2     		uxtb	r2, r3
 614 03f0 534B     		ldr	r3, .L121+24
 615 03f2 1A55     		strb	r2, [r3, r4]
 339:main.c        **** 					{
 616              		.loc 1 339 0 discriminator 2
 617 03f4 BB8B     		ldrh	r3, [r7, #28]
 618 03f6 0133     		adds	r3, r3, #1
 619 03f8 BB83     		strh	r3, [r7, #28]	@ movhi
 620              	.L35:
 339:main.c        **** 					{
 621              		.loc 1 339 0 is_stmt 0 discriminator 1
 622 03fa BB8B     		ldrh	r3, [r7, #28]
 623 03fc FF2B     		cmp	r3, #255
 624 03fe B3D9     		bls	.L38
 625 0400 00F09CBC 		b	.L4
 626              	.L34:
 348:main.c        **** 					}              
 349:main.c        ****                     
 350:main.c        **** 				}
 351:main.c        **** 				// GJL - add offset functionality
 352:main.c        ****                 else if(*psz == 'O')
 627              		.loc 1 352 0 is_stmt 1
 628 0404 FB68     		ldr	r3, [r7, #12]
 629 0406 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 630 0408 4F2B     		cmp	r3, #79
 631 040a 5FD1     		bne	.L39
 353:main.c        ****                 {
 354:main.c        ****                     // set waveform offset
 355:main.c        ****                     // W O O0 where O0 is the offset - 0 = 0%, 255 = 100%
 356:main.c        ****                     // program teh offset by copying it into the array that the waveform generator 
 357:main.c        ****                     // but adjust the values upwards during the copy
 358:main.c        ****                     
 359:main.c        ****                     psz = strtok(0, " ");
 632              		.loc 1 359 0
 633 040c 4D49     		ldr	r1, .L121+28
 634 040e 0020     		movs	r0, #0
 635 0410 FFF7FEFF 		bl	strtok
 636 0414 F860     		str	r0, [r7, #12]
 360:main.c        **** 					sscanf(psz,"%hu", &avar);
 637              		.loc 1 360 0
 638 0416 BB1C     		adds	r3, r7, #2
 639 0418 1A46     		mov	r2, r3
 640 041a 4B49     		ldr	r1, .L121+32
 641 041c F868     		ldr	r0, [r7, #12]
 642 041e FFF7FEFF 		bl	sscanf
 361:main.c        **** 					
 362:main.c        **** 					wave_offset = avar;
 643              		.loc 1 362 0
 644 0422 7B88     		ldrh	r3, [r7, #2]
 645 0424 DAB2     		uxtb	r2, r3
 646 0426 444B     		ldr	r3, .L121+16
 647 0428 1A70     		strb	r2, [r3]
 363:main.c        **** 					
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 19


 364:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 648              		.loc 1 364 0
 649 042a 0023     		movs	r3, #0
 650 042c BB83     		strh	r3, [r7, #28]	@ movhi
 651 042e 48E0     		b	.L40
 652              	.L43:
 365:main.c        **** 					{
 366:main.c        **** 						// GJL temp - add offset
 367:main.c        ****                         wave_temp = (((float) Waveform_Temp_Buffer[i]) * ((float)wave_gain)/255.0) 
 653              		.loc 1 367 0
 654 0430 BB8B     		ldrh	r3, [r7, #28]
 655 0432 3F4A     		ldr	r2, .L121+8
 656 0434 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 657 0436 1846     		mov	r0, r3
 658 0438 FFF7FEFF 		bl	__aeabi_ui2f
 659 043c 0446     		mov	r4, r0
 660 043e 3D4B     		ldr	r3, .L121+12
 661 0440 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 662 0442 1846     		mov	r0, r3
 663 0444 FFF7FEFF 		bl	__aeabi_ui2f
 664 0448 0346     		mov	r3, r0
 665 044a 1946     		mov	r1, r3
 666 044c 2046     		mov	r0, r4
 667 044e FFF7FEFF 		bl	__aeabi_fmul
 668 0452 0346     		mov	r3, r0
 669 0454 1846     		mov	r0, r3
 670 0456 FFF7FEFF 		bl	__aeabi_f2d
 671 045a 33A3     		adr	r3, .L121
 672 045c D3E90023 		ldrd	r2, [r3]
 673 0460 FFF7FEFF 		bl	__aeabi_ddiv
 674 0464 0346     		mov	r3, r0
 675 0466 0C46     		mov	r4, r1
 676 0468 2546     		mov	r5, r4
 677 046a 1C46     		mov	r4, r3
 678 046c 324B     		ldr	r3, .L121+16
 679 046e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 680 0470 1846     		mov	r0, r3
 681 0472 FFF7FEFF 		bl	__aeabi_ui2f
 682 0476 0346     		mov	r3, r0
 683 0478 1846     		mov	r0, r3
 684 047a FFF7FEFF 		bl	__aeabi_f2d
 685 047e 0246     		mov	r2, r0
 686 0480 0B46     		mov	r3, r1
 687 0482 2046     		mov	r0, r4
 688 0484 2946     		mov	r1, r5
 689 0486 FFF7FEFF 		bl	__aeabi_dadd
 690 048a 0346     		mov	r3, r0
 691 048c 0C46     		mov	r4, r1
 692 048e 1846     		mov	r0, r3
 693 0490 2146     		mov	r1, r4
 694 0492 FFF7FEFF 		bl	__aeabi_d2f
 695 0496 0346     		mov	r3, r0
 696 0498 3B61     		str	r3, [r7, #16]	@ float
 368:main.c        ****                         if(wave_temp > 255.0)
 697              		.loc 1 368 0
 698 049a 2849     		ldr	r1, .L121+20
 699 049c 3869     		ldr	r0, [r7, #16]	@ float
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 20


 700 049e FFF7FEFF 		bl	__aeabi_fcmpgt
 701 04a2 0346     		mov	r3, r0
 702 04a4 002B     		cmp	r3, #0
 703 04a6 01D0     		beq	.L41
 369:main.c        ****                         {
 370:main.c        ****                             wave_temp = 255.0;
 704              		.loc 1 370 0
 705 04a8 244B     		ldr	r3, .L121+20
 706 04aa 3B61     		str	r3, [r7, #16]	@ float
 707              	.L41:
 371:main.c        ****                         }
 372:main.c        ****                         Waveform_Buffer[i] = (uint8) wave_temp;
 708              		.loc 1 372 0 discriminator 2
 709 04ac BC8B     		ldrh	r4, [r7, #28]
 710 04ae 3869     		ldr	r0, [r7, #16]	@ float
 711 04b0 FFF7FEFF 		bl	__aeabi_f2uiz
 712 04b4 0346     		mov	r3, r0
 713 04b6 DAB2     		uxtb	r2, r3
 714 04b8 214B     		ldr	r3, .L121+24
 715 04ba 1A55     		strb	r2, [r3, r4]
 364:main.c        **** 					{
 716              		.loc 1 364 0 discriminator 2
 717 04bc BB8B     		ldrh	r3, [r7, #28]
 718 04be 0133     		adds	r3, r3, #1
 719 04c0 BB83     		strh	r3, [r7, #28]	@ movhi
 720              	.L40:
 364:main.c        **** 					{
 721              		.loc 1 364 0 is_stmt 0 discriminator 1
 722 04c2 BB8B     		ldrh	r3, [r7, #28]
 723 04c4 FF2B     		cmp	r3, #255
 724 04c6 B3D9     		bls	.L43
 725 04c8 00F038BC 		b	.L4
 726              	.L39:
 373:main.c        **** 					}              
 374:main.c        ****                 }
 375:main.c        ****                 else if(*psz == 'W')
 727              		.loc 1 375 0 is_stmt 1
 728 04cc FB68     		ldr	r3, [r7, #12]
 729 04ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 730 04d0 572B     		cmp	r3, #87
 731 04d2 10D1     		bne	.L44
 376:main.c        **** 				{
 377:main.c        **** 					// select the waveform output
 378:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVE_SELECT_MASK);
 732              		.loc 1 378 0
 733 04d4 FFF7FEFF 		bl	Wave_Control_Read
 734 04d8 0346     		mov	r3, r0
 735 04da 23F00103 		bic	r3, r3, #1
 736 04de DBB2     		uxtb	r3, r3
 737 04e0 1846     		mov	r0, r3
 738 04e2 FFF7FEFF 		bl	Wave_Control_Write
 379:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_WAVE);
 739              		.loc 1 379 0
 740 04e6 FFF7FEFF 		bl	Wave_Control_Read
 741 04ea 0346     		mov	r3, r0
 742 04ec 1846     		mov	r0, r3
 743 04ee FFF7FEFF 		bl	Wave_Control_Write
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 21


 744 04f2 00F023BC 		b	.L4
 745              	.L44:
 380:main.c        **** 				}
 381:main.c        **** 				else if(*psz == 'N')
 746              		.loc 1 381 0
 747 04f6 FB68     		ldr	r3, [r7, #12]
 748 04f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 749 04fa 4E2B     		cmp	r3, #78
 750 04fc 26D1     		bne	.L45
 382:main.c        **** 				{
 383:main.c        **** 					// select the noise output
 384:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVE_SELECT_MASK);
 751              		.loc 1 384 0
 752 04fe FFF7FEFF 		bl	Wave_Control_Read
 753 0502 0346     		mov	r3, r0
 754 0504 23F00103 		bic	r3, r3, #1
 755 0508 DBB2     		uxtb	r3, r3
 756 050a 1846     		mov	r0, r3
 757 050c FFF7FEFF 		bl	Wave_Control_Write
 385:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_NOISE);
 758              		.loc 1 385 0
 759 0510 FFF7FEFF 		bl	Wave_Control_Read
 760 0514 0346     		mov	r3, r0
 761 0516 43F00103 		orr	r3, r3, #1
 762 051a DBB2     		uxtb	r3, r3
 763 051c 1846     		mov	r0, r3
 764 051e FFF7FEFF 		bl	Wave_Control_Write
 765 0522 00F00BBC 		b	.L4
 766              	.L122:
 767 0526 00BF     		.align	3
 768              	.L121:
 769 0528 00000000 		.word	0
 770 052c 00E06F40 		.word	1081073664
 771 0530 00000000 		.word	Waveform_Temp_Buffer
 772 0534 00000000 		.word	wave_gain
 773 0538 00000000 		.word	wave_offset
 774 053c 00007F43 		.word	1132396544
 775 0540 00000000 		.word	Waveform_Buffer
 776 0544 00000000 		.word	.LC0
 777 0548 20000000 		.word	.LC2
 778              	.L45:
 386:main.c        **** 				}
 387:main.c        **** 				else if(*psz == 'F')
 779              		.loc 1 387 0
 780 054c FB68     		ldr	r3, [r7, #12]
 781 054e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 782 0550 462B     		cmp	r3, #70
 783 0552 40F0F383 		bne	.L4
 388:main.c        **** 				{
 389:main.c        **** 					// set the frequency output of the waveform generator
 390:main.c        **** 					// best thing to have here is an actual DDS in the hardware
 391:main.c        **** 					// but to get this working, I'm just going to fake it by setting
 392:main.c        **** 					// the clock divider.  It wont work for everything, but it should be
 393:main.c        **** 					// passable.  The command is W F F3 F2 F1 F0 where Fn are 8 bit ascii
 394:main.c        **** 					// numbers that are combined into a 32 bit phase accumulator value
 395:main.c        **** 					// phase value = desired output frequency / 0.09313225746 Hz
 396:main.c        **** 					
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 22


 397:main.c        **** 					psz = strtok(0, " ");
 784              		.loc 1 397 0
 785 0556 AC49     		ldr	r1, .L123+24
 786 0558 0020     		movs	r0, #0
 787 055a FFF7FEFF 		bl	strtok
 788 055e F860     		str	r0, [r7, #12]
 398:main.c        **** 					sscanf(psz,"%hu", &avar);
 789              		.loc 1 398 0
 790 0560 BB1C     		adds	r3, r7, #2
 791 0562 1A46     		mov	r2, r3
 792 0564 A949     		ldr	r1, .L123+28
 793 0566 F868     		ldr	r0, [r7, #12]
 794 0568 FFF7FEFF 		bl	sscanf
 399:main.c        **** 					phase_int = ((uint32) avar)*16777216;
 795              		.loc 1 399 0
 796 056c 7B88     		ldrh	r3, [r7, #2]
 797 056e 1B06     		lsls	r3, r3, #24
 798 0570 BB61     		str	r3, [r7, #24]
 400:main.c        **** 					
 401:main.c        **** 					psz = strtok(0, " ");
 799              		.loc 1 401 0
 800 0572 A549     		ldr	r1, .L123+24
 801 0574 0020     		movs	r0, #0
 802 0576 FFF7FEFF 		bl	strtok
 803 057a F860     		str	r0, [r7, #12]
 402:main.c        **** 					sscanf(psz,"%hu", &avar);
 804              		.loc 1 402 0
 805 057c BB1C     		adds	r3, r7, #2
 806 057e 1A46     		mov	r2, r3
 807 0580 A249     		ldr	r1, .L123+28
 808 0582 F868     		ldr	r0, [r7, #12]
 809 0584 FFF7FEFF 		bl	sscanf
 403:main.c        **** 					phase_int += ((uint32) avar)*65536;
 810              		.loc 1 403 0
 811 0588 7B88     		ldrh	r3, [r7, #2]
 812 058a 1B04     		lsls	r3, r3, #16
 813 058c BA69     		ldr	r2, [r7, #24]
 814 058e 1344     		add	r3, r3, r2
 815 0590 BB61     		str	r3, [r7, #24]
 404:main.c        **** 					
 405:main.c        **** 					psz = strtok(0, " ");
 816              		.loc 1 405 0
 817 0592 9D49     		ldr	r1, .L123+24
 818 0594 0020     		movs	r0, #0
 819 0596 FFF7FEFF 		bl	strtok
 820 059a F860     		str	r0, [r7, #12]
 406:main.c        **** 					sscanf(psz,"%hu", &avar);
 821              		.loc 1 406 0
 822 059c BB1C     		adds	r3, r7, #2
 823 059e 1A46     		mov	r2, r3
 824 05a0 9A49     		ldr	r1, .L123+28
 825 05a2 F868     		ldr	r0, [r7, #12]
 826 05a4 FFF7FEFF 		bl	sscanf
 407:main.c        **** 					phase_int += ((uint32) avar)*256;
 827              		.loc 1 407 0
 828 05a8 7B88     		ldrh	r3, [r7, #2]
 829 05aa 1B02     		lsls	r3, r3, #8
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 23


 830 05ac BA69     		ldr	r2, [r7, #24]
 831 05ae 1344     		add	r3, r3, r2
 832 05b0 BB61     		str	r3, [r7, #24]
 408:main.c        **** 					
 409:main.c        **** 					psz = strtok(0, " ");
 833              		.loc 1 409 0
 834 05b2 9549     		ldr	r1, .L123+24
 835 05b4 0020     		movs	r0, #0
 836 05b6 FFF7FEFF 		bl	strtok
 837 05ba F860     		str	r0, [r7, #12]
 410:main.c        **** 					sscanf(psz,"%hu", &avar);
 838              		.loc 1 410 0
 839 05bc BB1C     		adds	r3, r7, #2
 840 05be 1A46     		mov	r2, r3
 841 05c0 9249     		ldr	r1, .L123+28
 842 05c2 F868     		ldr	r0, [r7, #12]
 843 05c4 FFF7FEFF 		bl	sscanf
 411:main.c        **** 					phase_int += ((uint32) avar);
 844              		.loc 1 411 0
 845 05c8 7B88     		ldrh	r3, [r7, #2]
 846 05ca 1A46     		mov	r2, r3
 847 05cc BB69     		ldr	r3, [r7, #24]
 848 05ce 1344     		add	r3, r3, r2
 849 05d0 BB61     		str	r3, [r7, #24]
 412:main.c        **** 					
 413:main.c        **** 					freq = ((float) phase_int)*.09313225746;
 850              		.loc 1 413 0
 851 05d2 B869     		ldr	r0, [r7, #24]
 852 05d4 FFF7FEFF 		bl	__aeabi_ui2f
 853 05d8 0346     		mov	r3, r0
 854 05da 1846     		mov	r0, r3
 855 05dc FFF7FEFF 		bl	__aeabi_f2d
 856 05e0 83A3     		adr	r3, .L123
 857 05e2 D3E90023 		ldrd	r2, [r3]
 858 05e6 FFF7FEFF 		bl	__aeabi_dmul
 859 05ea 0346     		mov	r3, r0
 860 05ec 0C46     		mov	r4, r1
 861 05ee 1846     		mov	r0, r3
 862 05f0 2146     		mov	r1, r4
 863 05f2 FFF7FEFF 		bl	__aeabi_d2f
 864 05f6 0346     		mov	r3, r0
 865 05f8 BB60     		str	r3, [r7, #8]	@ float
 414:main.c        **** 					
 415:main.c        **** 					// calculate the clock divider
 416:main.c        **** 					phase_int = (int32) (36000000.0/((float) WAVEFORM_BUFFER_SIZE))/freq;
 866              		.loc 1 416 0
 867 05fa B968     		ldr	r1, [r7, #8]	@ float
 868 05fc 8448     		ldr	r0, .L123+32
 869 05fe FFF7FEFF 		bl	__aeabi_fdiv
 870 0602 0346     		mov	r3, r0
 871 0604 1846     		mov	r0, r3
 872 0606 FFF7FEFF 		bl	__aeabi_f2uiz
 873 060a 0346     		mov	r3, r0
 874 060c BB61     		str	r3, [r7, #24]
 417:main.c        **** 					
 418:main.c        **** 					if(phase_int >= 65535)
 875              		.loc 1 418 0
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 24


 876 060e BB69     		ldr	r3, [r7, #24]
 877 0610 4FF6FE72 		movw	r2, #65534
 878 0614 9342     		cmp	r3, r2
 879 0616 03D9     		bls	.L46
 419:main.c        **** 					{
 420:main.c        **** 						phase_int = 65535;
 880              		.loc 1 420 0
 881 0618 4FF6FF73 		movw	r3, #65535
 882 061c BB61     		str	r3, [r7, #24]
 883 061e 04E0     		b	.L47
 884              	.L46:
 421:main.c        **** 					}
 422:main.c        **** 					else if(phase_int <= 15) // anything less than this and the DMA doesn't have time to execute
 885              		.loc 1 422 0
 886 0620 BB69     		ldr	r3, [r7, #24]
 887 0622 0F2B     		cmp	r3, #15
 888 0624 01D8     		bhi	.L47
 423:main.c        **** 					{
 424:main.c        **** 						phase_int = 15;
 889              		.loc 1 424 0
 890 0626 0F23     		movs	r3, #15
 891 0628 BB61     		str	r3, [r7, #24]
 892              	.L47:
 425:main.c        **** 					}
 426:main.c        **** 					
 427:main.c        **** 					Wave_Clock_SetDividerValue((uint16) phase_int);
 893              		.loc 1 427 0
 894 062a BB69     		ldr	r3, [r7, #24]
 895 062c 9BB2     		uxth	r3, r3
 896 062e 013B     		subs	r3, r3, #1
 897 0630 9BB2     		uxth	r3, r3
 898 0632 0121     		movs	r1, #1
 899 0634 1846     		mov	r0, r3
 900 0636 FFF7FEFF 		bl	Wave_Clock_SetDividerRegister
 428:main.c        ****                     Noise_Clock_SetDividerValue((uint16) phase_int);
 901              		.loc 1 428 0
 902 063a BB69     		ldr	r3, [r7, #24]
 903 063c 9BB2     		uxth	r3, r3
 904 063e 013B     		subs	r3, r3, #1
 905 0640 9BB2     		uxth	r3, r3
 906 0642 0121     		movs	r1, #1
 907 0644 1846     		mov	r0, r3
 908 0646 FFF7FEFF 		bl	Noise_Clock_SetDividerRegister
 909 064a 77E3     		b	.L4
 910              	.L26:
 429:main.c        **** 					
 430:main.c        **** 				}
 431:main.c        **** 			}
 432:main.c        **** 			else if(*psz == 'S')
 911              		.loc 1 432 0
 912 064c FB68     		ldr	r3, [r7, #12]
 913 064e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 914 0650 532B     		cmp	r3, #83
 915 0652 40F06E83 		bne	.L48
 433:main.c        **** 			{
 434:main.c        **** 				// scope commands
 435:main.c        **** 				
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 25


 436:main.c        **** 				psz = strtok(0, " ");
 916              		.loc 1 436 0
 917 0656 6C49     		ldr	r1, .L123+24
 918 0658 0020     		movs	r0, #0
 919 065a FFF7FEFF 		bl	strtok
 920 065e F860     		str	r0, [r7, #12]
 437:main.c        **** 				if(*psz == 'O')
 921              		.loc 1 437 0
 922 0660 FB68     		ldr	r3, [r7, #12]
 923 0662 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 924 0664 4F2B     		cmp	r3, #79
 925 0666 0FD1     		bne	.L49
 438:main.c        **** 				{
 439:main.c        **** 					// read offset from EEPROM command
 440:main.c        **** 					PutChar('O');
 926              		.loc 1 440 0
 927 0668 4F20     		movs	r0, #79
 928 066a FFF7FEFF 		bl	PutChar
 441:main.c        **** 					PutChar(128); // A
 929              		.loc 1 441 0
 930 066e 8020     		movs	r0, #128
 931 0670 FFF7FEFF 		bl	PutChar
 442:main.c        **** 					PutChar(128); // a
 932              		.loc 1 442 0
 933 0674 8020     		movs	r0, #128
 934 0676 FFF7FEFF 		bl	PutChar
 443:main.c        **** 					PutChar(128); // B
 935              		.loc 1 443 0
 936 067a 8020     		movs	r0, #128
 937 067c FFF7FEFF 		bl	PutChar
 444:main.c        **** 					PutChar(128); // b
 938              		.loc 1 444 0
 939 0680 8020     		movs	r0, #128
 940 0682 FFF7FEFF 		bl	PutChar
 941 0686 59E3     		b	.L4
 942              	.L49:
 445:main.c        **** 					
 446:main.c        **** 				}
 447:main.c        **** 				else if(*psz == 'T')
 943              		.loc 1 447 0
 944 0688 FB68     		ldr	r3, [r7, #12]
 945 068a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 946 068c 542B     		cmp	r3, #84
 947 068e 74D1     		bne	.L51
 448:main.c        **** 				{
 449:main.c        **** 					// set the trigger level
 450:main.c        **** 					// data comes back as two ascii strings, each representing an 8 bit value
 451:main.c        **** 					// S T T_HIGH T_LOW where T_HIGH and T_LOW represent a 10 bit number
 452:main.c        **** 					// the trigger is set by the following equation:
 453:main.c        **** 					// 511 - Gain*Trigger_Voltage/0.052421484375 (383 without the offsets set to 128)
 454:main.c        **** 					psz = strtok(0, " ");
 948              		.loc 1 454 0
 949 0690 5D49     		ldr	r1, .L123+24
 950 0692 0020     		movs	r0, #0
 951 0694 FFF7FEFF 		bl	strtok
 952 0698 F860     		str	r0, [r7, #12]
 455:main.c        **** 					sscanf(psz,"%hu", &avar);
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 26


 953              		.loc 1 455 0
 954 069a BB1C     		adds	r3, r7, #2
 955 069c 1A46     		mov	r2, r3
 956 069e 5B49     		ldr	r1, .L123+28
 957 06a0 F868     		ldr	r0, [r7, #12]
 958 06a2 FFF7FEFF 		bl	sscanf
 456:main.c        **** 					bvar = avar*256;
 959              		.loc 1 456 0
 960 06a6 7B88     		ldrh	r3, [r7, #2]
 961 06a8 1B02     		lsls	r3, r3, #8
 962 06aa FB83     		strh	r3, [r7, #30]	@ movhi
 457:main.c        **** 					
 458:main.c        **** 					psz = strtok(0, " ");
 963              		.loc 1 458 0
 964 06ac 5649     		ldr	r1, .L123+24
 965 06ae 0020     		movs	r0, #0
 966 06b0 FFF7FEFF 		bl	strtok
 967 06b4 F860     		str	r0, [r7, #12]
 459:main.c        **** 					sscanf(psz,"%hu", &avar);
 968              		.loc 1 459 0
 969 06b6 BB1C     		adds	r3, r7, #2
 970 06b8 1A46     		mov	r2, r3
 971 06ba 5449     		ldr	r1, .L123+28
 972 06bc F868     		ldr	r0, [r7, #12]
 973 06be FFF7FEFF 		bl	sscanf
 460:main.c        **** 					bvar += avar;
 974              		.loc 1 460 0
 975 06c2 7A88     		ldrh	r2, [r7, #2]
 976 06c4 FB8B     		ldrh	r3, [r7, #30]	@ movhi
 977 06c6 1344     		add	r3, r3, r2
 978 06c8 FB83     		strh	r3, [r7, #30]	@ movhi
 461:main.c        **** 					
 462:main.c        **** 					// voltage = (511 - Value)/Gain * 0.05242 -> (511-Value)/1*0.05242/0.016(mv per bit, 4 volt Vd
 463:main.c        **** 					// there are 2 gain options, 1x and 10x.
 464:main.c        **** 					if(trigger_source == SCOPE_CHANNEL_1)
 979              		.loc 1 464 0
 980 06ca 524B     		ldr	r3, .L123+36
 981 06cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 982 06ce 002B     		cmp	r3, #0
 983 06d0 04D1     		bne	.L52
 465:main.c        **** 					{
 466:main.c        **** 						preamp_trig = preamp_a;
 984              		.loc 1 466 0
 985 06d2 514B     		ldr	r3, .L123+40
 986 06d4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 987 06d6 514B     		ldr	r3, .L123+44
 988 06d8 1A70     		strb	r2, [r3]
 989 06da 03E0     		b	.L53
 990              	.L52:
 467:main.c        **** 					}
 468:main.c        **** 					else
 469:main.c        **** 					{
 470:main.c        **** 						preamp_trig = preamp_b;
 991              		.loc 1 470 0
 992 06dc 504B     		ldr	r3, .L123+48
 993 06de 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 994 06e0 4E4B     		ldr	r3, .L123+44
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 27


 995 06e2 1A70     		strb	r2, [r3]
 996              	.L53:
 471:main.c        **** 					}
 472:main.c        **** 					
 473:main.c        **** 					if(preamp_trig == 1)
 997              		.loc 1 473 0
 998 06e4 4D4B     		ldr	r3, .L123+44
 999 06e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1000 06e8 012B     		cmp	r3, #1
 1001 06ea 14D1     		bne	.L54
 474:main.c        **** 					{
 475:main.c        **** 						cvar = (511-bvar)*3.3093; // 3.27635 (before emperical correction value)
 1002              		.loc 1 475 0
 1003 06ec FB8B     		ldrh	r3, [r7, #30]
 1004 06ee C3F5FF73 		rsb	r3, r3, #510
 1005 06f2 0133     		adds	r3, r3, #1
 1006 06f4 1846     		mov	r0, r3
 1007 06f6 FFF7FEFF 		bl	__aeabi_i2d
 1008 06fa 3FA3     		adr	r3, .L123+8
 1009 06fc D3E90023 		ldrd	r2, [r3]
 1010 0700 FFF7FEFF 		bl	__aeabi_dmul
 1011 0704 0346     		mov	r3, r0
 1012 0706 0C46     		mov	r4, r1
 1013 0708 1846     		mov	r0, r3
 1014 070a 2146     		mov	r1, r4
 1015 070c FFF7FEFF 		bl	__aeabi_d2f
 1016 0710 0346     		mov	r3, r0
 1017 0712 7B61     		str	r3, [r7, #20]	@ float
 1018 0714 13E0     		b	.L55
 1019              	.L54:
 476:main.c        **** 					}
 477:main.c        **** 					else
 478:main.c        **** 					{
 479:main.c        ****                         //cvar = (511-bvar)*0.37685; // .327635 (before empirical correction value)
 480:main.c        ****                         cvar = (511-bvar)*0.75668;
 1020              		.loc 1 480 0
 1021 0716 FB8B     		ldrh	r3, [r7, #30]
 1022 0718 C3F5FF73 		rsb	r3, r3, #510
 1023 071c 0133     		adds	r3, r3, #1
 1024 071e 1846     		mov	r0, r3
 1025 0720 FFF7FEFF 		bl	__aeabi_i2d
 1026 0724 36A3     		adr	r3, .L123+16
 1027 0726 D3E90023 		ldrd	r2, [r3]
 1028 072a FFF7FEFF 		bl	__aeabi_dmul
 1029 072e 0346     		mov	r3, r0
 1030 0730 0C46     		mov	r4, r1
 1031 0732 1846     		mov	r0, r3
 1032 0734 2146     		mov	r1, r4
 1033 0736 FFF7FEFF 		bl	__aeabi_d2f
 1034 073a 0346     		mov	r3, r0
 1035 073c 7B61     		str	r3, [r7, #20]	@ float
 1036              	.L55:
 481:main.c        **** 					}
 482:main.c        **** 					
 483:main.c        **** 					if(cvar <= 0.0)
 1037              		.loc 1 483 0
 1038 073e 4FF00001 		mov	r1, #0
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 28


 1039 0742 7869     		ldr	r0, [r7, #20]	@ float
 1040 0744 FFF7FEFF 		bl	__aeabi_fcmple
 1041 0748 0346     		mov	r3, r0
 1042 074a 002B     		cmp	r3, #0
 1043 074c 03D0     		beq	.L117
 484:main.c        **** 					{
 485:main.c        **** 						cvar = 0.0;
 1044              		.loc 1 485 0
 1045 074e 4FF00003 		mov	r3, #0
 1046 0752 7B61     		str	r3, [r7, #20]	@ float
 1047 0754 08E0     		b	.L58
 1048              	.L117:
 486:main.c        **** 					}
 487:main.c        **** 					else if(cvar >= 255.0)
 1049              		.loc 1 487 0
 1050 0756 3349     		ldr	r1, .L123+52
 1051 0758 7869     		ldr	r0, [r7, #20]	@ float
 1052 075a FFF7FEFF 		bl	__aeabi_fcmpge
 1053 075e 0346     		mov	r3, r0
 1054 0760 002B     		cmp	r3, #0
 1055 0762 01D0     		beq	.L58
 488:main.c        **** 					{
 489:main.c        **** 						cvar = 255.0;
 1056              		.loc 1 489 0
 1057 0764 2F4B     		ldr	r3, .L123+52
 1058 0766 7B61     		str	r3, [r7, #20]	@ float
 1059              	.L58:
 490:main.c        **** 					}
 491:main.c        **** 					Vtrigger_SetValue((uint8) cvar);
 1060              		.loc 1 491 0
 1061 0768 7869     		ldr	r0, [r7, #20]	@ float
 1062 076a FFF7FEFF 		bl	__aeabi_f2uiz
 1063 076e 0346     		mov	r3, r0
 1064 0770 DBB2     		uxtb	r3, r3
 1065 0772 1846     		mov	r0, r3
 1066 0774 FFF7FEFF 		bl	Vtrigger_SetValue
 1067 0778 E0E2     		b	.L4
 1068              	.L51:
 492:main.c        **** 				}
 493:main.c        **** 				else if(*psz == 'C')
 1069              		.loc 1 493 0
 1070 077a FB68     		ldr	r3, [r7, #12]
 1071 077c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1072 077e 432B     		cmp	r3, #67
 1073 0780 52D1     		bne	.L60
 494:main.c        **** 				{
 495:main.c        **** 					// Post trigger buffer size
 496:main.c        **** 					// data comes back as two ascii strings, each representing an 8 bit value
 497:main.c        **** 					// S C C_HIGH C_LOW where C_HIGH and C_LOW represent a 10 bit number
 498:main.c        **** 					psz = strtok(0, " ");
 1074              		.loc 1 498 0
 1075 0782 2149     		ldr	r1, .L123+24
 1076 0784 0020     		movs	r0, #0
 1077 0786 FFF7FEFF 		bl	strtok
 1078 078a F860     		str	r0, [r7, #12]
 499:main.c        **** 					sscanf(psz,"%hu", &avar);
 1079              		.loc 1 499 0
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 29


 1080 078c BB1C     		adds	r3, r7, #2
 1081 078e 1A46     		mov	r2, r3
 1082 0790 1E49     		ldr	r1, .L123+28
 1083 0792 F868     		ldr	r0, [r7, #12]
 1084 0794 FFF7FEFF 		bl	sscanf
 500:main.c        **** 					bvar = avar*256;
 1085              		.loc 1 500 0
 1086 0798 7B88     		ldrh	r3, [r7, #2]
 1087 079a 1B02     		lsls	r3, r3, #8
 1088 079c FB83     		strh	r3, [r7, #30]	@ movhi
 501:main.c        **** 					
 502:main.c        **** 					psz = strtok(0, " ");
 1089              		.loc 1 502 0
 1090 079e 1A49     		ldr	r1, .L123+24
 1091 07a0 0020     		movs	r0, #0
 1092 07a2 FFF7FEFF 		bl	strtok
 1093 07a6 F860     		str	r0, [r7, #12]
 503:main.c        **** 					sscanf(psz,"%hu", &avar);
 1094              		.loc 1 503 0
 1095 07a8 BB1C     		adds	r3, r7, #2
 1096 07aa 1A46     		mov	r2, r3
 1097 07ac 1749     		ldr	r1, .L123+28
 1098 07ae F868     		ldr	r0, [r7, #12]
 1099 07b0 FFF7FEFF 		bl	sscanf
 504:main.c        **** 					bvar += avar;
 1100              		.loc 1 504 0
 1101 07b4 7A88     		ldrh	r2, [r7, #2]
 1102 07b6 FB8B     		ldrh	r3, [r7, #30]	@ movhi
 1103 07b8 1344     		add	r3, r3, r2
 1104 07ba FB83     		strh	r3, [r7, #30]	@ movhi
 505:main.c        **** 					
 506:main.c        **** 					if(bvar >= (BUFFER_SIZE-1))
 1105              		.loc 1 506 0
 1106 07bc FB8B     		ldrh	r3, [r7, #30]
 1107 07be 40F2FE32 		movw	r2, #1022
 1108 07c2 9342     		cmp	r3, r2
 1109 07c4 03D9     		bls	.L61
 507:main.c        **** 					{
 508:main.c        **** 						bvar = (BUFFER_SIZE-1);  // maximum post trigger buffer size
 1110              		.loc 1 508 0
 1111 07c6 40F2FF33 		movw	r3, #1023
 1112 07ca FB83     		strh	r3, [r7, #30]	@ movhi
 1113 07cc 04E0     		b	.L62
 1114              	.L61:
 509:main.c        **** 					}
 510:main.c        **** 					else if(bvar <= 2)
 1115              		.loc 1 510 0
 1116 07ce FB8B     		ldrh	r3, [r7, #30]
 1117 07d0 022B     		cmp	r3, #2
 1118 07d2 01D8     		bhi	.L62
 511:main.c        **** 					{
 512:main.c        **** 						bvar = 2; // minimum post trigger buffer size
 1119              		.loc 1 512 0
 1120 07d4 0223     		movs	r3, #2
 1121 07d6 FB83     		strh	r3, [r7, #30]	@ movhi
 1122              	.L62:
 513:main.c        **** 					}
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 30


 514:main.c        **** 					
 515:main.c        **** 					// update the period to match the trigger buffer size post trigger capture
 516:main.c        **** 					PWM_Sample_Buffer_WritePeriod(bvar); // post trigger buffer
 1123              		.loc 1 516 0
 1124 07d8 FB8B     		ldrh	r3, [r7, #30]
 1125 07da 1846     		mov	r0, r3
 1126 07dc FFF7FEFF 		bl	PWM_Sample_Buffer_WritePeriod
 517:main.c        **** 					// after setting the period, need to set the count to the proper value as well
 518:main.c        **** 					PWM_Sample_Buffer_WriteCounter(bvar); // post trigger buffer					
 1127              		.loc 1 518 0
 1128 07e0 FB8B     		ldrh	r3, [r7, #30]
 1129 07e2 1846     		mov	r0, r3
 1130 07e4 FFF7FEFF 		bl	PWM_Sample_Buffer_WriteCounter
 1131 07e8 A8E2     		b	.L4
 1132              	.L124:
 1133 07ea 00BFAFF3 		.align	3
 1133      0080
 1134              	.L123:
 1135 07f0 524CFEFF 		.word	-111534
 1136 07f4 83D7B73F 		.word	1069012867
 1137 07f8 EF384547 		.word	1195718895
 1138 07fc 72790A40 		.word	1074428274
 1139 0800 6631B1F9 		.word	-105827994
 1140 0804 B836E83F 		.word	1072182968
 1141 0808 00000000 		.word	.LC0
 1142 080c 20000000 		.word	.LC2
 1143 0810 40540948 		.word	1208570944
 1144 0814 00000000 		.word	trigger_source
 1145 0818 00000000 		.word	preamp_a
 1146 081c 00000000 		.word	preamp_trig
 1147 0820 00000000 		.word	preamp_b
 1148 0824 00007F43 		.word	1132396544
 1149              	.L60:
 519:main.c        **** 				}
 520:main.c        **** 				else if(*psz == 'R')
 1150              		.loc 1 520 0
 1151 0828 FB68     		ldr	r3, [r7, #12]
 1152 082a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1153 082c 522B     		cmp	r3, #82
 1154 082e 40F0F180 		bne	.L63
 521:main.c        **** 				{
 522:main.c        **** 					// Scope control register update
 523:main.c        **** 					// data comes back as an ascii number, representing an 8 bit value
 524:main.c        **** 					// bit 7: unused
 525:main.c        **** 					// bit 6: Internal (0, a or b as defined later) or External Trigger (1)
 526:main.c        **** 					// bit 5: trigger polarity, rising (0) or falling (1)
 527:main.c        **** 					// bit 4: trigger source, A (0) or B (1)
 528:main.c        **** 					// bits 3:0 -> sample rate 20 Msps / (2^thisval) this val can be 0 - 15
 529:main.c        **** 					psz = strtok(0, " ");
 1155              		.loc 1 529 0
 1156 0832 B849     		ldr	r1, .L125
 1157 0834 0020     		movs	r0, #0
 1158 0836 FFF7FEFF 		bl	strtok
 1159 083a F860     		str	r0, [r7, #12]
 530:main.c        **** 					sscanf(psz,"%hu", &avar);
 1160              		.loc 1 530 0
 1161 083c BB1C     		adds	r3, r7, #2
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 31


 1162 083e 1A46     		mov	r2, r3
 1163 0840 B549     		ldr	r1, .L125+4
 1164 0842 F868     		ldr	r0, [r7, #12]
 1165 0844 FFF7FEFF 		bl	sscanf
 531:main.c        **** 					
 532:main.c        **** 					// internal versus external trigger
 533:main.c        **** 					// bit 6
 534:main.c        **** 					if((avar & 0x40) == 0)
 1166              		.loc 1 534 0
 1167 0848 7B88     		ldrh	r3, [r7, #2]
 1168 084a 03F04003 		and	r3, r3, #64
 1169 084e 002B     		cmp	r3, #0
 1170 0850 2AD1     		bne	.L64
 535:main.c        **** 					{
 536:main.c        **** 						// internal trigger
 537:main.c        **** 						// trigger polarity
 538:main.c        **** 						// bit 5
 539:main.c        **** 						if((avar & 0x20) == 0)
 1171              		.loc 1 539 0
 1172 0852 7B88     		ldrh	r3, [r7, #2]
 1173 0854 03F02003 		and	r3, r3, #32
 1174 0858 002B     		cmp	r3, #0
 1175 085a 12D1     		bne	.L65
 540:main.c        **** 						{
 541:main.c        **** 							// rising edge
 542:main.c        **** 							Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1176              		.loc 1 542 0
 1177 085c FFF7FEFF 		bl	Trigger_Control_Read
 1178 0860 0346     		mov	r3, r0
 1179 0862 23F00F03 		bic	r3, r3, #15
 1180 0866 DBB2     		uxtb	r3, r3
 1181 0868 1846     		mov	r0, r3
 1182 086a FFF7FEFF 		bl	Trigger_Control_Write
 543:main.c        ****     						Trigger_Control_Write(Trigger_Control_Read() | RISING_EDGE_TRIGGERED);
 1183              		.loc 1 543 0
 1184 086e FFF7FEFF 		bl	Trigger_Control_Read
 1185 0872 0346     		mov	r3, r0
 1186 0874 43F00203 		orr	r3, r3, #2
 1187 0878 DBB2     		uxtb	r3, r3
 1188 087a 1846     		mov	r0, r3
 1189 087c FFF7FEFF 		bl	Trigger_Control_Write
 1190 0880 24E0     		b	.L67
 1191              	.L65:
 544:main.c        **** 						}
 545:main.c        **** 						else
 546:main.c        **** 						{
 547:main.c        **** 							// falling edge
 548:main.c        **** 							Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1192              		.loc 1 548 0
 1193 0882 FFF7FEFF 		bl	Trigger_Control_Read
 1194 0886 0346     		mov	r3, r0
 1195 0888 23F00F03 		bic	r3, r3, #15
 1196 088c DBB2     		uxtb	r3, r3
 1197 088e 1846     		mov	r0, r3
 1198 0890 FFF7FEFF 		bl	Trigger_Control_Write
 549:main.c        ****     						Trigger_Control_Write(Trigger_Control_Read() | FALLING_EDGE_TRIGGERED);
 1199              		.loc 1 549 0
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 32


 1200 0894 FFF7FEFF 		bl	Trigger_Control_Read
 1201 0898 0346     		mov	r3, r0
 1202 089a 43F00103 		orr	r3, r3, #1
 1203 089e DBB2     		uxtb	r3, r3
 1204 08a0 1846     		mov	r0, r3
 1205 08a2 FFF7FEFF 		bl	Trigger_Control_Write
 1206 08a6 11E0     		b	.L67
 1207              	.L64:
 550:main.c        **** 						}
 551:main.c        **** 					}
 552:main.c        **** 					else
 553:main.c        **** 					{
 554:main.c        **** 						// external trigger
 555:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1208              		.loc 1 555 0
 1209 08a8 FFF7FEFF 		bl	Trigger_Control_Read
 1210 08ac 0346     		mov	r3, r0
 1211 08ae 23F00F03 		bic	r3, r3, #15
 1212 08b2 DBB2     		uxtb	r3, r3
 1213 08b4 1846     		mov	r0, r3
 1214 08b6 FFF7FEFF 		bl	Trigger_Control_Write
 556:main.c        ****     					Trigger_Control_Write(Trigger_Control_Read() | EXTERNAL_TRIGGERED);
 1215              		.loc 1 556 0
 1216 08ba FFF7FEFF 		bl	Trigger_Control_Read
 1217 08be 0346     		mov	r3, r0
 1218 08c0 43F00803 		orr	r3, r3, #8
 1219 08c4 DBB2     		uxtb	r3, r3
 1220 08c6 1846     		mov	r0, r3
 1221 08c8 FFF7FEFF 		bl	Trigger_Control_Write
 1222              	.L67:
 557:main.c        **** 					}
 558:main.c        **** 					
 559:main.c        **** 					// bit 4
 560:main.c        **** 					// trigger source select
 561:main.c        **** 					if((avar & 0x10) == 0)
 1223              		.loc 1 561 0
 1224 08cc 7B88     		ldrh	r3, [r7, #2]
 1225 08ce 03F01003 		and	r3, r3, #16
 1226 08d2 002B     		cmp	r3, #0
 1227 08d4 06D1     		bne	.L68
 562:main.c        **** 					{
 563:main.c        **** 						// channel 1 / A
 564:main.c        **** 						trigger_source = SCOPE_CHANNEL_1;
 1228              		.loc 1 564 0
 1229 08d6 914B     		ldr	r3, .L125+8
 1230 08d8 0022     		movs	r2, #0
 1231 08da 1A70     		strb	r2, [r3]
 565:main.c        **** 						Amux_Trigger_Select(SCOPE_CHANNEL_1);
 1232              		.loc 1 565 0
 1233 08dc 0020     		movs	r0, #0
 1234 08de FFF7FEFF 		bl	Amux_Trigger_FastSelect
 1235 08e2 05E0     		b	.L69
 1236              	.L68:
 566:main.c        **** 					}
 567:main.c        **** 					else
 568:main.c        **** 					{
 569:main.c        **** 						// channel 2 / B
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 33


 570:main.c        **** 						trigger_source = SCOPE_CHANNEL_2;
 1237              		.loc 1 570 0
 1238 08e4 8D4B     		ldr	r3, .L125+8
 1239 08e6 0122     		movs	r2, #1
 1240 08e8 1A70     		strb	r2, [r3]
 571:main.c        **** 						Amux_Trigger_Select(SCOPE_CHANNEL_2);
 1241              		.loc 1 571 0
 1242 08ea 0120     		movs	r0, #1
 1243 08ec FFF7FEFF 		bl	Amux_Trigger_FastSelect
 1244              	.L69:
 572:main.c        **** 					}
 573:main.c        **** 					
 574:main.c        **** 					// sample rate
 575:main.c        **** 					// bit 3:0
 576:main.c        **** 					if((avar & 0x0f) <= 0) // 818.2 Ksps "maximum" sample rate
 1245              		.loc 1 576 0
 1246 08f0 7B88     		ldrh	r3, [r7, #2]
 1247 08f2 03F00F03 		and	r3, r3, #15
 1248 08f6 002B     		cmp	r3, #0
 1249 08f8 04DC     		bgt	.L70
 577:main.c        **** 					{
 578:main.c        ****                         // 36 Mhz master clock divided by this number and then divided by 
 579:main.c        ****                         // 18 due to the freq divider set the ADC sample rate.
 580:main.c        **** 						SampleClock_SetDividerValue(1); 
 1250              		.loc 1 580 0
 1251 08fa 0121     		movs	r1, #1
 1252 08fc 0020     		movs	r0, #0
 1253 08fe FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1254 0902 1BE2     		b	.L4
 1255              	.L70:
 581:main.c        **** 					}
 582:main.c        **** 					else if((avar & 0x0f) == 1) // 409.1 ksps
 1256              		.loc 1 582 0
 1257 0904 7B88     		ldrh	r3, [r7, #2]
 1258 0906 03F00F03 		and	r3, r3, #15
 1259 090a 012B     		cmp	r3, #1
 1260 090c 04D1     		bne	.L72
 583:main.c        **** 					{
 584:main.c        **** 						SampleClock_SetDividerValue(2);
 1261              		.loc 1 584 0
 1262 090e 0121     		movs	r1, #1
 1263 0910 0120     		movs	r0, #1
 1264 0912 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1265 0916 11E2     		b	.L4
 1266              	.L72:
 585:main.c        **** 					}
 586:main.c        **** 					else if((avar & 0x0f) == 2) // 204.5 ksps
 1267              		.loc 1 586 0
 1268 0918 7B88     		ldrh	r3, [r7, #2]
 1269 091a 03F00F03 		and	r3, r3, #15
 1270 091e 022B     		cmp	r3, #2
 1271 0920 04D1     		bne	.L73
 587:main.c        **** 					{
 588:main.c        **** 						SampleClock_SetDividerValue(4);
 1272              		.loc 1 588 0
 1273 0922 0121     		movs	r1, #1
 1274 0924 0320     		movs	r0, #3
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 34


 1275 0926 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1276 092a 07E2     		b	.L4
 1277              	.L73:
 589:main.c        **** 					}
 590:main.c        **** 					else if((avar & 0x0f) == 3) // 102.3 ksps
 1278              		.loc 1 590 0
 1279 092c 7B88     		ldrh	r3, [r7, #2]
 1280 092e 03F00F03 		and	r3, r3, #15
 1281 0932 032B     		cmp	r3, #3
 1282 0934 04D1     		bne	.L74
 591:main.c        **** 					{
 592:main.c        **** 						SampleClock_SetDividerValue(8);
 1283              		.loc 1 592 0
 1284 0936 0121     		movs	r1, #1
 1285 0938 0720     		movs	r0, #7
 1286 093a FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1287 093e FDE1     		b	.L4
 1288              	.L74:
 593:main.c        **** 					}
 594:main.c        **** 					else if((avar & 0x0f) == 4) // 51.1 ksps
 1289              		.loc 1 594 0
 1290 0940 7B88     		ldrh	r3, [r7, #2]
 1291 0942 03F00F03 		and	r3, r3, #15
 1292 0946 042B     		cmp	r3, #4
 1293 0948 04D1     		bne	.L75
 595:main.c        **** 					{ 
 596:main.c        **** 						SampleClock_SetDividerValue(16);
 1294              		.loc 1 596 0
 1295 094a 0121     		movs	r1, #1
 1296 094c 0F20     		movs	r0, #15
 1297 094e FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1298 0952 F3E1     		b	.L4
 1299              	.L75:
 597:main.c        **** 					}
 598:main.c        **** 					else if((avar & 0x0f) == 5) // 25.6 ksps
 1300              		.loc 1 598 0
 1301 0954 7B88     		ldrh	r3, [r7, #2]
 1302 0956 03F00F03 		and	r3, r3, #15
 1303 095a 052B     		cmp	r3, #5
 1304 095c 04D1     		bne	.L76
 599:main.c        **** 					{
 600:main.c        **** 						SampleClock_SetDividerValue(32);
 1305              		.loc 1 600 0
 1306 095e 0121     		movs	r1, #1
 1307 0960 1F20     		movs	r0, #31
 1308 0962 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1309 0966 E9E1     		b	.L4
 1310              	.L76:
 601:main.c        **** 					}
 602:main.c        **** 					else if((avar & 0x0f) == 6) // 12.8 ksps
 1311              		.loc 1 602 0
 1312 0968 7B88     		ldrh	r3, [r7, #2]
 1313 096a 03F00F03 		and	r3, r3, #15
 1314 096e 062B     		cmp	r3, #6
 1315 0970 04D1     		bne	.L77
 603:main.c        **** 					{
 604:main.c        **** 						SampleClock_SetDividerValue(64);
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 35


 1316              		.loc 1 604 0
 1317 0972 0121     		movs	r1, #1
 1318 0974 3F20     		movs	r0, #63
 1319 0976 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1320 097a DFE1     		b	.L4
 1321              	.L77:
 605:main.c        **** 					}
 606:main.c        **** 					else if((avar & 0x0f) == 7) // 6.4 ksps
 1322              		.loc 1 606 0
 1323 097c 7B88     		ldrh	r3, [r7, #2]
 1324 097e 03F00F03 		and	r3, r3, #15
 1325 0982 072B     		cmp	r3, #7
 1326 0984 04D1     		bne	.L78
 607:main.c        **** 					{ 
 608:main.c        **** 						SampleClock_SetDividerValue(128);
 1327              		.loc 1 608 0
 1328 0986 0121     		movs	r1, #1
 1329 0988 7F20     		movs	r0, #127
 1330 098a FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1331 098e D5E1     		b	.L4
 1332              	.L78:
 609:main.c        **** 					}
 610:main.c        **** 					else if((avar & 0x0f) == 8) // 3.2 ksps
 1333              		.loc 1 610 0
 1334 0990 7B88     		ldrh	r3, [r7, #2]
 1335 0992 03F00F03 		and	r3, r3, #15
 1336 0996 082B     		cmp	r3, #8
 1337 0998 04D1     		bne	.L79
 611:main.c        **** 					{
 612:main.c        **** 						SampleClock_SetDividerValue(256);
 1338              		.loc 1 612 0
 1339 099a 0121     		movs	r1, #1
 1340 099c FF20     		movs	r0, #255
 1341 099e FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1342 09a2 CBE1     		b	.L4
 1343              	.L79:
 613:main.c        **** 					}
 614:main.c        **** 					else if((avar & 0x0f) == 9) // 1.6 ksps
 1344              		.loc 1 614 0
 1345 09a4 7B88     		ldrh	r3, [r7, #2]
 1346 09a6 03F00F03 		and	r3, r3, #15
 1347 09aa 092B     		cmp	r3, #9
 1348 09ac 05D1     		bne	.L80
 615:main.c        **** 					{
 616:main.c        **** 						SampleClock_SetDividerValue(512);
 1349              		.loc 1 616 0
 1350 09ae 0121     		movs	r1, #1
 1351 09b0 40F2FF10 		movw	r0, #511
 1352 09b4 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1353 09b8 C0E1     		b	.L4
 1354              	.L80:
 617:main.c        **** 					}
 618:main.c        **** 					else if((avar & 0x0f) == 10) // 799 sps 
 1355              		.loc 1 618 0
 1356 09ba 7B88     		ldrh	r3, [r7, #2]
 1357 09bc 03F00F03 		and	r3, r3, #15
 1358 09c0 0A2B     		cmp	r3, #10
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 36


 1359 09c2 05D1     		bne	.L81
 619:main.c        **** 					{ 
 620:main.c        **** 						SampleClock_SetDividerValue(1024);
 1360              		.loc 1 620 0
 1361 09c4 0121     		movs	r1, #1
 1362 09c6 40F2FF30 		movw	r0, #1023
 1363 09ca FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1364 09ce B5E1     		b	.L4
 1365              	.L81:
 621:main.c        **** 					}
 622:main.c        **** 					else if((avar & 0x0f) == 11) // 400 sps
 1366              		.loc 1 622 0
 1367 09d0 7B88     		ldrh	r3, [r7, #2]
 1368 09d2 03F00F03 		and	r3, r3, #15
 1369 09d6 0B2B     		cmp	r3, #11
 1370 09d8 05D1     		bne	.L82
 623:main.c        **** 					{ 
 624:main.c        **** 						SampleClock_SetDividerValue(2048);
 1371              		.loc 1 624 0
 1372 09da 0121     		movs	r1, #1
 1373 09dc 40F2FF70 		movw	r0, #2047
 1374 09e0 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1375 09e4 AAE1     		b	.L4
 1376              	.L82:
 625:main.c        **** 					}                    
 626:main.c        **** 					else if((avar & 0x0f) == 12) // 200 sps
 1377              		.loc 1 626 0
 1378 09e6 7B88     		ldrh	r3, [r7, #2]
 1379 09e8 03F00F03 		and	r3, r3, #15
 1380 09ec 0C2B     		cmp	r3, #12
 1381 09ee 05D1     		bne	.L83
 627:main.c        **** 					{ 
 628:main.c        **** 						SampleClock_SetDividerValue(4096);
 1382              		.loc 1 628 0
 1383 09f0 0121     		movs	r1, #1
 1384 09f2 40F6FF70 		movw	r0, #4095
 1385 09f6 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1386 09fa 9FE1     		b	.L4
 1387              	.L83:
 629:main.c        **** 					}
 630:main.c        **** 					else if((avar & 0x0f) >= 13) // 100 sps
 1388              		.loc 1 630 0
 1389 09fc 7B88     		ldrh	r3, [r7, #2]
 1390 09fe 03F00F03 		and	r3, r3, #15
 1391 0a02 0C2B     		cmp	r3, #12
 1392 0a04 40F39A81 		ble	.L4
 631:main.c        **** 					{ 
 632:main.c        **** 						SampleClock_SetDividerValue(8192);
 1393              		.loc 1 632 0
 1394 0a08 0121     		movs	r1, #1
 1395 0a0a 41F6FF70 		movw	r0, #8191
 1396 0a0e FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1397 0a12 93E1     		b	.L4
 1398              	.L63:
 633:main.c        **** 					}
 634:main.c        ****                 }
 635:main.c        **** 				else if(*psz == 'D')
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 37


 1399              		.loc 1 635 0
 1400 0a14 FB68     		ldr	r3, [r7, #12]
 1401 0a16 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1402 0a18 442B     		cmp	r3, #68
 1403 0a1a 59D1     		bne	.L84
 636:main.c        **** 				{
 637:main.c        **** 					// Scope debug hardware command
 638:main.c        **** 					// data comes back as an ascii number, representing a single value
 639:main.c        **** 					// 0 set reset to 0
 640:main.c        **** 					// 1 set reset to 1
 641:main.c        **** 					// 2 set REQ = 0
 642:main.c        **** 					// 3 set REQ = 1
 643:main.c        **** 					// 4 set MAN_TRIG = 1
 644:main.c        **** 					// 5 set MAN_TRIG = 0
 645:main.c        **** 					psz = strtok(0, " ");
 1404              		.loc 1 645 0
 1405 0a1c 3D49     		ldr	r1, .L125
 1406 0a1e 0020     		movs	r0, #0
 1407 0a20 FFF7FEFF 		bl	strtok
 1408 0a24 F860     		str	r0, [r7, #12]
 646:main.c        **** 					sscanf(psz,"%hu", &avar);
 1409              		.loc 1 646 0
 1410 0a26 BB1C     		adds	r3, r7, #2
 1411 0a28 1A46     		mov	r2, r3
 1412 0a2a 3B49     		ldr	r1, .L125+4
 1413 0a2c F868     		ldr	r0, [r7, #12]
 1414 0a2e FFF7FEFF 		bl	sscanf
 647:main.c        **** 					
 648:main.c        **** 					if(avar == 0) // reset PWM = 0
 1415              		.loc 1 648 0
 1416 0a32 7B88     		ldrh	r3, [r7, #2]
 1417 0a34 002B     		cmp	r3, #0
 1418 0a36 09D1     		bne	.L85
 649:main.c        **** 					{
 650:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~RESET_PWM);
 1419              		.loc 1 650 0
 1420 0a38 FFF7FEFF 		bl	Trigger_Control_Read
 1421 0a3c 0346     		mov	r3, r0
 1422 0a3e 03F07F03 		and	r3, r3, #127
 1423 0a42 DBB2     		uxtb	r3, r3
 1424 0a44 1846     		mov	r0, r3
 1425 0a46 FFF7FEFF 		bl	Trigger_Control_Write
 1426 0a4a 77E1     		b	.L4
 1427              	.L85:
 651:main.c        **** 					}
 652:main.c        **** 					else if(avar == 1) // reset PWM = 1
 1428              		.loc 1 652 0
 1429 0a4c 7B88     		ldrh	r3, [r7, #2]
 1430 0a4e 012B     		cmp	r3, #1
 1431 0a50 09D1     		bne	.L87
 653:main.c        **** 					{
 654:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | RESET_PWM);
 1432              		.loc 1 654 0
 1433 0a52 FFF7FEFF 		bl	Trigger_Control_Read
 1434 0a56 0346     		mov	r3, r0
 1435 0a58 63F07F03 		orn	r3, r3, #127
 1436 0a5c DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 38


 1437 0a5e 1846     		mov	r0, r3
 1438 0a60 FFF7FEFF 		bl	Trigger_Control_Write
 1439 0a64 6AE1     		b	.L4
 1440              	.L87:
 655:main.c        **** 					}
 656:main.c        **** 					else if(avar == 2) // set REQ = 0
 1441              		.loc 1 656 0
 1442 0a66 7B88     		ldrh	r3, [r7, #2]
 1443 0a68 022B     		cmp	r3, #2
 1444 0a6a 09D1     		bne	.L88
 657:main.c        **** 					{
 658:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 1445              		.loc 1 658 0
 1446 0a6c FFF7FEFF 		bl	Trigger_Control_Read
 1447 0a70 0346     		mov	r3, r0
 1448 0a72 23F04003 		bic	r3, r3, #64
 1449 0a76 DBB2     		uxtb	r3, r3
 1450 0a78 1846     		mov	r0, r3
 1451 0a7a FFF7FEFF 		bl	Trigger_Control_Write
 1452 0a7e 5DE1     		b	.L4
 1453              	.L88:
 659:main.c        **** 					}
 660:main.c        **** 					else if(avar == 3) // set REQ = 1
 1454              		.loc 1 660 0
 1455 0a80 7B88     		ldrh	r3, [r7, #2]
 1456 0a82 032B     		cmp	r3, #3
 1457 0a84 09D1     		bne	.L89
 661:main.c        **** 					{
 662:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 1458              		.loc 1 662 0
 1459 0a86 FFF7FEFF 		bl	Trigger_Control_Read
 1460 0a8a 0346     		mov	r3, r0
 1461 0a8c 43F04003 		orr	r3, r3, #64
 1462 0a90 DBB2     		uxtb	r3, r3
 1463 0a92 1846     		mov	r0, r3
 1464 0a94 FFF7FEFF 		bl	Trigger_Control_Write
 1465 0a98 50E1     		b	.L4
 1466              	.L89:
 663:main.c        **** 					}
 664:main.c        **** 					else if(avar == 4) // manual trigger = 0
 1467              		.loc 1 664 0
 1468 0a9a 7B88     		ldrh	r3, [r7, #2]
 1469 0a9c 042B     		cmp	r3, #4
 1470 0a9e 09D1     		bne	.L90
 665:main.c        **** 					{
 666:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~MANUAL_TRIGGER);
 1471              		.loc 1 666 0
 1472 0aa0 FFF7FEFF 		bl	Trigger_Control_Read
 1473 0aa4 0346     		mov	r3, r0
 1474 0aa6 23F01003 		bic	r3, r3, #16
 1475 0aaa DBB2     		uxtb	r3, r3
 1476 0aac 1846     		mov	r0, r3
 1477 0aae FFF7FEFF 		bl	Trigger_Control_Write
 1478 0ab2 43E1     		b	.L4
 1479              	.L90:
 667:main.c        **** 					}
 668:main.c        **** 					else if(avar == 5) // manual trigger = 1
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 39


 1480              		.loc 1 668 0
 1481 0ab4 7B88     		ldrh	r3, [r7, #2]
 1482 0ab6 052B     		cmp	r3, #5
 1483 0ab8 40F04081 		bne	.L4
 669:main.c        **** 					{
 670:main.c        **** 						//Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 671:main.c        **** 						//Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 672:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | MANUAL_TRIGGER);
 1484              		.loc 1 672 0
 1485 0abc FFF7FEFF 		bl	Trigger_Control_Read
 1486 0ac0 0346     		mov	r3, r0
 1487 0ac2 43F01003 		orr	r3, r3, #16
 1488 0ac6 DBB2     		uxtb	r3, r3
 1489 0ac8 1846     		mov	r0, r3
 1490 0aca FFF7FEFF 		bl	Trigger_Control_Write
 1491 0ace 35E1     		b	.L4
 1492              	.L84:
 673:main.c        **** 					}
 674:main.c        **** 					
 675:main.c        **** 				}
 676:main.c        **** 				else if(*psz == 'G')
 1493              		.loc 1 676 0
 1494 0ad0 FB68     		ldr	r3, [r7, #12]
 1495 0ad2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1496 0ad4 472B     		cmp	r3, #71
 1497 0ad6 12D1     		bne	.L91
 677:main.c        **** 				{
 678:main.c        **** 					// Scope GO, arms the scope and waits for a trigger event
 679:main.c        **** 					// if a trigger occurs, sends back the character 'A' followed
 680:main.c        **** 					// by a 2nd and 3rd byte in binary format indicating the address
 681:main.c        **** 					// where the capture ended in the buffer (10 bits).  I'm assuming Aa format
 682:main.c        **** 					
 683:main.c        **** 					// arm the scope
 684:main.c        **** 					Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 1498              		.loc 1 684 0
 1499 0ad8 FFF7FEFF 		bl	Trigger_Control_Read
 1500 0adc 0346     		mov	r3, r0
 1501 0ade 43F04003 		orr	r3, r3, #64
 1502 0ae2 DBB2     		uxtb	r3, r3
 1503 0ae4 1846     		mov	r0, r3
 1504 0ae6 FFF7FEFF 		bl	Trigger_Control_Write
 685:main.c        **** 					Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 1505              		.loc 1 685 0
 1506 0aea FFF7FEFF 		bl	Trigger_Control_Read
 1507 0aee 0346     		mov	r3, r0
 1508 0af0 23F04003 		bic	r3, r3, #64
 1509 0af4 DBB2     		uxtb	r3, r3
 1510 0af6 1846     		mov	r0, r3
 1511 0af8 FFF7FEFF 		bl	Trigger_Control_Write
 1512 0afc 1EE1     		b	.L4
 1513              	.L91:
 686:main.c        **** 					
 687:main.c        **** 				}
 688:main.c        **** 				else if(*psz == 'B')
 1514              		.loc 1 688 0
 1515 0afe FB68     		ldr	r3, [r7, #12]
 1516 0b00 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 40


 1517 0b02 422B     		cmp	r3, #66
 1518 0b04 40F0E880 		bne	.L92
 689:main.c        **** 				{
 690:main.c        **** 					// dump the scope buffer
 691:main.c        **** 					PutChar('D');
 1519              		.loc 1 691 0
 1520 0b08 4420     		movs	r0, #68
 1521 0b0a FFF7FEFF 		bl	PutChar
 692:main.c        **** 					
 693:main.c        **** 					for(i = 0; i < BUFFER_SIZE; i++)
 1522              		.loc 1 693 0
 1523 0b0e 0023     		movs	r3, #0
 1524 0b10 BB83     		strh	r3, [r7, #28]	@ movhi
 1525 0b12 DBE0     		b	.L93
 1526              	.L126:
 1527              		.align	2
 1528              	.L125:
 1529 0b14 00000000 		.word	.LC0
 1530 0b18 20000000 		.word	.LC2
 1531 0b1c 00000000 		.word	trigger_source
 1532              	.L103:
 694:main.c        **** 					{
 695:main.c        **** 						// truncate to 10 bits and "offset" to work with scope hardware
 696:main.c        **** 						if(preamp_a == 1)
 1533              		.loc 1 696 0
 1534 0b20 B14B     		ldr	r3, .L127+32
 1535 0b22 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1536 0b24 012B     		cmp	r3, #1
 1537 0b26 1ED1     		bne	.L94
 697:main.c        **** 						{ // preamp gain of 1
 698:main.c        **** 							avar = (uint16) (511 - (Channel_1_Data[i]/42.68));
 1538              		.loc 1 698 0
 1539 0b28 BB8B     		ldrh	r3, [r7, #28]
 1540 0b2a B04A     		ldr	r2, .L127+36
 1541 0b2c 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1542 0b30 1846     		mov	r0, r3
 1543 0b32 FFF7FEFF 		bl	__aeabi_i2d
 1544 0b36 A4A3     		adr	r3, .L127
 1545 0b38 D3E90023 		ldrd	r2, [r3]
 1546 0b3c FFF7FEFF 		bl	__aeabi_ddiv
 1547 0b40 0346     		mov	r3, r0
 1548 0b42 0C46     		mov	r4, r1
 1549 0b44 1A46     		mov	r2, r3
 1550 0b46 2346     		mov	r3, r4
 1551 0b48 A1A1     		adr	r1, .L127+8
 1552 0b4a D1E90001 		ldrd	r0, [r1]
 1553 0b4e FFF7FEFF 		bl	__aeabi_dsub
 1554 0b52 0346     		mov	r3, r0
 1555 0b54 0C46     		mov	r4, r1
 1556 0b56 1846     		mov	r0, r3
 1557 0b58 2146     		mov	r1, r4
 1558 0b5a FFF7FEFF 		bl	__aeabi_d2uiz
 1559 0b5e 0346     		mov	r3, r0
 1560 0b60 9BB2     		uxth	r3, r3
 1561 0b62 7B80     		strh	r3, [r7, #2]	@ movhi
 1562 0b64 1DE0     		b	.L95
 1563              	.L94:
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 41


 699:main.c        **** 						}
 700:main.c        **** 						else
 701:main.c        **** 						{ // preamp gain of 10
 702:main.c        **** 							// GJL - fix truncation at 3V by changing 511 to 1023 and fixing in scope.tcl also
 703:main.c        ****                             avar = (uint16) (1023 - (Channel_1_Data[i]/4.8497));
 1564              		.loc 1 703 0
 1565 0b66 BB8B     		ldrh	r3, [r7, #28]
 1566 0b68 A04A     		ldr	r2, .L127+36
 1567 0b6a 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1568 0b6e 1846     		mov	r0, r3
 1569 0b70 FFF7FEFF 		bl	__aeabi_i2d
 1570 0b74 98A3     		adr	r3, .L127+16
 1571 0b76 D3E90023 		ldrd	r2, [r3]
 1572 0b7a FFF7FEFF 		bl	__aeabi_ddiv
 1573 0b7e 0346     		mov	r3, r0
 1574 0b80 0C46     		mov	r4, r1
 1575 0b82 1A46     		mov	r2, r3
 1576 0b84 2346     		mov	r3, r4
 1577 0b86 96A1     		adr	r1, .L127+24
 1578 0b88 D1E90001 		ldrd	r0, [r1]
 1579 0b8c FFF7FEFF 		bl	__aeabi_dsub
 1580 0b90 0346     		mov	r3, r0
 1581 0b92 0C46     		mov	r4, r1
 1582 0b94 1846     		mov	r0, r3
 1583 0b96 2146     		mov	r1, r4
 1584 0b98 FFF7FEFF 		bl	__aeabi_d2uiz
 1585 0b9c 0346     		mov	r3, r0
 1586 0b9e 9BB2     		uxth	r3, r3
 1587 0ba0 7B80     		strh	r3, [r7, #2]	@ movhi
 1588              	.L95:
 704:main.c        **** 						}
 705:main.c        **** 						
 706:main.c        **** 						if(preamp_b == 1)
 1589              		.loc 1 706 0
 1590 0ba2 934B     		ldr	r3, .L127+40
 1591 0ba4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1592 0ba6 012B     		cmp	r3, #1
 1593 0ba8 1DD1     		bne	.L96
 707:main.c        **** 						{ // preamp gain of 1
 708:main.c        **** 							bvar = (uint16) (511 - (Channel_2_Data[i]/42.68));
 1594              		.loc 1 708 0
 1595 0baa BB8B     		ldrh	r3, [r7, #28]
 1596 0bac 914A     		ldr	r2, .L127+44
 1597 0bae 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1598 0bb2 1846     		mov	r0, r3
 1599 0bb4 FFF7FEFF 		bl	__aeabi_i2d
 1600 0bb8 83A3     		adr	r3, .L127
 1601 0bba D3E90023 		ldrd	r2, [r3]
 1602 0bbe FFF7FEFF 		bl	__aeabi_ddiv
 1603 0bc2 0346     		mov	r3, r0
 1604 0bc4 0C46     		mov	r4, r1
 1605 0bc6 1A46     		mov	r2, r3
 1606 0bc8 2346     		mov	r3, r4
 1607 0bca 81A1     		adr	r1, .L127+8
 1608 0bcc D1E90001 		ldrd	r0, [r1]
 1609 0bd0 FFF7FEFF 		bl	__aeabi_dsub
 1610 0bd4 0346     		mov	r3, r0
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 42


 1611 0bd6 0C46     		mov	r4, r1
 1612 0bd8 1846     		mov	r0, r3
 1613 0bda 2146     		mov	r1, r4
 1614 0bdc FFF7FEFF 		bl	__aeabi_d2uiz
 1615 0be0 0346     		mov	r3, r0
 1616 0be2 FB83     		strh	r3, [r7, #30]	@ movhi
 1617 0be4 1CE0     		b	.L97
 1618              	.L96:
 709:main.c        **** 						}
 710:main.c        **** 						else
 711:main.c        **** 						{ // preamp gain of 10
 712:main.c        **** 							bvar = (uint16) (1023 - (Channel_2_Data[i]/4.8497));
 1619              		.loc 1 712 0
 1620 0be6 BB8B     		ldrh	r3, [r7, #28]
 1621 0be8 824A     		ldr	r2, .L127+44
 1622 0bea 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1623 0bee 1846     		mov	r0, r3
 1624 0bf0 FFF7FEFF 		bl	__aeabi_i2d
 1625 0bf4 78A3     		adr	r3, .L127+16
 1626 0bf6 D3E90023 		ldrd	r2, [r3]
 1627 0bfa FFF7FEFF 		bl	__aeabi_ddiv
 1628 0bfe 0346     		mov	r3, r0
 1629 0c00 0C46     		mov	r4, r1
 1630 0c02 1A46     		mov	r2, r3
 1631 0c04 2346     		mov	r3, r4
 1632 0c06 76A1     		adr	r1, .L127+24
 1633 0c08 D1E90001 		ldrd	r0, [r1]
 1634 0c0c FFF7FEFF 		bl	__aeabi_dsub
 1635 0c10 0346     		mov	r3, r0
 1636 0c12 0C46     		mov	r4, r1
 1637 0c14 1846     		mov	r0, r3
 1638 0c16 2146     		mov	r1, r4
 1639 0c18 FFF7FEFF 		bl	__aeabi_d2uiz
 1640 0c1c 0346     		mov	r3, r0
 1641 0c1e FB83     		strh	r3, [r7, #30]	@ movhi
 1642              	.L97:
 713:main.c        **** 						}
 714:main.c        **** 						
 715:main.c        **** 						// send the data out to the terminal
 716:main.c        **** 						USB_Out_Buffer[(i*4+0) % USBUART_BUFFER_SIZE] = (uint8) ((avar >> 8) & 0x0003); // address of
 1643              		.loc 1 716 0
 1644 0c20 BB8B     		ldrh	r3, [r7, #28]
 1645 0c22 9B00     		lsls	r3, r3, #2
 1646 0c24 03F03C03 		and	r3, r3, #60
 1647 0c28 7A88     		ldrh	r2, [r7, #2]
 1648 0c2a 120A     		lsrs	r2, r2, #8
 1649 0c2c 92B2     		uxth	r2, r2
 1650 0c2e D2B2     		uxtb	r2, r2
 1651 0c30 02F00302 		and	r2, r2, #3
 1652 0c34 D1B2     		uxtb	r1, r2
 1653 0c36 704A     		ldr	r2, .L127+48
 1654 0c38 D154     		strb	r1, [r2, r3]
 717:main.c        **** 						USB_Out_Buffer[(i*4+1) % USBUART_BUFFER_SIZE] = (uint8) (avar & 0x00FF); // address of the en
 1655              		.loc 1 717 0
 1656 0c3a BB8B     		ldrh	r3, [r7, #28]
 1657 0c3c 9B00     		lsls	r3, r3, #2
 1658 0c3e 5A1C     		adds	r2, r3, #1
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 43


 1659 0c40 6E4B     		ldr	r3, .L127+52
 1660 0c42 1340     		ands	r3, r3, r2
 1661 0c44 002B     		cmp	r3, #0
 1662 0c46 03DA     		bge	.L98
 1663 0c48 013B     		subs	r3, r3, #1
 1664 0c4a 63F03F03 		orn	r3, r3, #63
 1665 0c4e 0133     		adds	r3, r3, #1
 1666              	.L98:
 1667 0c50 1A46     		mov	r2, r3
 1668 0c52 7B88     		ldrh	r3, [r7, #2]
 1669 0c54 D9B2     		uxtb	r1, r3
 1670 0c56 684B     		ldr	r3, .L127+48
 1671 0c58 9954     		strb	r1, [r3, r2]
 718:main.c        **** 						USB_Out_Buffer[(i*4+2) % USBUART_BUFFER_SIZE] = (uint8) ((bvar >> 8) & 0x0003); // address of
 1672              		.loc 1 718 0
 1673 0c5a BB8B     		ldrh	r3, [r7, #28]
 1674 0c5c 9B00     		lsls	r3, r3, #2
 1675 0c5e 9A1C     		adds	r2, r3, #2
 1676 0c60 664B     		ldr	r3, .L127+52
 1677 0c62 1340     		ands	r3, r3, r2
 1678 0c64 002B     		cmp	r3, #0
 1679 0c66 03DA     		bge	.L99
 1680 0c68 013B     		subs	r3, r3, #1
 1681 0c6a 63F03F03 		orn	r3, r3, #63
 1682 0c6e 0133     		adds	r3, r3, #1
 1683              	.L99:
 1684 0c70 1A46     		mov	r2, r3
 1685 0c72 FB8B     		ldrh	r3, [r7, #30]
 1686 0c74 1B0A     		lsrs	r3, r3, #8
 1687 0c76 9BB2     		uxth	r3, r3
 1688 0c78 DBB2     		uxtb	r3, r3
 1689 0c7a 03F00303 		and	r3, r3, #3
 1690 0c7e D9B2     		uxtb	r1, r3
 1691 0c80 5D4B     		ldr	r3, .L127+48
 1692 0c82 9954     		strb	r1, [r3, r2]
 719:main.c        **** 						USB_Out_Buffer[(i*4+3) % USBUART_BUFFER_SIZE] = (uint8) (bvar & 0x00FF); // address of the en
 1693              		.loc 1 719 0
 1694 0c84 BB8B     		ldrh	r3, [r7, #28]
 1695 0c86 9B00     		lsls	r3, r3, #2
 1696 0c88 DA1C     		adds	r2, r3, #3
 1697 0c8a 5C4B     		ldr	r3, .L127+52
 1698 0c8c 1340     		ands	r3, r3, r2
 1699 0c8e 002B     		cmp	r3, #0
 1700 0c90 03DA     		bge	.L100
 1701 0c92 013B     		subs	r3, r3, #1
 1702 0c94 63F03F03 		orn	r3, r3, #63
 1703 0c98 0133     		adds	r3, r3, #1
 1704              	.L100:
 1705 0c9a 1A46     		mov	r2, r3
 1706 0c9c FB8B     		ldrh	r3, [r7, #30]	@ movhi
 1707 0c9e D9B2     		uxtb	r1, r3
 1708 0ca0 554B     		ldr	r3, .L127+48
 1709 0ca2 9954     		strb	r1, [r3, r2]
 720:main.c        **** 						
 721:main.c        **** 						// our buffer has been filled up, dump the data out the serial port
 722:main.c        **** 						if(((i*4+4) % USBUART_BUFFER_SIZE) == 0)
 1710              		.loc 1 722 0
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 44


 1711 0ca4 BB8B     		ldrh	r3, [r7, #28]
 1712 0ca6 0133     		adds	r3, r3, #1
 1713 0ca8 9B00     		lsls	r3, r3, #2
 1714 0caa 03F03C03 		and	r3, r3, #60
 1715 0cae 002B     		cmp	r3, #0
 1716 0cb0 09D1     		bne	.L101
 723:main.c        **** 						{
 724:main.c        **** 							while(USBUART_CDCIsReady() == 0){};
 1717              		.loc 1 724 0
 1718 0cb2 00BF     		nop
 1719              	.L102:
 1720              		.loc 1 724 0 is_stmt 0 discriminator 1
 1721 0cb4 FFF7FEFF 		bl	USBUART_CDCIsReady
 1722 0cb8 0346     		mov	r3, r0
 1723 0cba 002B     		cmp	r3, #0
 1724 0cbc FAD0     		beq	.L102
 725:main.c        **** 							USBUART_PutData(USB_Out_Buffer, USBUART_BUFFER_SIZE);
 1725              		.loc 1 725 0 is_stmt 1
 1726 0cbe 4021     		movs	r1, #64
 1727 0cc0 4D48     		ldr	r0, .L127+48
 1728 0cc2 FFF7FEFF 		bl	USBUART_PutData
 1729              	.L101:
 693:main.c        **** 					{
 1730              		.loc 1 693 0 discriminator 2
 1731 0cc6 BB8B     		ldrh	r3, [r7, #28]
 1732 0cc8 0133     		adds	r3, r3, #1
 1733 0cca BB83     		strh	r3, [r7, #28]	@ movhi
 1734              	.L93:
 693:main.c        **** 					{
 1735              		.loc 1 693 0 is_stmt 0 discriminator 1
 1736 0ccc BB8B     		ldrh	r3, [r7, #28]
 1737 0cce B3F5806F 		cmp	r3, #1024
 1738 0cd2 FFF425AF 		bcc	.L103
 1739 0cd6 31E0     		b	.L4
 1740              	.L92:
 726:main.c        **** 						}
 727:main.c        **** 					}
 728:main.c        **** 				}
 729:main.c        **** 				else if(*psz == 'P')
 1741              		.loc 1 729 0 is_stmt 1
 1742 0cd8 FB68     		ldr	r3, [r7, #12]
 1743 0cda 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1744 0cdc 502B     		cmp	r3, #80
 1745 0cde 24D1     		bne	.L104
 730:main.c        **** 				{
 731:main.c        **** 					// Scope Preamp settings
 732:main.c        **** 					// a = channel 1 preamp 10x
 733:main.c        **** 					// A = channel 1 preamp 1x
 734:main.c        **** 					// b = channel 2 preamp 10x
 735:main.c        **** 					// B = channel 2 preamp 1x
 736:main.c        **** 					psz = strtok(0, " ");
 1746              		.loc 1 736 0
 1747 0ce0 4749     		ldr	r1, .L127+56
 1748 0ce2 0020     		movs	r0, #0
 1749 0ce4 FFF7FEFF 		bl	strtok
 1750 0ce8 F860     		str	r0, [r7, #12]
 737:main.c        **** 					
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 45


 738:main.c        **** 					if(*psz == 'a')
 1751              		.loc 1 738 0
 1752 0cea FB68     		ldr	r3, [r7, #12]
 1753 0cec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1754 0cee 612B     		cmp	r3, #97
 1755 0cf0 03D1     		bne	.L105
 739:main.c        **** 					{
 740:main.c        **** 						preamp_a = 10;
 1756              		.loc 1 740 0
 1757 0cf2 3D4B     		ldr	r3, .L127+32
 1758 0cf4 0A22     		movs	r2, #10
 1759 0cf6 1A70     		strb	r2, [r3]
 1760 0cf8 20E0     		b	.L4
 1761              	.L105:
 741:main.c        **** 					}
 742:main.c        **** 					else if(*psz == 'A')
 1762              		.loc 1 742 0
 1763 0cfa FB68     		ldr	r3, [r7, #12]
 1764 0cfc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1765 0cfe 412B     		cmp	r3, #65
 1766 0d00 03D1     		bne	.L107
 743:main.c        **** 					{
 744:main.c        **** 						preamp_a = 1;
 1767              		.loc 1 744 0
 1768 0d02 394B     		ldr	r3, .L127+32
 1769 0d04 0122     		movs	r2, #1
 1770 0d06 1A70     		strb	r2, [r3]
 1771 0d08 18E0     		b	.L4
 1772              	.L107:
 745:main.c        **** 					}
 746:main.c        **** 					else if(*psz == 'b')
 1773              		.loc 1 746 0
 1774 0d0a FB68     		ldr	r3, [r7, #12]
 1775 0d0c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1776 0d0e 622B     		cmp	r3, #98
 1777 0d10 03D1     		bne	.L108
 747:main.c        **** 					{
 748:main.c        **** 						preamp_b = 10;
 1778              		.loc 1 748 0
 1779 0d12 374B     		ldr	r3, .L127+40
 1780 0d14 0A22     		movs	r2, #10
 1781 0d16 1A70     		strb	r2, [r3]
 1782 0d18 10E0     		b	.L4
 1783              	.L108:
 749:main.c        **** 					}
 750:main.c        **** 					else if(*psz == 'B')
 1784              		.loc 1 750 0
 1785 0d1a FB68     		ldr	r3, [r7, #12]
 1786 0d1c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1787 0d1e 422B     		cmp	r3, #66
 1788 0d20 0CD1     		bne	.L4
 751:main.c        **** 					{
 752:main.c        **** 						preamp_b = 1;
 1789              		.loc 1 752 0
 1790 0d22 334B     		ldr	r3, .L127+40
 1791 0d24 0122     		movs	r2, #1
 1792 0d26 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 46


 1793 0d28 08E0     		b	.L4
 1794              	.L104:
 753:main.c        **** 					}
 754:main.c        **** 					
 755:main.c        **** 				}
 756:main.c        **** 				else
 757:main.c        **** 				{
 758:main.c        **** 					PutString("Error: Unrecognized Scope Command\n\r");
 1795              		.loc 1 758 0
 1796 0d2a 3648     		ldr	r0, .L127+60
 1797 0d2c FFF7FEFF 		bl	PutString
 1798 0d30 04E0     		b	.L4
 1799              	.L48:
 759:main.c        **** 				}
 760:main.c        **** 			// END OF SCOPE 'S' COMMANDS
 761:main.c        **** 			}
 762:main.c        **** 			else
 763:main.c        **** 			{
 764:main.c        **** 				// command not recognized, toss it
 765:main.c        **** 				PutString("Error: Unknown Command\n\r");
 1800              		.loc 1 765 0
 1801 0d32 3548     		ldr	r0, .L127+64
 1802 0d34 FFF7FEFF 		bl	PutString
 1803 0d38 00E0     		b	.L4
 1804              	.L118:
 239:main.c        **** 					}
 1805              		.loc 1 239 0
 1806 0d3a 00BF     		nop
 1807              	.L4:
 766:main.c        **** 			}
 767:main.c        **** 			bCommandReady = 0;
 1808              		.loc 1 767 0
 1809 0d3c 334B     		ldr	r3, .L127+68
 1810 0d3e 0022     		movs	r2, #0
 1811 0d40 1A70     		strb	r2, [r3]
 1812              	.L2:
 768:main.c        **** 		}
 769:main.c        **** 		
 770:main.c        **** 		status = Trigger_Status_Read();
 1813              		.loc 1 770 0
 1814 0d42 FFF7FEFF 		bl	Trigger_Status_Read
 1815 0d46 0346     		mov	r3, r0
 1816 0d48 FB71     		strb	r3, [r7, #7]
 771:main.c        **** 						
 772:main.c        **** 		// if we have completed a capture, get the index of the last sample
 773:main.c        **** 		if((status & CAPTURE_COMPLETE ) != 0)
 1817              		.loc 1 773 0
 1818 0d4a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1819 0d4c 03F00403 		and	r3, r3, #4
 1820 0d50 002B     		cmp	r3, #0
 1821 0d52 18D0     		beq	.L109
 774:main.c        **** 		{
 775:main.c        **** 			ending_offset = GetLastSampleIndex(DMA_Channel_1_Chan);
 1822              		.loc 1 775 0
 1823 0d54 2E4B     		ldr	r3, .L127+72
 1824 0d56 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1825 0d58 1846     		mov	r0, r3
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 47


 1826 0d5a FFF7FEFF 		bl	GetLastSampleIndex
 1827 0d5e 0346     		mov	r3, r0
 1828 0d60 BB80     		strh	r3, [r7, #4]	@ movhi
 776:main.c        **** 			
 777:main.c        **** 			// return the capture info
 778:main.c        **** 			PutChar('A');
 1829              		.loc 1 778 0
 1830 0d62 4120     		movs	r0, #65
 1831 0d64 FFF7FEFF 		bl	PutChar
 779:main.c        **** 			PutChar((uint8) ((ending_offset >> 8) & 0x0003)); // address of the end, MSbits
 1832              		.loc 1 779 0
 1833 0d68 BB88     		ldrh	r3, [r7, #4]
 1834 0d6a 1B0A     		lsrs	r3, r3, #8
 1835 0d6c 9BB2     		uxth	r3, r3
 1836 0d6e DBB2     		uxtb	r3, r3
 1837 0d70 03F00303 		and	r3, r3, #3
 1838 0d74 DBB2     		uxtb	r3, r3
 1839 0d76 1846     		mov	r0, r3
 1840 0d78 FFF7FEFF 		bl	PutChar
 780:main.c        **** 			PutChar((uint8) (ending_offset & 0x00FF)); // address of the end, LSbits
 1841              		.loc 1 780 0
 1842 0d7c BB88     		ldrh	r3, [r7, #4]	@ movhi
 1843 0d7e DBB2     		uxtb	r3, r3
 1844 0d80 1846     		mov	r0, r3
 1845 0d82 FFF7FEFF 		bl	PutChar
 1846              	.L109:
 781:main.c        **** 			//PutChar('\n'); // terminate the return data, through testing, there is no need to send this ch
 782:main.c        **** 		}
 783:main.c        **** 	
 784:main.c        **** 		// digital input update
 785:main.c        **** 		if((Digital_Input_Status_Last != Digital_Input_Status_Read()) && (Digital_AutoUpdate != 0))
 1847              		.loc 1 785 0
 1848 0d86 FFF7FEFF 		bl	Digital_Input_Status_Read
 1849 0d8a 0346     		mov	r3, r0
 1850 0d8c 1A46     		mov	r2, r3
 1851 0d8e 214B     		ldr	r3, .L127+76
 1852 0d90 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1853 0d92 9A42     		cmp	r2, r3
 1854 0d94 3FF43BA9 		beq	.L111
 1855              		.loc 1 785 0 is_stmt 0 discriminator 1
 1856 0d98 1F4B     		ldr	r3, .L127+80
 1857 0d9a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1858 0d9c 002B     		cmp	r3, #0
 1859 0d9e 3FF436A9 		beq	.L111
 786:main.c        **** 		{
 787:main.c        **** 			PutChar('I');
 1860              		.loc 1 787 0 is_stmt 1
 1861 0da2 4920     		movs	r0, #73
 1862 0da4 FFF7FEFF 		bl	PutChar
 788:main.c        **** 			PutChar((uint8) Digital_Input_Status_Read());
 1863              		.loc 1 788 0
 1864 0da8 FFF7FEFF 		bl	Digital_Input_Status_Read
 1865 0dac 0346     		mov	r3, r0
 1866 0dae 1846     		mov	r0, r3
 1867 0db0 FFF7FEFF 		bl	PutChar
 789:main.c        **** 			Digital_Input_Status_Last = Digital_Input_Status_Read();
 1868              		.loc 1 789 0
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 48


 1869 0db4 FFF7FEFF 		bl	Digital_Input_Status_Read
 1870 0db8 0346     		mov	r3, r0
 1871 0dba 1A46     		mov	r2, r3
 1872 0dbc 154B     		ldr	r3, .L127+76
 1873 0dbe 1A70     		strb	r2, [r3]
 790:main.c        **** 		}
 791:main.c        **** 	}
 1874              		.loc 1 791 0
 1875 0dc0 FFF725B9 		b	.L111
 1876              	.L128:
 1877 0dc4 AFF30080 		.align	3
 1878              	.L127:
 1879 0dc8 D7A3703D 		.word	1030792151
 1880 0dcc 0A574540 		.word	1078286090
 1881 0dd0 00000000 		.word	0
 1882 0dd4 00F07F40 		.word	1082126336
 1883 0dd8 12A5BDC1 		.word	-1044536046
 1884 0ddc 17661340 		.word	1075013143
 1885 0de0 00000000 		.word	0
 1886 0de4 00F88F40 		.word	1083176960
 1887 0de8 00000000 		.word	preamp_a
 1888 0dec 00000000 		.word	Channel_1_Data
 1889 0df0 00000000 		.word	preamp_b
 1890 0df4 00000000 		.word	Channel_2_Data
 1891 0df8 00000000 		.word	USB_Out_Buffer
 1892 0dfc 3F000080 		.word	-2147483585
 1893 0e00 00000000 		.word	.LC0
 1894 0e04 24000000 		.word	.LC3
 1895 0e08 48000000 		.word	.LC4
 1896 0e0c 00000000 		.word	bCommandReady
 1897 0e10 00000000 		.word	DMA_Channel_1_Chan
 1898 0e14 00000000 		.word	Digital_Input_Status_Last
 1899 0e18 00000000 		.word	Digital_AutoUpdate
 1900              		.cfi_endproc
 1901              	.LFE64:
 1902              		.size	main, .-main
 1903              		.section	.text.Hardware_Config,"ax",%progbits
 1904              		.align	2
 1905              		.global	Hardware_Config
 1906              		.thumb
 1907              		.thumb_func
 1908              		.type	Hardware_Config, %function
 1909              	Hardware_Config:
 1910              	.LFB65:
 792:main.c        **** }
 793:main.c        **** 
 794:main.c        **** void Hardware_Config(void)
 795:main.c        **** {
 1911              		.loc 1 795 0
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 0
 1914              		@ frame_needed = 1, uses_anonymous_args = 0
 1915 0000 80B5     		push	{r7, lr}
 1916              		.cfi_def_cfa_offset 8
 1917              		.cfi_offset 7, -8
 1918              		.cfi_offset 14, -4
 1919 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 49


 1920              		.cfi_def_cfa_register 7
 796:main.c        ****     CyGlobalIntEnable;
 1921              		.loc 1 796 0
 1922              		.syntax unified
 1923              	@ 796 "main.c" 1
 1924 0004 62B6     		CPSIE   i
 1925              	@ 0 "" 2
 797:main.c        **** 	
 798:main.c        **** 	cCommandsReady = 0;
 1926              		.loc 1 798 0
 1927              		.thumb
 1928              		.syntax unified
 1929 0006 394B     		ldr	r3, .L131
 1930 0008 0022     		movs	r2, #0
 1931 000a 1A80     		strh	r2, [r3]	@ movhi
 799:main.c        **** 	bCommandReady = 0;
 1932              		.loc 1 799 0
 1933 000c 384B     		ldr	r3, .L131+4
 1934 000e 0022     		movs	r2, #0
 1935 0010 1A70     		strb	r2, [r3]
 800:main.c        ****     
 801:main.c        ****     USBUART_Start(0, USBUART_5V_OPERATION);
 1936              		.loc 1 801 0
 1937 0012 0121     		movs	r1, #1
 1938 0014 0020     		movs	r0, #0
 1939 0016 FFF7FEFF 		bl	USBUART_Start
 802:main.c        **** 	while(!USBUART_GetConfiguration())
 1940              		.loc 1 802 0
 1941 001a 00BF     		nop
 1942              	.L130:
 1943              		.loc 1 802 0 is_stmt 0 discriminator 1
 1944 001c FFF7FEFF 		bl	USBUART_GetConfiguration
 1945 0020 0346     		mov	r3, r0
 1946 0022 002B     		cmp	r3, #0
 1947 0024 FAD0     		beq	.L130
 803:main.c        ****     {
 804:main.c        ****         /* Wait for USBUART to complete configuration */
 805:main.c        ****     }
 806:main.c        ****     USBUART_CDC_Init();
 1948              		.loc 1 806 0 is_stmt 1
 1949 0026 FFF7FEFF 		bl	USBUART_CDC_Init
 807:main.c        **** 	
 808:main.c        **** 	Amux_Trigger_Select(SCOPE_CHANNEL_1);
 1950              		.loc 1 808 0
 1951 002a 0020     		movs	r0, #0
 1952 002c FFF7FEFF 		bl	Amux_Trigger_FastSelect
 809:main.c        ****     
 810:main.c        ****     ADC_1_Start();
 1953              		.loc 1 810 0
 1954 0030 FFF7FEFF 		bl	ADC_1_Start
 811:main.c        ****     ADC_2_Start();
 1955              		.loc 1 811 0
 1956 0034 FFF7FEFF 		bl	ADC_2_Start
 812:main.c        ****     
 813:main.c        ****     Vtrigger_Start();
 1957              		.loc 1 813 0
 1958 0038 FFF7FEFF 		bl	Vtrigger_Start
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 50


 814:main.c        ****     Trigger_Comp_Start();
 1959              		.loc 1 814 0
 1960 003c FFF7FEFF 		bl	Trigger_Comp_Start
 815:main.c        ****     
 816:main.c        ****     // The extras
 817:main.c        ****     Trig_Buf_Start();
 1961              		.loc 1 817 0
 1962 0040 FFF7FEFF 		bl	Trig_Buf_Start
 818:main.c        ****     
 819:main.c        ****     PWM_Sample_Buffer_Start();
 1963              		.loc 1 819 0
 1964 0044 FFF7FEFF 		bl	PWM_Sample_Buffer_Start
 820:main.c        **** 	// update the period to match the trigger buffer size for maximum post trigger capture
 821:main.c        **** 	PWM_Sample_Buffer_WritePeriod(BUFFER_SIZE-1); // maximum post trigger buffer
 1965              		.loc 1 821 0
 1966 0048 40F2FF30 		movw	r0, #1023
 1967 004c FFF7FEFF 		bl	PWM_Sample_Buffer_WritePeriod
 822:main.c        **** 	//PWM_Sample_Buffer_WritePeriod(2); // minimum post trigger buffer, 3 samples after trigger (used 
 823:main.c        **** 	// after setting the period, need to set the count to the proper value as well
 824:main.c        **** 	PWM_Sample_Buffer_WriteCounter(BUFFER_SIZE-1); // maximum post trigger buffer
 1968              		.loc 1 824 0
 1969 0050 40F2FF30 		movw	r0, #1023
 1970 0054 FFF7FEFF 		bl	PWM_Sample_Buffer_WriteCounter
 825:main.c        **** 	//PWM_Sample_Buffer_WriteCounter(2); // minimum post trigger buffer, 3 samples after trigger
 826:main.c        **** 	
 827:main.c        **** 	preamp_a = 1;
 1971              		.loc 1 827 0
 1972 0058 264B     		ldr	r3, .L131+8
 1973 005a 0122     		movs	r2, #1
 1974 005c 1A70     		strb	r2, [r3]
 828:main.c        **** 	preamp_b = 1;
 1975              		.loc 1 828 0
 1976 005e 264B     		ldr	r3, .L131+12
 1977 0060 0122     		movs	r2, #1
 1978 0062 1A70     		strb	r2, [r3]
 829:main.c        **** 	trigger_source = SCOPE_CHANNEL_1;
 1979              		.loc 1 829 0
 1980 0064 254B     		ldr	r3, .L131+16
 1981 0066 0022     		movs	r2, #0
 1982 0068 1A70     		strb	r2, [r3]
 830:main.c        ****     
 831:main.c        **** 	// basic configuration is trigger on the rising edge of channel 0
 832:main.c        **** 	Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1983              		.loc 1 832 0
 1984 006a FFF7FEFF 		bl	Trigger_Control_Read
 1985 006e 0346     		mov	r3, r0
 1986 0070 23F00F03 		bic	r3, r3, #15
 1987 0074 DBB2     		uxtb	r3, r3
 1988 0076 1846     		mov	r0, r3
 1989 0078 FFF7FEFF 		bl	Trigger_Control_Write
 833:main.c        ****     Trigger_Control_Write(Trigger_Control_Read() | RISING_EDGE_TRIGGERED);
 1990              		.loc 1 833 0
 1991 007c FFF7FEFF 		bl	Trigger_Control_Read
 1992 0080 0346     		mov	r3, r0
 1993 0082 43F00203 		orr	r3, r3, #2
 1994 0086 DBB2     		uxtb	r3, r3
 1995 0088 1846     		mov	r0, r3
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 51


 1996 008a FFF7FEFF 		bl	Trigger_Control_Write
 834:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | FALLING_EDGE_TRIGGERED);
 835:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | EITHER_EDGE_TRIGGERED);
 836:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | EXTERNAL_TRIGGERED);
 837:main.c        **** 	
 838:main.c        **** 	// waveform generator control
 839:main.c        **** 	Wave_Control_Write(Wave_Control_Read() & ~WAVE_SELECT_MASK);
 1997              		.loc 1 839 0
 1998 008e FFF7FEFF 		bl	Wave_Control_Read
 1999 0092 0346     		mov	r3, r0
 2000 0094 23F00103 		bic	r3, r3, #1
 2001 0098 DBB2     		uxtb	r3, r3
 2002 009a 1846     		mov	r0, r3
 2003 009c FFF7FEFF 		bl	Wave_Control_Write
 840:main.c        **** 	Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_WAVE);
 2004              		.loc 1 840 0
 2005 00a0 FFF7FEFF 		bl	Wave_Control_Read
 2006 00a4 0346     		mov	r3, r0
 2007 00a6 1846     		mov	r0, r3
 2008 00a8 FFF7FEFF 		bl	Wave_Control_Write
 841:main.c        **** 	// Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_NOISE);
 842:main.c        **** 	Wave_DAC_Start();
 2009              		.loc 1 842 0
 2010 00ac FFF7FEFF 		bl	Wave_DAC_Start
 843:main.c        **** 	Wave_Buf_Start();
 2011              		.loc 1 843 0
 2012 00b0 FFF7FEFF 		bl	Wave_Buf_Start
 844:main.c        **** 	Wave_DAC_Wave1Setup(&Waveform_Buffer[0], WAVEFORM_BUFFER_SIZE);
 2013              		.loc 1 844 0
 2014 00b4 4FF48071 		mov	r1, #256
 2015 00b8 1148     		ldr	r0, .L131+20
 2016 00ba FFF7FEFF 		bl	Wave_DAC_Wave1Setup
 845:main.c        **** 	wave_gain = 0;
 2017              		.loc 1 845 0
 2018 00be 114B     		ldr	r3, .L131+24
 2019 00c0 0022     		movs	r2, #0
 2020 00c2 1A70     		strb	r2, [r3]
 846:main.c        **** 	
 847:main.c        **** 	PRS_Start();
 2021              		.loc 1 847 0
 2022 00c4 FFF7FEFF 		bl	PRS_Start
 848:main.c        **** 	Wave_DAC_Wave2Setup((uint8 *) PRS_SEED_PTR, 1);
 2023              		.loc 1 848 0
 2024 00c8 0121     		movs	r1, #1
 2025 00ca 0F48     		ldr	r0, .L131+28
 2026 00cc FFF7FEFF 		bl	Wave_DAC_Wave2Setup
 849:main.c        **** 	
 850:main.c        **** 	// digital IO initializations
 851:main.c        **** 	Digital_Input_Status_Last = 0;
 2027              		.loc 1 851 0
 2028 00d0 0E4B     		ldr	r3, .L131+32
 2029 00d2 0022     		movs	r2, #0
 2030 00d4 1A70     		strb	r2, [r3]
 852:main.c        **** 	Digital_Out_Control_Write(0);
 2031              		.loc 1 852 0
 2032 00d6 0020     		movs	r0, #0
 2033 00d8 FFF7FEFF 		bl	Digital_Out_Control_Write
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 52


 853:main.c        **** 	Digital_AutoUpdate = 0;
 2034              		.loc 1 853 0
 2035 00dc 0C4B     		ldr	r3, .L131+36
 2036 00de 0022     		movs	r2, #0
 2037 00e0 1A70     		strb	r2, [r3]
 854:main.c        **** 	
 855:main.c        **** 	Digital_PWM_Start();
 2038              		.loc 1 855 0
 2039 00e2 FFF7FEFF 		bl	Digital_PWM_Start
 856:main.c        **** }
 2040              		.loc 1 856 0
 2041 00e6 00BF     		nop
 2042 00e8 80BD     		pop	{r7, pc}
 2043              	.L132:
 2044 00ea 00BF     		.align	2
 2045              	.L131:
 2046 00ec 00000000 		.word	cCommandsReady
 2047 00f0 00000000 		.word	bCommandReady
 2048 00f4 00000000 		.word	preamp_a
 2049 00f8 00000000 		.word	preamp_b
 2050 00fc 00000000 		.word	trigger_source
 2051 0100 00000000 		.word	Waveform_Buffer
 2052 0104 00000000 		.word	wave_gain
 2053 0108 04650040 		.word	1073767684
 2054 010c 00000000 		.word	Digital_Input_Status_Last
 2055 0110 00000000 		.word	Digital_AutoUpdate
 2056              		.cfi_endproc
 2057              	.LFE65:
 2058              		.size	Hardware_Config, .-Hardware_Config
 2059              		.section	.text.DMA_Config,"ax",%progbits
 2060              		.align	2
 2061              		.global	DMA_Config
 2062              		.thumb
 2063              		.thumb_func
 2064              		.type	DMA_Config, %function
 2065              	DMA_Config:
 2066              	.LFB66:
 857:main.c        **** 
 858:main.c        **** void DMA_Config(void)
 859:main.c        **** {
 2067              		.loc 1 859 0
 2068              		.cfi_startproc
 2069              		@ args = 0, pretend = 0, frame = 0
 2070              		@ frame_needed = 1, uses_anonymous_args = 0
 2071 0000 80B5     		push	{r7, lr}
 2072              		.cfi_def_cfa_offset 8
 2073              		.cfi_offset 7, -8
 2074              		.cfi_offset 14, -4
 2075 0002 00AF     		add	r7, sp, #0
 2076              		.cfi_def_cfa_register 7
 860:main.c        ****     DMA_Channel_1_Chan = DMA_Channel_1_DmaInitialize(DMA_Channel_1_BYTES_PER_BURST, DMA_Channel_1_R
 2077              		.loc 1 860 0
 2078 0004 41F6FF73 		movw	r3, #8191
 2079 0008 4FF48042 		mov	r2, #16384
 2080 000c 0121     		movs	r1, #1
 2081 000e 0220     		movs	r0, #2
 2082 0010 FFF7FEFF 		bl	DMA_Channel_1_DmaInitialize
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 53


 2083 0014 0346     		mov	r3, r0
 2084 0016 1A46     		mov	r2, r3
 2085 0018 3F4B     		ldr	r3, .L135
 2086 001a 1A70     		strb	r2, [r3]
 861:main.c        ****         HI16(DMA_Channel_1_SRC_BASE), HI16(DMA_Channel_1_DST_BASE));
 862:main.c        ****     DMA_Channel_1_TD[0] = CyDmaTdAllocate();
 2087              		.loc 1 862 0
 2088 001c FFF7FEFF 		bl	CyDmaTdAllocate
 2089 0020 0346     		mov	r3, r0
 2090 0022 1A46     		mov	r2, r3
 2091 0024 3D4B     		ldr	r3, .L135+4
 2092 0026 1A70     		strb	r2, [r3]
 863:main.c        ****     CyDmaTdSetConfiguration(DMA_Channel_1_TD[0], BUFFER_SIZE*sizeof(int16), DMA_Channel_1_TD[0], DM
 2093              		.loc 1 863 0
 2094 0028 3C4B     		ldr	r3, .L135+4
 2095 002a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2096 002c 3B4B     		ldr	r3, .L135+4
 2097 002e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2098 0030 0623     		movs	r3, #6
 2099 0032 4FF40061 		mov	r1, #2048
 2100 0036 FFF7FEFF 		bl	CyDmaTdSetConfiguration
 864:main.c        ****     CyDmaTdSetAddress(DMA_Channel_1_TD[0], LO16((uint32)ADC_1_SAR_WRK0_PTR), LO16((uint32)&Channel_
 2101              		.loc 1 864 0
 2102 003a 384B     		ldr	r3, .L135+4
 2103 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2104 003e 384A     		ldr	r2, .L135+8
 2105 0040 92B2     		uxth	r2, r2
 2106 0042 45F6A031 		movw	r1, #23456
 2107 0046 1846     		mov	r0, r3
 2108 0048 FFF7FEFF 		bl	CyDmaTdSetAddress
 865:main.c        ****     CyDmaChSetInitialTd(DMA_Channel_1_Chan, DMA_Channel_1_TD[0]);
 2109              		.loc 1 865 0
 2110 004c 324B     		ldr	r3, .L135
 2111 004e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2112 0050 324B     		ldr	r3, .L135+4
 2113 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2114 0054 1946     		mov	r1, r3
 2115 0056 1046     		mov	r0, r2
 2116 0058 FFF7FEFF 		bl	CyDmaChSetInitialTd
 866:main.c        ****     CyDmaChRoundRobin(DMA_Channel_1_Chan, 1);
 2117              		.loc 1 866 0
 2118 005c 2E4B     		ldr	r3, .L135
 2119 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2120 0060 0121     		movs	r1, #1
 2121 0062 1846     		mov	r0, r3
 2122 0064 FFF7FEFF 		bl	CyDmaChRoundRobin
 867:main.c        ****     CyDmaChSetRequest(DMA_Channel_1_Chan, CPU_TERM_CHAIN);
 2123              		.loc 1 867 0
 2124 0068 2B4B     		ldr	r3, .L135
 2125 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2126 006c 0421     		movs	r1, #4
 2127 006e 1846     		mov	r0, r3
 2128 0070 FFF7FEFF 		bl	CyDmaChSetRequest
 868:main.c        ****     CyDmaChEnable(DMA_Channel_1_Chan, 1);
 2129              		.loc 1 868 0
 2130 0074 284B     		ldr	r3, .L135
 2131 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 54


 2132 0078 0121     		movs	r1, #1
 2133 007a 1846     		mov	r0, r3
 2134 007c FFF7FEFF 		bl	CyDmaChEnable
 869:main.c        ****     CyDmaChEnable(DMA_Channel_1_Chan, 1);
 2135              		.loc 1 869 0
 2136 0080 254B     		ldr	r3, .L135
 2137 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2138 0084 0121     		movs	r1, #1
 2139 0086 1846     		mov	r0, r3
 2140 0088 FFF7FEFF 		bl	CyDmaChEnable
 870:main.c        **** 
 871:main.c        ****     DMA_Channel_2_Chan = DMA_Channel_2_DmaInitialize(DMA_Channel_2_BYTES_PER_BURST, DMA_Channel_2_R
 2141              		.loc 1 871 0
 2142 008c 41F6FF73 		movw	r3, #8191
 2143 0090 4FF48042 		mov	r2, #16384
 2144 0094 0121     		movs	r1, #1
 2145 0096 0220     		movs	r0, #2
 2146 0098 FFF7FEFF 		bl	DMA_Channel_2_DmaInitialize
 2147 009c 0346     		mov	r3, r0
 2148 009e 1A46     		mov	r2, r3
 2149 00a0 204B     		ldr	r3, .L135+12
 2150 00a2 1A70     		strb	r2, [r3]
 872:main.c        ****         HI16(DMA_Channel_2_SRC_BASE), HI16(DMA_Channel_2_DST_BASE));
 873:main.c        ****     DMA_Channel_2_TD[0] = CyDmaTdAllocate();
 2151              		.loc 1 873 0
 2152 00a4 FFF7FEFF 		bl	CyDmaTdAllocate
 2153 00a8 0346     		mov	r3, r0
 2154 00aa 1A46     		mov	r2, r3
 2155 00ac 1E4B     		ldr	r3, .L135+16
 2156 00ae 1A70     		strb	r2, [r3]
 874:main.c        ****     CyDmaTdSetConfiguration(DMA_Channel_2_TD[0], BUFFER_SIZE*sizeof(int16), DMA_Channel_2_TD[0], DM
 2157              		.loc 1 874 0
 2158 00b0 1D4B     		ldr	r3, .L135+16
 2159 00b2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2160 00b4 1C4B     		ldr	r3, .L135+16
 2161 00b6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2162 00b8 0223     		movs	r3, #2
 2163 00ba 4FF40061 		mov	r1, #2048
 2164 00be FFF7FEFF 		bl	CyDmaTdSetConfiguration
 875:main.c        ****     CyDmaTdSetAddress(DMA_Channel_2_TD[0], LO16((uint32)ADC_2_SAR_WRK0_PTR), LO16((uint32)&Channel_
 2165              		.loc 1 875 0
 2166 00c2 194B     		ldr	r3, .L135+16
 2167 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2168 00c6 194A     		ldr	r2, .L135+20
 2169 00c8 92B2     		uxth	r2, r2
 2170 00ca 45F6A231 		movw	r1, #23458
 2171 00ce 1846     		mov	r0, r3
 2172 00d0 FFF7FEFF 		bl	CyDmaTdSetAddress
 876:main.c        ****     CyDmaChSetInitialTd(DMA_Channel_2_Chan, DMA_Channel_2_TD[0]);
 2173              		.loc 1 876 0
 2174 00d4 134B     		ldr	r3, .L135+12
 2175 00d6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2176 00d8 134B     		ldr	r3, .L135+16
 2177 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2178 00dc 1946     		mov	r1, r3
 2179 00de 1046     		mov	r0, r2
 2180 00e0 FFF7FEFF 		bl	CyDmaChSetInitialTd
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 55


 877:main.c        ****     CyDmaChRoundRobin(DMA_Channel_2_Chan, 1);
 2181              		.loc 1 877 0
 2182 00e4 0F4B     		ldr	r3, .L135+12
 2183 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2184 00e8 0121     		movs	r1, #1
 2185 00ea 1846     		mov	r0, r3
 2186 00ec FFF7FEFF 		bl	CyDmaChRoundRobin
 878:main.c        ****     CyDmaChSetRequest(DMA_Channel_2_Chan, CPU_TERM_CHAIN);
 2187              		.loc 1 878 0
 2188 00f0 0C4B     		ldr	r3, .L135+12
 2189 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2190 00f4 0421     		movs	r1, #4
 2191 00f6 1846     		mov	r0, r3
 2192 00f8 FFF7FEFF 		bl	CyDmaChSetRequest
 879:main.c        ****     CyDmaChEnable(DMA_Channel_2_Chan, 1);
 2193              		.loc 1 879 0
 2194 00fc 094B     		ldr	r3, .L135+12
 2195 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2196 0100 0121     		movs	r1, #1
 2197 0102 1846     		mov	r0, r3
 2198 0104 FFF7FEFF 		bl	CyDmaChEnable
 880:main.c        ****     CyDmaChEnable(DMA_Channel_2_Chan, 1);
 2199              		.loc 1 880 0
 2200 0108 064B     		ldr	r3, .L135+12
 2201 010a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2202 010c 0121     		movs	r1, #1
 2203 010e 1846     		mov	r0, r3
 2204 0110 FFF7FEFF 		bl	CyDmaChEnable
 881:main.c        **** 
 882:main.c        ****     return;
 2205              		.loc 1 882 0
 2206 0114 00BF     		nop
 883:main.c        **** }
 2207              		.loc 1 883 0
 2208 0116 80BD     		pop	{r7, pc}
 2209              	.L136:
 2210              		.align	2
 2211              	.L135:
 2212 0118 00000000 		.word	DMA_Channel_1_Chan
 2213 011c 00000000 		.word	DMA_Channel_1_TD
 2214 0120 00000000 		.word	Channel_1_Data
 2215 0124 00000000 		.word	DMA_Channel_2_Chan
 2216 0128 00000000 		.word	DMA_Channel_2_TD
 2217 012c 00000000 		.word	Channel_2_Data
 2218              		.cfi_endproc
 2219              	.LFE66:
 2220              		.size	DMA_Config, .-DMA_Config
 2221              		.section	.text.GetLastSampleIndex,"ax",%progbits
 2222              		.align	2
 2223              		.global	GetLastSampleIndex
 2224              		.thumb
 2225              		.thumb_func
 2226              		.type	GetLastSampleIndex, %function
 2227              	GetLastSampleIndex:
 2228              	.LFB67:
 884:main.c        **** 
 885:main.c        **** // returns the address of the first sample in the circular DMA buffer
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 56


 886:main.c        **** 
 887:main.c        **** uint16 GetLastSampleIndex(uint8 chHandle)
 888:main.c        **** {
 2229              		.loc 1 888 0
 2230              		.cfi_startproc
 2231              		@ args = 0, pretend = 0, frame = 16
 2232              		@ frame_needed = 1, uses_anonymous_args = 0
 2233              		@ link register save eliminated.
 2234 0000 80B4     		push	{r7}
 2235              		.cfi_def_cfa_offset 4
 2236              		.cfi_offset 7, -4
 2237 0002 85B0     		sub	sp, sp, #20
 2238              		.cfi_def_cfa_offset 24
 2239 0004 00AF     		add	r7, sp, #0
 2240              		.cfi_def_cfa_register 7
 2241 0006 0346     		mov	r3, r0
 2242 0008 FB71     		strb	r3, [r7, #7]
 889:main.c        **** 	uint16 index;
 890:main.c        **** 
 891:main.c        **** 	// get the upper 16 bits of the destination (not strictly necessary) (actually it doesn't work sin
 892:main.c        **** 	// upper 16 bit addresses for the same RAM information
 893:main.c        **** 	//dest_address = (((uint32) CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG1[3]) << 24) | (((uint32) CY_DMA
 894:main.c        **** 	
 895:main.c        **** 	// grab the lower 16 bits of the destination address
 896:main.c        **** 	// the assumption here is that "work seperate" has been enabled, so a copy of the TD is stored in 
 897:main.c        **** 	index = ((uint32) CY_DMA_TDMEM_STRUCT_PTR[chHandle].TD1[3] << 8) | ((uint32) CY_DMA_TDMEM_STRUCT_P
 2243              		.loc 1 897 0
 2244 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2245 000c DB00     		lsls	r3, r3, #3
 2246 000e 03F18043 		add	r3, r3, #1073741824
 2247 0012 03F5F043 		add	r3, r3, #30720
 2248 0016 DB79     		ldrb	r3, [r3, #7]
 2249 0018 DBB2     		uxtb	r3, r3
 2250 001a 9BB2     		uxth	r3, r3
 2251 001c 1B02     		lsls	r3, r3, #8
 2252 001e 9AB2     		uxth	r2, r3
 2253 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2254 0022 DB00     		lsls	r3, r3, #3
 2255 0024 03F18043 		add	r3, r3, #1073741824
 2256 0028 03F5F043 		add	r3, r3, #30720
 2257 002c 9B79     		ldrb	r3, [r3, #6]
 2258 002e DBB2     		uxtb	r3, r3
 2259 0030 9BB2     		uxth	r3, r3
 2260 0032 1343     		orrs	r3, r3, r2
 2261 0034 FB81     		strh	r3, [r7, #14]	@ movhi
 898:main.c        **** 	
 899:main.c        **** 	// calculate the index by taking the difference between the starting and ending destination addres
 900:main.c        **** 	index = (index - sizeof(int16) - LO16((uint32) &Channel_1_Data[0]))/sizeof(int16) % BUFFER_SIZE;
 2262              		.loc 1 900 0
 2263 0036 FA89     		ldrh	r2, [r7, #14]
 2264 0038 084B     		ldr	r3, .L139
 2265 003a 99B2     		uxth	r1, r3
 2266 003c 6FF00103 		mvn	r3, #1
 2267 0040 5B1A     		subs	r3, r3, r1
 2268 0042 1344     		add	r3, r3, r2
 2269 0044 5B08     		lsrs	r3, r3, #1
 2270 0046 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 57


 2271 0048 C3F30903 		ubfx	r3, r3, #0, #10
 2272 004c FB81     		strh	r3, [r7, #14]	@ movhi
 901:main.c        **** 	
 902:main.c        **** 	return index;
 2273              		.loc 1 902 0
 2274 004e FB89     		ldrh	r3, [r7, #14]
 903:main.c        **** }
 2275              		.loc 1 903 0
 2276 0050 1846     		mov	r0, r3
 2277 0052 1437     		adds	r7, r7, #20
 2278              		.cfi_def_cfa_offset 4
 2279 0054 BD46     		mov	sp, r7
 2280              		.cfi_def_cfa_register 13
 2281              		@ sp needed
 2282 0056 80BC     		pop	{r7}
 2283              		.cfi_restore 7
 2284              		.cfi_def_cfa_offset 0
 2285 0058 7047     		bx	lr
 2286              	.L140:
 2287 005a 00BF     		.align	2
 2288              	.L139:
 2289 005c 00000000 		.word	Channel_1_Data
 2290              		.cfi_endproc
 2291              	.LFE67:
 2292              		.size	GetLastSampleIndex, .-GetLastSampleIndex
 2293              		.section	.text.CommandCheck,"ax",%progbits
 2294              		.align	2
 2295              		.global	CommandCheck
 2296              		.thumb
 2297              		.thumb_func
 2298              		.type	CommandCheck, %function
 2299              	CommandCheck:
 2300              	.LFB68:
 904:main.c        **** 
 905:main.c        **** void CommandCheck(void)
 906:main.c        **** {
 2301              		.loc 1 906 0
 2302              		.cfi_startproc
 2303              		@ args = 0, pretend = 0, frame = 8
 2304              		@ frame_needed = 1, uses_anonymous_args = 0
 2305 0000 80B5     		push	{r7, lr}
 2306              		.cfi_def_cfa_offset 8
 2307              		.cfi_offset 7, -8
 2308              		.cfi_offset 14, -4
 2309 0002 82B0     		sub	sp, sp, #8
 2310              		.cfi_def_cfa_offset 16
 2311 0004 00AF     		add	r7, sp, #0
 2312              		.cfi_def_cfa_register 7
 907:main.c        **** 	uint16 i, ReceivedBytes;
 908:main.c        **** 	// check to see if line state has changed? thought this might be necessary, but it probably isn't
 909:main.c        **** 	USBUART_IsLineChanged();
 2313              		.loc 1 909 0
 2314 0006 FFF7FEFF 		bl	USBUART_IsLineChanged
 910:main.c        **** 	
 911:main.c        **** 	// if data is waiting
 912:main.c        **** 	if(USBUART_DataIsReady() != 0)
 2315              		.loc 1 912 0
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 58


 2316 000a FFF7FEFF 		bl	USBUART_DataIsReady
 2317 000e 0346     		mov	r3, r0
 2318 0010 002B     		cmp	r3, #0
 2319 0012 5AD0     		beq	.L142
 913:main.c        **** 	{
 914:main.c        **** 		// lets find out how much the PC sent to us
 915:main.c        **** 		ReceivedBytes = USBUART_GetCount();
 2320              		.loc 1 915 0
 2321 0014 FFF7FEFF 		bl	USBUART_GetCount
 2322 0018 0346     		mov	r3, r0
 2323 001a BB80     		strh	r3, [r7, #4]	@ movhi
 916:main.c        **** 		
 917:main.c        **** 		// if the amount of data received is non-zero
 918:main.c        **** 		if(ReceivedBytes != 0)
 2324              		.loc 1 918 0
 2325 001c BB88     		ldrh	r3, [r7, #4]
 2326 001e 002B     		cmp	r3, #0
 2327 0020 07D0     		beq	.L143
 919:main.c        **** 		{
 920:main.c        **** 			cCharsReceived = USBUART_GetAll((uint8 *) &szTempBuffer[0]);
 2328              		.loc 1 920 0
 2329 0022 4F48     		ldr	r0, .L154
 2330 0024 FFF7FEFF 		bl	USBUART_GetAll
 2331 0028 0346     		mov	r3, r0
 2332 002a DAB2     		uxtb	r2, r3
 2333 002c 4D4B     		ldr	r3, .L154+4
 2334 002e 1A70     		strb	r2, [r3]
 2335 0030 02E0     		b	.L144
 2336              	.L143:
 921:main.c        **** 		}
 922:main.c        **** 		else
 923:main.c        **** 		{
 924:main.c        **** 			// its a zero length data packet, it *should* be safe to do this and not worry about corrupting 
 925:main.c        **** 			USBUART_GetAll((uint8 *) &szTempBuffer[0]);
 2337              		.loc 1 925 0
 2338 0032 4B48     		ldr	r0, .L154
 2339 0034 FFF7FEFF 		bl	USBUART_GetAll
 2340              	.L144:
 926:main.c        **** 			//PutString("Zero Length Packet\n");
 927:main.c        **** 		}
 928:main.c        **** 		
 929:main.c        **** 		// move the data from the temporary buffer into the circular command buffer
 930:main.c        **** 		i = 0;
 2341              		.loc 1 930 0
 2342 0038 0023     		movs	r3, #0
 2343 003a FB80     		strh	r3, [r7, #6]	@ movhi
 2344              	.L146:
 931:main.c        **** 		do
 932:main.c        **** 		{
 933:main.c        **** 			szCommandsBuffer[iWrite] = szTempBuffer[i];
 2345              		.loc 1 933 0 discriminator 2
 2346 003c 4A4B     		ldr	r3, .L154+8
 2347 003e 1B88     		ldrh	r3, [r3]
 2348 0040 1946     		mov	r1, r3
 2349 0042 FB88     		ldrh	r3, [r7, #6]
 2350 0044 464A     		ldr	r2, .L154
 2351 0046 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 59


 2352 0048 484B     		ldr	r3, .L154+12
 2353 004a 5A54     		strb	r2, [r3, r1]
 934:main.c        **** 			i++;
 2354              		.loc 1 934 0 discriminator 2
 2355 004c FB88     		ldrh	r3, [r7, #6]
 2356 004e 0133     		adds	r3, r3, #1
 2357 0050 FB80     		strh	r3, [r7, #6]	@ movhi
 935:main.c        **** 			iWrite++;
 2358              		.loc 1 935 0 discriminator 2
 2359 0052 454B     		ldr	r3, .L154+8
 2360 0054 1B88     		ldrh	r3, [r3]
 2361 0056 0133     		adds	r3, r3, #1
 2362 0058 9AB2     		uxth	r2, r3
 2363 005a 434B     		ldr	r3, .L154+8
 2364 005c 1A80     		strh	r2, [r3]	@ movhi
 936:main.c        **** 			iWrite = iWrite % CIRCULAR_BUFFER_SIZE;
 2365              		.loc 1 936 0 discriminator 2
 2366 005e 424B     		ldr	r3, .L154+8
 2367 0060 1B88     		ldrh	r3, [r3]
 2368 0062 C3F30B03 		ubfx	r3, r3, #0, #12
 2369 0066 9AB2     		uxth	r2, r3
 2370 0068 3F4B     		ldr	r3, .L154+8
 2371 006a 1A80     		strh	r2, [r3]	@ movhi
 937:main.c        **** 		}while((iWrite != iRead) && (i != cCharsReceived));
 2372              		.loc 1 937 0 discriminator 2
 2373 006c 3E4B     		ldr	r3, .L154+8
 2374 006e 1A88     		ldrh	r2, [r3]
 2375 0070 3F4B     		ldr	r3, .L154+16
 2376 0072 1B88     		ldrh	r3, [r3]
 2377 0074 9A42     		cmp	r2, r3
 2378 0076 05D0     		beq	.L145
 2379              		.loc 1 937 0 is_stmt 0 discriminator 1
 2380 0078 3A4B     		ldr	r3, .L154+4
 2381 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2382 007c 9BB2     		uxth	r3, r3
 2383 007e FA88     		ldrh	r2, [r7, #6]
 2384 0080 9A42     		cmp	r2, r3
 2385 0082 DBD1     		bne	.L146
 2386              	.L145:
 938:main.c        **** 		
 939:main.c        **** 		// scan the command buffer for commands
 940:main.c        **** 		i = iRead;
 2387              		.loc 1 940 0 is_stmt 1
 2388 0084 3A4B     		ldr	r3, .L154+16
 2389 0086 1B88     		ldrh	r3, [r3]	@ movhi
 2390 0088 FB80     		strh	r3, [r7, #6]	@ movhi
 2391              	.L149:
 941:main.c        **** 		do
 942:main.c        **** 		{
 943:main.c        **** 			// if we see a carriage return or a line feed
 944:main.c        **** 			if((szCommandsBuffer[i] == '\n') || (szCommandsBuffer[i] == '\r'))
 2392              		.loc 1 944 0
 2393 008a FB88     		ldrh	r3, [r7, #6]
 2394 008c 374A     		ldr	r2, .L154+12
 2395 008e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2396 0090 0A2B     		cmp	r3, #10
 2397 0092 04D0     		beq	.L147
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 60


 2398              		.loc 1 944 0 is_stmt 0 discriminator 1
 2399 0094 FB88     		ldrh	r3, [r7, #6]
 2400 0096 354A     		ldr	r2, .L154+12
 2401 0098 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2402 009a 0D2B     		cmp	r3, #13
 2403 009c 09D1     		bne	.L148
 2404              	.L147:
 945:main.c        **** 			{
 946:main.c        **** 				cCommandsReady++; // indicate the buffer contains commands to be dealt with
 2405              		.loc 1 946 0 is_stmt 1
 2406 009e 354B     		ldr	r3, .L154+20
 2407 00a0 1B88     		ldrh	r3, [r3]
 2408 00a2 0133     		adds	r3, r3, #1
 2409 00a4 9AB2     		uxth	r2, r3
 2410 00a6 334B     		ldr	r3, .L154+20
 2411 00a8 1A80     		strh	r2, [r3]	@ movhi
 947:main.c        **** 				szCommandsBuffer[i] = 0; // null terminate the string
 2412              		.loc 1 947 0
 2413 00aa FB88     		ldrh	r3, [r7, #6]
 2414 00ac 2F4A     		ldr	r2, .L154+12
 2415 00ae 0021     		movs	r1, #0
 2416 00b0 D154     		strb	r1, [r2, r3]
 2417              	.L148:
 948:main.c        **** 			}
 949:main.c        **** 			i++;
 2418              		.loc 1 949 0
 2419 00b2 FB88     		ldrh	r3, [r7, #6]
 2420 00b4 0133     		adds	r3, r3, #1
 2421 00b6 FB80     		strh	r3, [r7, #6]	@ movhi
 950:main.c        **** 			i = i % CIRCULAR_BUFFER_SIZE;
 2422              		.loc 1 950 0
 2423 00b8 FB88     		ldrh	r3, [r7, #6]	@ movhi
 2424 00ba C3F30B03 		ubfx	r3, r3, #0, #12
 2425 00be FB80     		strh	r3, [r7, #6]	@ movhi
 951:main.c        **** 		}while(i != iWrite);
 2426              		.loc 1 951 0
 2427 00c0 294B     		ldr	r3, .L154+8
 2428 00c2 1B88     		ldrh	r3, [r3]
 2429 00c4 FA88     		ldrh	r2, [r7, #6]
 2430 00c6 9A42     		cmp	r2, r3
 2431 00c8 DFD1     		bne	.L149
 2432              	.L142:
 952:main.c        **** 	}
 953:main.c        **** 	
 954:main.c        **** 	i = 0;
 2433              		.loc 1 954 0
 2434 00ca 0023     		movs	r3, #0
 2435 00cc FB80     		strh	r3, [r7, #6]	@ movhi
 955:main.c        **** 	if(cCommandsReady > 0 && bCommandReady == 0)
 2436              		.loc 1 955 0
 2437 00ce 294B     		ldr	r3, .L154+20
 2438 00d0 1B88     		ldrh	r3, [r3]
 2439 00d2 002B     		cmp	r3, #0
 2440 00d4 40D0     		beq	.L153
 2441              		.loc 1 955 0 is_stmt 0 discriminator 1
 2442 00d6 284B     		ldr	r3, .L154+24
 2443 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 61


 2444 00da 002B     		cmp	r3, #0
 2445 00dc 3CD1     		bne	.L153
 956:main.c        **** 	{
 957:main.c        **** 		while(szCommandsBuffer[iRead] != 0)
 2446              		.loc 1 957 0 is_stmt 1
 2447 00de 17E0     		b	.L151
 2448              	.L152:
 958:main.c        **** 		{
 959:main.c        **** 			szCommand[i] = szCommandsBuffer[iRead];
 2449              		.loc 1 959 0
 2450 00e0 FB88     		ldrh	r3, [r7, #6]
 2451 00e2 234A     		ldr	r2, .L154+16
 2452 00e4 1288     		ldrh	r2, [r2]
 2453 00e6 1146     		mov	r1, r2
 2454 00e8 204A     		ldr	r2, .L154+12
 2455 00ea 515C     		ldrb	r1, [r2, r1]	@ zero_extendqisi2
 2456 00ec 234A     		ldr	r2, .L154+28
 2457 00ee D154     		strb	r1, [r2, r3]
 960:main.c        **** 			i++;
 2458              		.loc 1 960 0
 2459 00f0 FB88     		ldrh	r3, [r7, #6]
 2460 00f2 0133     		adds	r3, r3, #1
 2461 00f4 FB80     		strh	r3, [r7, #6]	@ movhi
 961:main.c        **** 			iRead++;
 2462              		.loc 1 961 0
 2463 00f6 1E4B     		ldr	r3, .L154+16
 2464 00f8 1B88     		ldrh	r3, [r3]
 2465 00fa 0133     		adds	r3, r3, #1
 2466 00fc 9AB2     		uxth	r2, r3
 2467 00fe 1C4B     		ldr	r3, .L154+16
 2468 0100 1A80     		strh	r2, [r3]	@ movhi
 962:main.c        **** 			iRead = iRead % CIRCULAR_BUFFER_SIZE;
 2469              		.loc 1 962 0
 2470 0102 1B4B     		ldr	r3, .L154+16
 2471 0104 1B88     		ldrh	r3, [r3]
 2472 0106 C3F30B03 		ubfx	r3, r3, #0, #12
 2473 010a 9AB2     		uxth	r2, r3
 2474 010c 184B     		ldr	r3, .L154+16
 2475 010e 1A80     		strh	r2, [r3]	@ movhi
 2476              	.L151:
 957:main.c        **** 		{
 2477              		.loc 1 957 0
 2478 0110 174B     		ldr	r3, .L154+16
 2479 0112 1B88     		ldrh	r3, [r3]
 2480 0114 1A46     		mov	r2, r3
 2481 0116 154B     		ldr	r3, .L154+12
 2482 0118 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 2483 011a 002B     		cmp	r3, #0
 2484 011c E0D1     		bne	.L152
 963:main.c        **** 		}
 964:main.c        **** 		
 965:main.c        **** 		szCommand[i] = 0;
 2485              		.loc 1 965 0
 2486 011e FB88     		ldrh	r3, [r7, #6]
 2487 0120 164A     		ldr	r2, .L154+28
 2488 0122 0021     		movs	r1, #0
 2489 0124 D154     		strb	r1, [r2, r3]
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 62


 966:main.c        **** 		iRead++;
 2490              		.loc 1 966 0
 2491 0126 124B     		ldr	r3, .L154+16
 2492 0128 1B88     		ldrh	r3, [r3]
 2493 012a 0133     		adds	r3, r3, #1
 2494 012c 9AB2     		uxth	r2, r3
 2495 012e 104B     		ldr	r3, .L154+16
 2496 0130 1A80     		strh	r2, [r3]	@ movhi
 967:main.c        **** 		iRead = iRead % CIRCULAR_BUFFER_SIZE;
 2497              		.loc 1 967 0
 2498 0132 0F4B     		ldr	r3, .L154+16
 2499 0134 1B88     		ldrh	r3, [r3]
 2500 0136 C3F30B03 		ubfx	r3, r3, #0, #12
 2501 013a 9AB2     		uxth	r2, r3
 2502 013c 0C4B     		ldr	r3, .L154+16
 2503 013e 1A80     		strh	r2, [r3]	@ movhi
 968:main.c        **** 		cCommandsReady--;
 2504              		.loc 1 968 0
 2505 0140 0C4B     		ldr	r3, .L154+20
 2506 0142 1B88     		ldrh	r3, [r3]
 2507 0144 013B     		subs	r3, r3, #1
 2508 0146 9AB2     		uxth	r2, r3
 2509 0148 0A4B     		ldr	r3, .L154+20
 2510 014a 1A80     		strh	r2, [r3]	@ movhi
 969:main.c        **** 		if(i == 0)
 2511              		.loc 1 969 0
 2512 014c FB88     		ldrh	r3, [r7, #6]
 2513 014e 002B     		cmp	r3, #0
 2514 0150 02D0     		beq	.L153
 970:main.c        **** 		{
 971:main.c        **** 			// this is a zero length command, nothing to do
 972:main.c        **** 		}
 973:main.c        **** 		else
 974:main.c        **** 		{
 975:main.c        **** 			// the command was at least 1 character, report it
 976:main.c        **** 			bCommandReady = 1;
 2515              		.loc 1 976 0
 2516 0152 094B     		ldr	r3, .L154+24
 2517 0154 0122     		movs	r2, #1
 2518 0156 1A70     		strb	r2, [r3]
 2519              	.L153:
 977:main.c        **** 		}
 978:main.c        **** 	}
 979:main.c        **** }
 2520              		.loc 1 979 0
 2521 0158 00BF     		nop
 2522 015a 0837     		adds	r7, r7, #8
 2523              		.cfi_def_cfa_offset 8
 2524 015c BD46     		mov	sp, r7
 2525              		.cfi_def_cfa_register 13
 2526              		@ sp needed
 2527 015e 80BD     		pop	{r7, pc}
 2528              	.L155:
 2529              		.align	2
 2530              	.L154:
 2531 0160 00000000 		.word	szTempBuffer
 2532 0164 00000000 		.word	cCharsReceived
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 63


 2533 0168 00000000 		.word	iWrite
 2534 016c 00000000 		.word	szCommandsBuffer
 2535 0170 00000000 		.word	iRead
 2536 0174 00000000 		.word	cCommandsReady
 2537 0178 00000000 		.word	bCommandReady
 2538 017c 00000000 		.word	szCommand
 2539              		.cfi_endproc
 2540              	.LFE68:
 2541              		.size	CommandCheck, .-CommandCheck
 2542              		.section	.text.PutString,"ax",%progbits
 2543              		.align	2
 2544              		.global	PutString
 2545              		.thumb
 2546              		.thumb_func
 2547              		.type	PutString, %function
 2548              	PutString:
 2549              	.LFB69:
 980:main.c        **** 
 981:main.c        **** void PutString(char * string)
 982:main.c        **** {
 2550              		.loc 1 982 0
 2551              		.cfi_startproc
 2552              		@ args = 0, pretend = 0, frame = 8
 2553              		@ frame_needed = 1, uses_anonymous_args = 0
 2554 0000 80B5     		push	{r7, lr}
 2555              		.cfi_def_cfa_offset 8
 2556              		.cfi_offset 7, -8
 2557              		.cfi_offset 14, -4
 2558 0002 82B0     		sub	sp, sp, #8
 2559              		.cfi_def_cfa_offset 16
 2560 0004 00AF     		add	r7, sp, #0
 2561              		.cfi_def_cfa_register 7
 2562 0006 7860     		str	r0, [r7, #4]
 983:main.c        **** 	while(USBUART_CDCIsReady() == 0){};
 2563              		.loc 1 983 0
 2564 0008 00BF     		nop
 2565              	.L157:
 2566              		.loc 1 983 0 is_stmt 0 discriminator 1
 2567 000a FFF7FEFF 		bl	USBUART_CDCIsReady
 2568 000e 0346     		mov	r3, r0
 2569 0010 002B     		cmp	r3, #0
 2570 0012 FAD0     		beq	.L157
 984:main.c        **** 	USBUART_PutString(string);
 2571              		.loc 1 984 0 is_stmt 1
 2572 0014 7868     		ldr	r0, [r7, #4]
 2573 0016 FFF7FEFF 		bl	USBUART_PutString
 985:main.c        **** }
 2574              		.loc 1 985 0
 2575 001a 00BF     		nop
 2576 001c 0837     		adds	r7, r7, #8
 2577              		.cfi_def_cfa_offset 8
 2578 001e BD46     		mov	sp, r7
 2579              		.cfi_def_cfa_register 13
 2580              		@ sp needed
 2581 0020 80BD     		pop	{r7, pc}
 2582              		.cfi_endproc
 2583              	.LFE69:
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 64


 2584              		.size	PutString, .-PutString
 2585 0022 00BF     		.section	.text.PutChar,"ax",%progbits
 2586              		.align	2
 2587              		.global	PutChar
 2588              		.thumb
 2589              		.thumb_func
 2590              		.type	PutChar, %function
 2591              	PutChar:
 2592              	.LFB70:
 986:main.c        **** 
 987:main.c        **** void PutChar(char Data)
 988:main.c        **** {
 2593              		.loc 1 988 0
 2594              		.cfi_startproc
 2595              		@ args = 0, pretend = 0, frame = 8
 2596              		@ frame_needed = 1, uses_anonymous_args = 0
 2597 0000 80B5     		push	{r7, lr}
 2598              		.cfi_def_cfa_offset 8
 2599              		.cfi_offset 7, -8
 2600              		.cfi_offset 14, -4
 2601 0002 82B0     		sub	sp, sp, #8
 2602              		.cfi_def_cfa_offset 16
 2603 0004 00AF     		add	r7, sp, #0
 2604              		.cfi_def_cfa_register 7
 2605 0006 0346     		mov	r3, r0
 2606 0008 FB71     		strb	r3, [r7, #7]
 989:main.c        **** 	while(USBUART_CDCIsReady() == 0){};
 2607              		.loc 1 989 0
 2608 000a 00BF     		nop
 2609              	.L159:
 2610              		.loc 1 989 0 is_stmt 0 discriminator 1
 2611 000c FFF7FEFF 		bl	USBUART_CDCIsReady
 2612 0010 0346     		mov	r3, r0
 2613 0012 002B     		cmp	r3, #0
 2614 0014 FAD0     		beq	.L159
 990:main.c        **** 	USBUART_PutChar(Data);
 2615              		.loc 1 990 0 is_stmt 1
 2616 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2617 0018 1846     		mov	r0, r3
 2618 001a FFF7FEFF 		bl	USBUART_PutChar
 991:main.c        **** }
 2619              		.loc 1 991 0
 2620 001e 00BF     		nop
 2621 0020 0837     		adds	r7, r7, #8
 2622              		.cfi_def_cfa_offset 8
 2623 0022 BD46     		mov	sp, r7
 2624              		.cfi_def_cfa_register 13
 2625              		@ sp needed
 2626 0024 80BD     		pop	{r7, pc}
 2627              		.cfi_endproc
 2628              	.LFE70:
 2629              		.size	PutChar, .-PutChar
 2630 0026 00BF     		.text
 2631              	.Letext0:
 2632              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2633              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2634              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 65


 2635              		.file 5 "Generated_Source\\PSoC5/CYDMAC.H"
 2636              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 2637              		.section	.debug_info,"",%progbits
 2638              	.Ldebug_info0:
 2639 0000 DF040000 		.4byte	0x4df
 2640 0004 0400     		.2byte	0x4
 2641 0006 00000000 		.4byte	.Ldebug_abbrev0
 2642 000a 04       		.byte	0x4
 2643 000b 01       		.uleb128 0x1
 2644 000c 5B000000 		.4byte	.LASF68
 2645 0010 0C       		.byte	0xc
 2646 0011 18030000 		.4byte	.LASF69
 2647 0015 43030000 		.4byte	.LASF70
 2648 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2649 001d 00000000 		.4byte	0
 2650 0021 00000000 		.4byte	.Ldebug_line0
 2651 0025 02       		.uleb128 0x2
 2652 0026 01       		.byte	0x1
 2653 0027 06       		.byte	0x6
 2654 0028 3E020000 		.4byte	.LASF0
 2655 002c 02       		.uleb128 0x2
 2656 002d 01       		.byte	0x1
 2657 002e 08       		.byte	0x8
 2658 002f 1E020000 		.4byte	.LASF1
 2659 0033 02       		.uleb128 0x2
 2660 0034 02       		.byte	0x2
 2661 0035 05       		.byte	0x5
 2662 0036 38000000 		.4byte	.LASF2
 2663 003a 02       		.uleb128 0x2
 2664 003b 02       		.byte	0x2
 2665 003c 07       		.byte	0x7
 2666 003d DF020000 		.4byte	.LASF3
 2667 0041 03       		.uleb128 0x3
 2668 0042 7F030000 		.4byte	.LASF9
 2669 0046 02       		.byte	0x2
 2670 0047 3F       		.byte	0x3f
 2671 0048 4C000000 		.4byte	0x4c
 2672 004c 02       		.uleb128 0x2
 2673 004d 04       		.byte	0x4
 2674 004e 05       		.byte	0x5
 2675 004f C2010000 		.4byte	.LASF4
 2676 0053 02       		.uleb128 0x2
 2677 0054 04       		.byte	0x4
 2678 0055 07       		.byte	0x7
 2679 0056 24030000 		.4byte	.LASF5
 2680 005a 02       		.uleb128 0x2
 2681 005b 08       		.byte	0x8
 2682 005c 05       		.byte	0x5
 2683 005d B4010000 		.4byte	.LASF6
 2684 0061 02       		.uleb128 0x2
 2685 0062 08       		.byte	0x8
 2686 0063 07       		.byte	0x7
 2687 0064 4A020000 		.4byte	.LASF7
 2688 0068 04       		.uleb128 0x4
 2689 0069 04       		.byte	0x4
 2690 006a 05       		.byte	0x5
 2691 006b 696E7400 		.ascii	"int\000"
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 66


 2692 006f 02       		.uleb128 0x2
 2693 0070 04       		.byte	0x4
 2694 0071 07       		.byte	0x7
 2695 0072 61020000 		.4byte	.LASF8
 2696 0076 03       		.uleb128 0x3
 2697 0077 CE020000 		.4byte	.LASF10
 2698 007b 03       		.byte	0x3
 2699 007c 2C       		.byte	0x2c
 2700 007d 41000000 		.4byte	0x41
 2701 0081 05       		.uleb128 0x5
 2702 0082 F2020000 		.4byte	.LASF11
 2703 0086 04       		.byte	0x4
 2704 0087 9201     		.2byte	0x192
 2705 0089 2C000000 		.4byte	0x2c
 2706 008d 05       		.uleb128 0x5
 2707 008e 09010000 		.4byte	.LASF12
 2708 0092 04       		.byte	0x4
 2709 0093 9301     		.2byte	0x193
 2710 0095 3A000000 		.4byte	0x3a
 2711 0099 05       		.uleb128 0x5
 2712 009a 11030000 		.4byte	.LASF13
 2713 009e 04       		.byte	0x4
 2714 009f 9401     		.2byte	0x194
 2715 00a1 53000000 		.4byte	0x53
 2716 00a5 05       		.uleb128 0x5
 2717 00a6 36030000 		.4byte	.LASF14
 2718 00aa 04       		.byte	0x4
 2719 00ab 9701     		.2byte	0x197
 2720 00ad 4C000000 		.4byte	0x4c
 2721 00b1 02       		.uleb128 0x2
 2722 00b2 04       		.byte	0x4
 2723 00b3 04       		.byte	0x4
 2724 00b4 9B010000 		.4byte	.LASF15
 2725 00b8 02       		.uleb128 0x2
 2726 00b9 08       		.byte	0x8
 2727 00ba 04       		.byte	0x4
 2728 00bb 3C030000 		.4byte	.LASF16
 2729 00bf 02       		.uleb128 0x2
 2730 00c0 01       		.byte	0x1
 2731 00c1 08       		.byte	0x8
 2732 00c2 C4020000 		.4byte	.LASF17
 2733 00c6 05       		.uleb128 0x5
 2734 00c7 1F030000 		.4byte	.LASF18
 2735 00cb 04       		.byte	0x4
 2736 00cc 3C02     		.2byte	0x23c
 2737 00ce D2000000 		.4byte	0xd2
 2738 00d2 06       		.uleb128 0x6
 2739 00d3 81000000 		.4byte	0x81
 2740 00d7 05       		.uleb128 0x5
 2741 00d8 26000000 		.4byte	.LASF19
 2742 00dc 04       		.byte	0x4
 2743 00dd 3D02     		.2byte	0x23d
 2744 00df E3000000 		.4byte	0xe3
 2745 00e3 06       		.uleb128 0x6
 2746 00e4 8D000000 		.4byte	0x8d
 2747 00e8 02       		.uleb128 0x2
 2748 00e9 08       		.byte	0x8
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 67


 2749 00ea 04       		.byte	0x4
 2750 00eb 0A020000 		.4byte	.LASF20
 2751 00ef 02       		.uleb128 0x2
 2752 00f0 04       		.byte	0x4
 2753 00f1 07       		.byte	0x7
 2754 00f2 42000000 		.4byte	.LASF21
 2755 00f6 07       		.uleb128 0x7
 2756 00f7 04       		.byte	0x4
 2757 00f8 BF000000 		.4byte	0xbf
 2758 00fc 08       		.uleb128 0x8
 2759 00fd D2000000 		.4byte	0xd2
 2760 0101 0C010000 		.4byte	0x10c
 2761 0105 09       		.uleb128 0x9
 2762 0106 EF000000 		.4byte	0xef
 2763 010a 03       		.byte	0x3
 2764 010b 00       		.byte	0
 2765 010c 0A       		.uleb128 0xa
 2766 010d 00000000 		.4byte	.LASF71
 2767 0111 08       		.byte	0x8
 2768 0112 05       		.byte	0x5
 2769 0113 59       		.byte	0x59
 2770 0114 31010000 		.4byte	0x131
 2771 0118 0B       		.uleb128 0xb
 2772 0119 54443000 		.ascii	"TD0\000"
 2773 011d 05       		.byte	0x5
 2774 011e 5B       		.byte	0x5b
 2775 011f 31010000 		.4byte	0x131
 2776 0123 00       		.byte	0
 2777 0124 0B       		.uleb128 0xb
 2778 0125 54443100 		.ascii	"TD1\000"
 2779 0129 05       		.byte	0x5
 2780 012a 5C       		.byte	0x5c
 2781 012b 36010000 		.4byte	0x136
 2782 012f 04       		.byte	0x4
 2783 0130 00       		.byte	0
 2784 0131 06       		.uleb128 0x6
 2785 0132 FC000000 		.4byte	0xfc
 2786 0136 06       		.uleb128 0x6
 2787 0137 FC000000 		.4byte	0xfc
 2788 013b 03       		.uleb128 0x3
 2789 013c 89020000 		.4byte	.LASF22
 2790 0140 05       		.byte	0x5
 2791 0141 5E       		.byte	0x5e
 2792 0142 0C010000 		.4byte	0x10c
 2793 0146 0C       		.uleb128 0xc
 2794 0147 C9020000 		.4byte	.LASF34
 2795 014b 01       		.byte	0x1
 2796 014c 74       		.byte	0x74
 2797 014d 68000000 		.4byte	0x68
 2798 0151 00000000 		.4byte	.LFB64
 2799 0155 1C0E0000 		.4byte	.LFE64-.LFB64
 2800 0159 01       		.uleb128 0x1
 2801 015a 9C       		.byte	0x9c
 2802 015b EA010000 		.4byte	0x1ea
 2803 015f 0D       		.uleb128 0xd
 2804 0160 A3020000 		.4byte	.LASF23
 2805 0164 01       		.byte	0x1
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 68


 2806 0165 76       		.byte	0x76
 2807 0166 81000000 		.4byte	0x81
 2808 016a 02       		.uleb128 0x2
 2809 016b 91       		.byte	0x91
 2810 016c 57       		.sleb128 -41
 2811 016d 0D       		.uleb128 0xd
 2812 016e A1010000 		.4byte	.LASF24
 2813 0172 01       		.byte	0x1
 2814 0173 77       		.byte	0x77
 2815 0174 8D000000 		.4byte	0x8d
 2816 0178 02       		.uleb128 0x2
 2817 0179 91       		.byte	0x91
 2818 017a 54       		.sleb128 -44
 2819 017b 0E       		.uleb128 0xe
 2820 017c 70737A00 		.ascii	"psz\000"
 2821 0180 01       		.byte	0x1
 2822 0181 78       		.byte	0x78
 2823 0182 F6000000 		.4byte	0xf6
 2824 0186 02       		.uleb128 0x2
 2825 0187 91       		.byte	0x91
 2826 0188 5C       		.sleb128 -36
 2827 0189 0D       		.uleb128 0xd
 2828 018a 2C020000 		.4byte	.LASF25
 2829 018e 01       		.byte	0x1
 2830 018f 79       		.byte	0x79
 2831 0190 8D000000 		.4byte	0x8d
 2832 0194 02       		.uleb128 0x2
 2833 0195 91       		.byte	0x91
 2834 0196 52       		.sleb128 -46
 2835 0197 0D       		.uleb128 0xd
 2836 0198 FB030000 		.4byte	.LASF26
 2837 019c 01       		.byte	0x1
 2838 019d 79       		.byte	0x79
 2839 019e 8D000000 		.4byte	0x8d
 2840 01a2 02       		.uleb128 0x2
 2841 01a3 91       		.byte	0x91
 2842 01a4 6E       		.sleb128 -18
 2843 01a5 0E       		.uleb128 0xe
 2844 01a6 6900     		.ascii	"i\000"
 2845 01a8 01       		.byte	0x1
 2846 01a9 79       		.byte	0x79
 2847 01aa 8D000000 		.4byte	0x8d
 2848 01ae 02       		.uleb128 0x2
 2849 01af 91       		.byte	0x91
 2850 01b0 6C       		.sleb128 -20
 2851 01b1 0D       		.uleb128 0xd
 2852 01b2 ED010000 		.4byte	.LASF27
 2853 01b6 01       		.byte	0x1
 2854 01b7 7A       		.byte	0x7a
 2855 01b8 99000000 		.4byte	0x99
 2856 01bc 02       		.uleb128 0x2
 2857 01bd 91       		.byte	0x91
 2858 01be 68       		.sleb128 -24
 2859 01bf 0D       		.uleb128 0xd
 2860 01c0 AF010000 		.4byte	.LASF28
 2861 01c4 01       		.byte	0x1
 2862 01c5 7B       		.byte	0x7b
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 69


 2863 01c6 B1000000 		.4byte	0xb1
 2864 01ca 02       		.uleb128 0x2
 2865 01cb 91       		.byte	0x91
 2866 01cc 58       		.sleb128 -40
 2867 01cd 0D       		.uleb128 0xd
 2868 01ce 12000000 		.4byte	.LASF29
 2869 01d2 01       		.byte	0x1
 2870 01d3 7C       		.byte	0x7c
 2871 01d4 B1000000 		.4byte	0xb1
 2872 01d8 02       		.uleb128 0x2
 2873 01d9 91       		.byte	0x91
 2874 01da 64       		.sleb128 -28
 2875 01db 0D       		.uleb128 0xd
 2876 01dc 7C010000 		.4byte	.LASF30
 2877 01e0 01       		.byte	0x1
 2878 01e1 7D       		.byte	0x7d
 2879 01e2 B1000000 		.4byte	0xb1
 2880 01e6 02       		.uleb128 0x2
 2881 01e7 91       		.byte	0x91
 2882 01e8 60       		.sleb128 -32
 2883 01e9 00       		.byte	0
 2884 01ea 0F       		.uleb128 0xf
 2885 01eb 4F010000 		.4byte	.LASF31
 2886 01ef 01       		.byte	0x1
 2887 01f0 1A03     		.2byte	0x31a
 2888 01f2 00000000 		.4byte	.LFB65
 2889 01f6 14010000 		.4byte	.LFE65-.LFB65
 2890 01fa 01       		.uleb128 0x1
 2891 01fb 9C       		.byte	0x9c
 2892 01fc 0F       		.uleb128 0xf
 2893 01fd 86010000 		.4byte	.LASF32
 2894 0201 01       		.byte	0x1
 2895 0202 5A03     		.2byte	0x35a
 2896 0204 00000000 		.4byte	.LFB66
 2897 0208 30010000 		.4byte	.LFE66-.LFB66
 2898 020c 01       		.uleb128 0x1
 2899 020d 9C       		.byte	0x9c
 2900 020e 10       		.uleb128 0x10
 2901 020f 3C010000 		.4byte	.LASF72
 2902 0213 01       		.byte	0x1
 2903 0214 7703     		.2byte	0x377
 2904 0216 8D000000 		.4byte	0x8d
 2905 021a 00000000 		.4byte	.LFB67
 2906 021e 60000000 		.4byte	.LFE67-.LFB67
 2907 0222 01       		.uleb128 0x1
 2908 0223 9C       		.byte	0x9c
 2909 0224 47020000 		.4byte	0x247
 2910 0228 11       		.uleb128 0x11
 2911 0229 D6020000 		.4byte	.LASF38
 2912 022d 01       		.byte	0x1
 2913 022e 7703     		.2byte	0x377
 2914 0230 81000000 		.4byte	0x81
 2915 0234 02       		.uleb128 0x2
 2916 0235 91       		.byte	0x91
 2917 0236 6F       		.sleb128 -17
 2918 0237 12       		.uleb128 0x12
 2919 0238 10010000 		.4byte	.LASF33
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 70


 2920 023c 01       		.byte	0x1
 2921 023d 7903     		.2byte	0x379
 2922 023f 8D000000 		.4byte	0x8d
 2923 0243 02       		.uleb128 0x2
 2924 0244 91       		.byte	0x91
 2925 0245 76       		.sleb128 -10
 2926 0246 00       		.byte	0
 2927 0247 13       		.uleb128 0x13
 2928 0248 31020000 		.4byte	.LASF35
 2929 024c 01       		.byte	0x1
 2930 024d 8903     		.2byte	0x389
 2931 024f 00000000 		.4byte	.LFB68
 2932 0253 80010000 		.4byte	.LFE68-.LFB68
 2933 0257 01       		.uleb128 0x1
 2934 0258 9C       		.byte	0x9c
 2935 0259 7A020000 		.4byte	0x27a
 2936 025d 14       		.uleb128 0x14
 2937 025e 6900     		.ascii	"i\000"
 2938 0260 01       		.byte	0x1
 2939 0261 8B03     		.2byte	0x38b
 2940 0263 8D000000 		.4byte	0x8d
 2941 0267 02       		.uleb128 0x2
 2942 0268 91       		.byte	0x91
 2943 0269 76       		.sleb128 -10
 2944 026a 12       		.uleb128 0x12
 2945 026b C0030000 		.4byte	.LASF36
 2946 026f 01       		.byte	0x1
 2947 0270 8B03     		.2byte	0x38b
 2948 0272 8D000000 		.4byte	0x8d
 2949 0276 02       		.uleb128 0x2
 2950 0277 91       		.byte	0x91
 2951 0278 74       		.sleb128 -12
 2952 0279 00       		.byte	0
 2953 027a 13       		.uleb128 0x13
 2954 027b B6030000 		.4byte	.LASF37
 2955 027f 01       		.byte	0x1
 2956 0280 D503     		.2byte	0x3d5
 2957 0282 00000000 		.4byte	.LFB69
 2958 0286 22000000 		.4byte	.LFE69-.LFB69
 2959 028a 01       		.uleb128 0x1
 2960 028b 9C       		.byte	0x9c
 2961 028c A0020000 		.4byte	0x2a0
 2962 0290 11       		.uleb128 0x11
 2963 0291 D2010000 		.4byte	.LASF39
 2964 0295 01       		.byte	0x1
 2965 0296 D503     		.2byte	0x3d5
 2966 0298 F6000000 		.4byte	0xf6
 2967 029c 02       		.uleb128 0x2
 2968 029d 91       		.byte	0x91
 2969 029e 74       		.sleb128 -12
 2970 029f 00       		.byte	0
 2971 02a0 13       		.uleb128 0x13
 2972 02a1 16020000 		.4byte	.LASF40
 2973 02a5 01       		.byte	0x1
 2974 02a6 DB03     		.2byte	0x3db
 2975 02a8 00000000 		.4byte	.LFB70
 2976 02ac 26000000 		.4byte	.LFE70-.LFB70
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 71


 2977 02b0 01       		.uleb128 0x1
 2978 02b1 9C       		.byte	0x9c
 2979 02b2 C6020000 		.4byte	0x2c6
 2980 02b6 11       		.uleb128 0x11
 2981 02b7 D9010000 		.4byte	.LASF41
 2982 02bb 01       		.byte	0x1
 2983 02bc DB03     		.2byte	0x3db
 2984 02be BF000000 		.4byte	0xbf
 2985 02c2 02       		.uleb128 0x2
 2986 02c3 91       		.byte	0x91
 2987 02c4 77       		.sleb128 -9
 2988 02c5 00       		.byte	0
 2989 02c6 15       		.uleb128 0x15
 2990 02c7 CE030000 		.4byte	.LASF42
 2991 02cb 06       		.byte	0x6
 2992 02cc 9606     		.2byte	0x696
 2993 02ce D2020000 		.4byte	0x2d2
 2994 02d2 06       		.uleb128 0x6
 2995 02d3 76000000 		.4byte	0x76
 2996 02d7 16       		.uleb128 0x16
 2997 02d8 F7010000 		.4byte	.LASF43
 2998 02dc 01       		.byte	0x1
 2999 02dd 42       		.byte	0x42
 3000 02de 81000000 		.4byte	0x81
 3001 02e2 05       		.uleb128 0x5
 3002 02e3 03       		.byte	0x3
 3003 02e4 00000000 		.4byte	DMA_Channel_1_Chan
 3004 02e8 08       		.uleb128 0x8
 3005 02e9 81000000 		.4byte	0x81
 3006 02ed F8020000 		.4byte	0x2f8
 3007 02f1 09       		.uleb128 0x9
 3008 02f2 EF000000 		.4byte	0xef
 3009 02f6 00       		.byte	0
 3010 02f7 00       		.byte	0
 3011 02f8 16       		.uleb128 0x16
 3012 02f9 EA030000 		.4byte	.LASF44
 3013 02fd 01       		.byte	0x1
 3014 02fe 43       		.byte	0x43
 3015 02ff E8020000 		.4byte	0x2e8
 3016 0303 05       		.uleb128 0x5
 3017 0304 03       		.byte	0x3
 3018 0305 00000000 		.4byte	DMA_Channel_1_TD
 3019 0309 16       		.uleb128 0x16
 3020 030a F6000000 		.4byte	.LASF45
 3021 030e 01       		.byte	0x1
 3022 030f 47       		.byte	0x47
 3023 0310 81000000 		.4byte	0x81
 3024 0314 05       		.uleb128 0x5
 3025 0315 03       		.byte	0x3
 3026 0316 00000000 		.4byte	DMA_Channel_2_Chan
 3027 031a 16       		.uleb128 0x16
 3028 031b 16010000 		.4byte	.LASF46
 3029 031f 01       		.byte	0x1
 3030 0320 48       		.byte	0x48
 3031 0321 E8020000 		.4byte	0x2e8
 3032 0325 05       		.uleb128 0x5
 3033 0326 03       		.byte	0x3
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 72


 3034 0327 00000000 		.4byte	DMA_Channel_2_TD
 3035 032b 08       		.uleb128 0x8
 3036 032c 8D000000 		.4byte	0x8d
 3037 0330 3C030000 		.4byte	0x33c
 3038 0334 17       		.uleb128 0x17
 3039 0335 EF000000 		.4byte	0xef
 3040 0339 FF03     		.2byte	0x3ff
 3041 033b 00       		.byte	0
 3042 033c 16       		.uleb128 0x16
 3043 033d 6E020000 		.4byte	.LASF47
 3044 0341 01       		.byte	0x1
 3045 0342 4B       		.byte	0x4b
 3046 0343 2B030000 		.4byte	0x32b
 3047 0347 05       		.uleb128 0x5
 3048 0348 03       		.byte	0x3
 3049 0349 00000000 		.4byte	Channel_1_Data
 3050 034d 16       		.uleb128 0x16
 3051 034e DB030000 		.4byte	.LASF48
 3052 0352 01       		.byte	0x1
 3053 0353 4C       		.byte	0x4c
 3054 0354 2B030000 		.4byte	0x32b
 3055 0358 05       		.uleb128 0x5
 3056 0359 03       		.byte	0x3
 3057 035a 00000000 		.4byte	Channel_2_Data
 3058 035e 08       		.uleb128 0x8
 3059 035f BF000000 		.4byte	0xbf
 3060 0363 6E030000 		.4byte	0x36e
 3061 0367 09       		.uleb128 0x9
 3062 0368 EF000000 		.4byte	0xef
 3063 036c 3F       		.byte	0x3f
 3064 036d 00       		.byte	0
 3065 036e 16       		.uleb128 0x16
 3066 036f E9000000 		.4byte	.LASF49
 3067 0373 01       		.byte	0x1
 3068 0374 50       		.byte	0x50
 3069 0375 5E030000 		.4byte	0x35e
 3070 0379 05       		.uleb128 0x5
 3071 037a 03       		.byte	0x3
 3072 037b 00000000 		.4byte	szTempBuffer
 3073 037f 16       		.uleb128 0x16
 3074 0380 94020000 		.4byte	.LASF50
 3075 0384 01       		.byte	0x1
 3076 0385 51       		.byte	0x51
 3077 0386 81000000 		.4byte	0x81
 3078 038a 05       		.uleb128 0x5
 3079 038b 03       		.byte	0x3
 3080 038c 00000000 		.4byte	cCharsReceived
 3081 0390 08       		.uleb128 0x8
 3082 0391 BF000000 		.4byte	0xbf
 3083 0395 A1030000 		.4byte	0x3a1
 3084 0399 17       		.uleb128 0x17
 3085 039a EF000000 		.4byte	0xef
 3086 039e FF0F     		.2byte	0xfff
 3087 03a0 00       		.byte	0
 3088 03a1 16       		.uleb128 0x16
 3089 03a2 A5030000 		.4byte	.LASF51
 3090 03a6 01       		.byte	0x1
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 73


 3091 03a7 54       		.byte	0x54
 3092 03a8 90030000 		.4byte	0x390
 3093 03ac 05       		.uleb128 0x5
 3094 03ad 03       		.byte	0x3
 3095 03ae 00000000 		.4byte	szCommandsBuffer
 3096 03b2 16       		.uleb128 0x16
 3097 03b3 F8020000 		.4byte	.LASF52
 3098 03b7 01       		.byte	0x1
 3099 03b8 55       		.byte	0x55
 3100 03b9 8D000000 		.4byte	0x8d
 3101 03bd 05       		.uleb128 0x5
 3102 03be 03       		.byte	0x3
 3103 03bf 00000000 		.4byte	iRead
 3104 03c3 16       		.uleb128 0x16
 3105 03c4 CB010000 		.4byte	.LASF53
 3106 03c8 01       		.byte	0x1
 3107 03c9 55       		.byte	0x55
 3108 03ca 8D000000 		.4byte	0x8d
 3109 03ce 05       		.uleb128 0x5
 3110 03cf 03       		.byte	0x3
 3111 03d0 00000000 		.4byte	iWrite
 3112 03d4 16       		.uleb128 0x16
 3113 03d5 5F010000 		.4byte	.LASF54
 3114 03d9 01       		.byte	0x1
 3115 03da 56       		.byte	0x56
 3116 03db 8D000000 		.4byte	0x8d
 3117 03df 05       		.uleb128 0x5
 3118 03e0 03       		.byte	0x3
 3119 03e1 00000000 		.4byte	cCommandsReady
 3120 03e5 16       		.uleb128 0x16
 3121 03e6 89030000 		.4byte	.LASF55
 3122 03ea 01       		.byte	0x1
 3123 03eb 58       		.byte	0x58
 3124 03ec 5E030000 		.4byte	0x35e
 3125 03f0 05       		.uleb128 0x5
 3126 03f1 03       		.byte	0x3
 3127 03f2 00000000 		.4byte	szCommand
 3128 03f6 16       		.uleb128 0x16
 3129 03f7 6E010000 		.4byte	.LASF56
 3130 03fb 01       		.byte	0x1
 3131 03fc 59       		.byte	0x59
 3132 03fd 81000000 		.4byte	0x81
 3133 0401 05       		.uleb128 0x5
 3134 0402 03       		.byte	0x3
 3135 0403 00000000 		.4byte	bCommandReady
 3136 0407 16       		.uleb128 0x16
 3137 0408 93030000 		.4byte	.LASF57
 3138 040c 01       		.byte	0x1
 3139 040d 5C       		.byte	0x5c
 3140 040e 81000000 		.4byte	0x81
 3141 0412 05       		.uleb128 0x5
 3142 0413 03       		.byte	0x3
 3143 0414 00000000 		.4byte	preamp_a
 3144 0418 16       		.uleb128 0x16
 3145 0419 9C030000 		.4byte	.LASF58
 3146 041d 01       		.byte	0x1
 3147 041e 5C       		.byte	0x5c
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 74


 3148 041f 81000000 		.4byte	0x81
 3149 0423 05       		.uleb128 0x5
 3150 0424 03       		.byte	0x3
 3151 0425 00000000 		.4byte	preamp_b
 3152 0429 16       		.uleb128 0x16
 3153 042a 17000000 		.4byte	.LASF59
 3154 042e 01       		.byte	0x1
 3155 042f 5C       		.byte	0x5c
 3156 0430 81000000 		.4byte	0x81
 3157 0434 05       		.uleb128 0x5
 3158 0435 03       		.byte	0x3
 3159 0436 00000000 		.4byte	trigger_source
 3160 043a 16       		.uleb128 0x16
 3161 043b 7D020000 		.4byte	.LASF60
 3162 043f 01       		.byte	0x1
 3163 0440 5C       		.byte	0x5c
 3164 0441 81000000 		.4byte	0x81
 3165 0445 05       		.uleb128 0x5
 3166 0446 03       		.byte	0x3
 3167 0447 00000000 		.4byte	preamp_trig
 3168 044b 08       		.uleb128 0x8
 3169 044c 81000000 		.4byte	0x81
 3170 0450 5B040000 		.4byte	0x45b
 3171 0454 09       		.uleb128 0x9
 3172 0455 EF000000 		.4byte	0xef
 3173 0459 3F       		.byte	0x3f
 3174 045a 00       		.byte	0
 3175 045b 16       		.uleb128 0x16
 3176 045c DE010000 		.4byte	.LASF61
 3177 0460 01       		.byte	0x1
 3178 0461 61       		.byte	0x61
 3179 0462 4B040000 		.4byte	0x44b
 3180 0466 05       		.uleb128 0x5
 3181 0467 03       		.byte	0x3
 3182 0468 00000000 		.4byte	USB_Out_Buffer
 3183 046c 08       		.uleb128 0x8
 3184 046d 81000000 		.4byte	0x81
 3185 0471 7C040000 		.4byte	0x47c
 3186 0475 09       		.uleb128 0x9
 3187 0476 EF000000 		.4byte	0xef
 3188 047a FF       		.byte	0xff
 3189 047b 00       		.byte	0
 3190 047c 16       		.uleb128 0x16
 3191 047d 4B000000 		.4byte	.LASF62
 3192 0481 01       		.byte	0x1
 3193 0482 65       		.byte	0x65
 3194 0483 6C040000 		.4byte	0x46c
 3195 0487 05       		.uleb128 0x5
 3196 0488 03       		.byte	0x3
 3197 0489 00000000 		.4byte	Waveform_Buffer
 3198 048d 16       		.uleb128 0x16
 3199 048e 27010000 		.4byte	.LASF63
 3200 0492 01       		.byte	0x1
 3201 0493 66       		.byte	0x66
 3202 0494 6C040000 		.4byte	0x46c
 3203 0498 05       		.uleb128 0x5
 3204 0499 03       		.byte	0x3
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 75


 3205 049a 00000000 		.4byte	Waveform_Temp_Buffer
 3206 049e 16       		.uleb128 0x16
 3207 049f 91010000 		.4byte	.LASF64
 3208 04a3 01       		.byte	0x1
 3209 04a4 67       		.byte	0x67
 3210 04a5 81000000 		.4byte	0x81
 3211 04a9 05       		.uleb128 0x5
 3212 04aa 03       		.byte	0x3
 3213 04ab 00000000 		.4byte	wave_gain
 3214 04af 16       		.uleb128 0x16
 3215 04b0 2C000000 		.4byte	.LASF65
 3216 04b4 01       		.byte	0x1
 3217 04b5 68       		.byte	0x68
 3218 04b6 81000000 		.4byte	0x81
 3219 04ba 05       		.uleb128 0x5
 3220 04bb 03       		.byte	0x3
 3221 04bc 00000000 		.4byte	wave_offset
 3222 04c0 16       		.uleb128 0x16
 3223 04c1 AA020000 		.4byte	.LASF66
 3224 04c5 01       		.byte	0x1
 3225 04c6 6B       		.byte	0x6b
 3226 04c7 81000000 		.4byte	0x81
 3227 04cb 05       		.uleb128 0x5
 3228 04cc 03       		.byte	0x3
 3229 04cd 00000000 		.4byte	Digital_Input_Status_Last
 3230 04d1 16       		.uleb128 0x16
 3231 04d2 FE020000 		.4byte	.LASF67
 3232 04d6 01       		.byte	0x1
 3233 04d7 6C       		.byte	0x6c
 3234 04d8 81000000 		.4byte	0x81
 3235 04dc 05       		.uleb128 0x5
 3236 04dd 03       		.byte	0x3
 3237 04de 00000000 		.4byte	Digital_AutoUpdate
 3238 04e2 00       		.byte	0
 3239              		.section	.debug_abbrev,"",%progbits
 3240              	.Ldebug_abbrev0:
 3241 0000 01       		.uleb128 0x1
 3242 0001 11       		.uleb128 0x11
 3243 0002 01       		.byte	0x1
 3244 0003 25       		.uleb128 0x25
 3245 0004 0E       		.uleb128 0xe
 3246 0005 13       		.uleb128 0x13
 3247 0006 0B       		.uleb128 0xb
 3248 0007 03       		.uleb128 0x3
 3249 0008 0E       		.uleb128 0xe
 3250 0009 1B       		.uleb128 0x1b
 3251 000a 0E       		.uleb128 0xe
 3252 000b 55       		.uleb128 0x55
 3253 000c 17       		.uleb128 0x17
 3254 000d 11       		.uleb128 0x11
 3255 000e 01       		.uleb128 0x1
 3256 000f 10       		.uleb128 0x10
 3257 0010 17       		.uleb128 0x17
 3258 0011 00       		.byte	0
 3259 0012 00       		.byte	0
 3260 0013 02       		.uleb128 0x2
 3261 0014 24       		.uleb128 0x24
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 76


 3262 0015 00       		.byte	0
 3263 0016 0B       		.uleb128 0xb
 3264 0017 0B       		.uleb128 0xb
 3265 0018 3E       		.uleb128 0x3e
 3266 0019 0B       		.uleb128 0xb
 3267 001a 03       		.uleb128 0x3
 3268 001b 0E       		.uleb128 0xe
 3269 001c 00       		.byte	0
 3270 001d 00       		.byte	0
 3271 001e 03       		.uleb128 0x3
 3272 001f 16       		.uleb128 0x16
 3273 0020 00       		.byte	0
 3274 0021 03       		.uleb128 0x3
 3275 0022 0E       		.uleb128 0xe
 3276 0023 3A       		.uleb128 0x3a
 3277 0024 0B       		.uleb128 0xb
 3278 0025 3B       		.uleb128 0x3b
 3279 0026 0B       		.uleb128 0xb
 3280 0027 49       		.uleb128 0x49
 3281 0028 13       		.uleb128 0x13
 3282 0029 00       		.byte	0
 3283 002a 00       		.byte	0
 3284 002b 04       		.uleb128 0x4
 3285 002c 24       		.uleb128 0x24
 3286 002d 00       		.byte	0
 3287 002e 0B       		.uleb128 0xb
 3288 002f 0B       		.uleb128 0xb
 3289 0030 3E       		.uleb128 0x3e
 3290 0031 0B       		.uleb128 0xb
 3291 0032 03       		.uleb128 0x3
 3292 0033 08       		.uleb128 0x8
 3293 0034 00       		.byte	0
 3294 0035 00       		.byte	0
 3295 0036 05       		.uleb128 0x5
 3296 0037 16       		.uleb128 0x16
 3297 0038 00       		.byte	0
 3298 0039 03       		.uleb128 0x3
 3299 003a 0E       		.uleb128 0xe
 3300 003b 3A       		.uleb128 0x3a
 3301 003c 0B       		.uleb128 0xb
 3302 003d 3B       		.uleb128 0x3b
 3303 003e 05       		.uleb128 0x5
 3304 003f 49       		.uleb128 0x49
 3305 0040 13       		.uleb128 0x13
 3306 0041 00       		.byte	0
 3307 0042 00       		.byte	0
 3308 0043 06       		.uleb128 0x6
 3309 0044 35       		.uleb128 0x35
 3310 0045 00       		.byte	0
 3311 0046 49       		.uleb128 0x49
 3312 0047 13       		.uleb128 0x13
 3313 0048 00       		.byte	0
 3314 0049 00       		.byte	0
 3315 004a 07       		.uleb128 0x7
 3316 004b 0F       		.uleb128 0xf
 3317 004c 00       		.byte	0
 3318 004d 0B       		.uleb128 0xb
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 77


 3319 004e 0B       		.uleb128 0xb
 3320 004f 49       		.uleb128 0x49
 3321 0050 13       		.uleb128 0x13
 3322 0051 00       		.byte	0
 3323 0052 00       		.byte	0
 3324 0053 08       		.uleb128 0x8
 3325 0054 01       		.uleb128 0x1
 3326 0055 01       		.byte	0x1
 3327 0056 49       		.uleb128 0x49
 3328 0057 13       		.uleb128 0x13
 3329 0058 01       		.uleb128 0x1
 3330 0059 13       		.uleb128 0x13
 3331 005a 00       		.byte	0
 3332 005b 00       		.byte	0
 3333 005c 09       		.uleb128 0x9
 3334 005d 21       		.uleb128 0x21
 3335 005e 00       		.byte	0
 3336 005f 49       		.uleb128 0x49
 3337 0060 13       		.uleb128 0x13
 3338 0061 2F       		.uleb128 0x2f
 3339 0062 0B       		.uleb128 0xb
 3340 0063 00       		.byte	0
 3341 0064 00       		.byte	0
 3342 0065 0A       		.uleb128 0xa
 3343 0066 13       		.uleb128 0x13
 3344 0067 01       		.byte	0x1
 3345 0068 03       		.uleb128 0x3
 3346 0069 0E       		.uleb128 0xe
 3347 006a 0B       		.uleb128 0xb
 3348 006b 0B       		.uleb128 0xb
 3349 006c 3A       		.uleb128 0x3a
 3350 006d 0B       		.uleb128 0xb
 3351 006e 3B       		.uleb128 0x3b
 3352 006f 0B       		.uleb128 0xb
 3353 0070 01       		.uleb128 0x1
 3354 0071 13       		.uleb128 0x13
 3355 0072 00       		.byte	0
 3356 0073 00       		.byte	0
 3357 0074 0B       		.uleb128 0xb
 3358 0075 0D       		.uleb128 0xd
 3359 0076 00       		.byte	0
 3360 0077 03       		.uleb128 0x3
 3361 0078 08       		.uleb128 0x8
 3362 0079 3A       		.uleb128 0x3a
 3363 007a 0B       		.uleb128 0xb
 3364 007b 3B       		.uleb128 0x3b
 3365 007c 0B       		.uleb128 0xb
 3366 007d 49       		.uleb128 0x49
 3367 007e 13       		.uleb128 0x13
 3368 007f 38       		.uleb128 0x38
 3369 0080 0B       		.uleb128 0xb
 3370 0081 00       		.byte	0
 3371 0082 00       		.byte	0
 3372 0083 0C       		.uleb128 0xc
 3373 0084 2E       		.uleb128 0x2e
 3374 0085 01       		.byte	0x1
 3375 0086 3F       		.uleb128 0x3f
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 78


 3376 0087 19       		.uleb128 0x19
 3377 0088 03       		.uleb128 0x3
 3378 0089 0E       		.uleb128 0xe
 3379 008a 3A       		.uleb128 0x3a
 3380 008b 0B       		.uleb128 0xb
 3381 008c 3B       		.uleb128 0x3b
 3382 008d 0B       		.uleb128 0xb
 3383 008e 49       		.uleb128 0x49
 3384 008f 13       		.uleb128 0x13
 3385 0090 11       		.uleb128 0x11
 3386 0091 01       		.uleb128 0x1
 3387 0092 12       		.uleb128 0x12
 3388 0093 06       		.uleb128 0x6
 3389 0094 40       		.uleb128 0x40
 3390 0095 18       		.uleb128 0x18
 3391 0096 9642     		.uleb128 0x2116
 3392 0098 19       		.uleb128 0x19
 3393 0099 01       		.uleb128 0x1
 3394 009a 13       		.uleb128 0x13
 3395 009b 00       		.byte	0
 3396 009c 00       		.byte	0
 3397 009d 0D       		.uleb128 0xd
 3398 009e 34       		.uleb128 0x34
 3399 009f 00       		.byte	0
 3400 00a0 03       		.uleb128 0x3
 3401 00a1 0E       		.uleb128 0xe
 3402 00a2 3A       		.uleb128 0x3a
 3403 00a3 0B       		.uleb128 0xb
 3404 00a4 3B       		.uleb128 0x3b
 3405 00a5 0B       		.uleb128 0xb
 3406 00a6 49       		.uleb128 0x49
 3407 00a7 13       		.uleb128 0x13
 3408 00a8 02       		.uleb128 0x2
 3409 00a9 18       		.uleb128 0x18
 3410 00aa 00       		.byte	0
 3411 00ab 00       		.byte	0
 3412 00ac 0E       		.uleb128 0xe
 3413 00ad 34       		.uleb128 0x34
 3414 00ae 00       		.byte	0
 3415 00af 03       		.uleb128 0x3
 3416 00b0 08       		.uleb128 0x8
 3417 00b1 3A       		.uleb128 0x3a
 3418 00b2 0B       		.uleb128 0xb
 3419 00b3 3B       		.uleb128 0x3b
 3420 00b4 0B       		.uleb128 0xb
 3421 00b5 49       		.uleb128 0x49
 3422 00b6 13       		.uleb128 0x13
 3423 00b7 02       		.uleb128 0x2
 3424 00b8 18       		.uleb128 0x18
 3425 00b9 00       		.byte	0
 3426 00ba 00       		.byte	0
 3427 00bb 0F       		.uleb128 0xf
 3428 00bc 2E       		.uleb128 0x2e
 3429 00bd 00       		.byte	0
 3430 00be 3F       		.uleb128 0x3f
 3431 00bf 19       		.uleb128 0x19
 3432 00c0 03       		.uleb128 0x3
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 79


 3433 00c1 0E       		.uleb128 0xe
 3434 00c2 3A       		.uleb128 0x3a
 3435 00c3 0B       		.uleb128 0xb
 3436 00c4 3B       		.uleb128 0x3b
 3437 00c5 05       		.uleb128 0x5
 3438 00c6 27       		.uleb128 0x27
 3439 00c7 19       		.uleb128 0x19
 3440 00c8 11       		.uleb128 0x11
 3441 00c9 01       		.uleb128 0x1
 3442 00ca 12       		.uleb128 0x12
 3443 00cb 06       		.uleb128 0x6
 3444 00cc 40       		.uleb128 0x40
 3445 00cd 18       		.uleb128 0x18
 3446 00ce 9642     		.uleb128 0x2116
 3447 00d0 19       		.uleb128 0x19
 3448 00d1 00       		.byte	0
 3449 00d2 00       		.byte	0
 3450 00d3 10       		.uleb128 0x10
 3451 00d4 2E       		.uleb128 0x2e
 3452 00d5 01       		.byte	0x1
 3453 00d6 3F       		.uleb128 0x3f
 3454 00d7 19       		.uleb128 0x19
 3455 00d8 03       		.uleb128 0x3
 3456 00d9 0E       		.uleb128 0xe
 3457 00da 3A       		.uleb128 0x3a
 3458 00db 0B       		.uleb128 0xb
 3459 00dc 3B       		.uleb128 0x3b
 3460 00dd 05       		.uleb128 0x5
 3461 00de 27       		.uleb128 0x27
 3462 00df 19       		.uleb128 0x19
 3463 00e0 49       		.uleb128 0x49
 3464 00e1 13       		.uleb128 0x13
 3465 00e2 11       		.uleb128 0x11
 3466 00e3 01       		.uleb128 0x1
 3467 00e4 12       		.uleb128 0x12
 3468 00e5 06       		.uleb128 0x6
 3469 00e6 40       		.uleb128 0x40
 3470 00e7 18       		.uleb128 0x18
 3471 00e8 9742     		.uleb128 0x2117
 3472 00ea 19       		.uleb128 0x19
 3473 00eb 01       		.uleb128 0x1
 3474 00ec 13       		.uleb128 0x13
 3475 00ed 00       		.byte	0
 3476 00ee 00       		.byte	0
 3477 00ef 11       		.uleb128 0x11
 3478 00f0 05       		.uleb128 0x5
 3479 00f1 00       		.byte	0
 3480 00f2 03       		.uleb128 0x3
 3481 00f3 0E       		.uleb128 0xe
 3482 00f4 3A       		.uleb128 0x3a
 3483 00f5 0B       		.uleb128 0xb
 3484 00f6 3B       		.uleb128 0x3b
 3485 00f7 05       		.uleb128 0x5
 3486 00f8 49       		.uleb128 0x49
 3487 00f9 13       		.uleb128 0x13
 3488 00fa 02       		.uleb128 0x2
 3489 00fb 18       		.uleb128 0x18
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 80


 3490 00fc 00       		.byte	0
 3491 00fd 00       		.byte	0
 3492 00fe 12       		.uleb128 0x12
 3493 00ff 34       		.uleb128 0x34
 3494 0100 00       		.byte	0
 3495 0101 03       		.uleb128 0x3
 3496 0102 0E       		.uleb128 0xe
 3497 0103 3A       		.uleb128 0x3a
 3498 0104 0B       		.uleb128 0xb
 3499 0105 3B       		.uleb128 0x3b
 3500 0106 05       		.uleb128 0x5
 3501 0107 49       		.uleb128 0x49
 3502 0108 13       		.uleb128 0x13
 3503 0109 02       		.uleb128 0x2
 3504 010a 18       		.uleb128 0x18
 3505 010b 00       		.byte	0
 3506 010c 00       		.byte	0
 3507 010d 13       		.uleb128 0x13
 3508 010e 2E       		.uleb128 0x2e
 3509 010f 01       		.byte	0x1
 3510 0110 3F       		.uleb128 0x3f
 3511 0111 19       		.uleb128 0x19
 3512 0112 03       		.uleb128 0x3
 3513 0113 0E       		.uleb128 0xe
 3514 0114 3A       		.uleb128 0x3a
 3515 0115 0B       		.uleb128 0xb
 3516 0116 3B       		.uleb128 0x3b
 3517 0117 05       		.uleb128 0x5
 3518 0118 27       		.uleb128 0x27
 3519 0119 19       		.uleb128 0x19
 3520 011a 11       		.uleb128 0x11
 3521 011b 01       		.uleb128 0x1
 3522 011c 12       		.uleb128 0x12
 3523 011d 06       		.uleb128 0x6
 3524 011e 40       		.uleb128 0x40
 3525 011f 18       		.uleb128 0x18
 3526 0120 9642     		.uleb128 0x2116
 3527 0122 19       		.uleb128 0x19
 3528 0123 01       		.uleb128 0x1
 3529 0124 13       		.uleb128 0x13
 3530 0125 00       		.byte	0
 3531 0126 00       		.byte	0
 3532 0127 14       		.uleb128 0x14
 3533 0128 34       		.uleb128 0x34
 3534 0129 00       		.byte	0
 3535 012a 03       		.uleb128 0x3
 3536 012b 08       		.uleb128 0x8
 3537 012c 3A       		.uleb128 0x3a
 3538 012d 0B       		.uleb128 0xb
 3539 012e 3B       		.uleb128 0x3b
 3540 012f 05       		.uleb128 0x5
 3541 0130 49       		.uleb128 0x49
 3542 0131 13       		.uleb128 0x13
 3543 0132 02       		.uleb128 0x2
 3544 0133 18       		.uleb128 0x18
 3545 0134 00       		.byte	0
 3546 0135 00       		.byte	0
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 81


 3547 0136 15       		.uleb128 0x15
 3548 0137 34       		.uleb128 0x34
 3549 0138 00       		.byte	0
 3550 0139 03       		.uleb128 0x3
 3551 013a 0E       		.uleb128 0xe
 3552 013b 3A       		.uleb128 0x3a
 3553 013c 0B       		.uleb128 0xb
 3554 013d 3B       		.uleb128 0x3b
 3555 013e 05       		.uleb128 0x5
 3556 013f 49       		.uleb128 0x49
 3557 0140 13       		.uleb128 0x13
 3558 0141 3F       		.uleb128 0x3f
 3559 0142 19       		.uleb128 0x19
 3560 0143 3C       		.uleb128 0x3c
 3561 0144 19       		.uleb128 0x19
 3562 0145 00       		.byte	0
 3563 0146 00       		.byte	0
 3564 0147 16       		.uleb128 0x16
 3565 0148 34       		.uleb128 0x34
 3566 0149 00       		.byte	0
 3567 014a 03       		.uleb128 0x3
 3568 014b 0E       		.uleb128 0xe
 3569 014c 3A       		.uleb128 0x3a
 3570 014d 0B       		.uleb128 0xb
 3571 014e 3B       		.uleb128 0x3b
 3572 014f 0B       		.uleb128 0xb
 3573 0150 49       		.uleb128 0x49
 3574 0151 13       		.uleb128 0x13
 3575 0152 3F       		.uleb128 0x3f
 3576 0153 19       		.uleb128 0x19
 3577 0154 02       		.uleb128 0x2
 3578 0155 18       		.uleb128 0x18
 3579 0156 00       		.byte	0
 3580 0157 00       		.byte	0
 3581 0158 17       		.uleb128 0x17
 3582 0159 21       		.uleb128 0x21
 3583 015a 00       		.byte	0
 3584 015b 49       		.uleb128 0x49
 3585 015c 13       		.uleb128 0x13
 3586 015d 2F       		.uleb128 0x2f
 3587 015e 05       		.uleb128 0x5
 3588 015f 00       		.byte	0
 3589 0160 00       		.byte	0
 3590 0161 00       		.byte	0
 3591              		.section	.debug_aranges,"",%progbits
 3592 0000 4C000000 		.4byte	0x4c
 3593 0004 0200     		.2byte	0x2
 3594 0006 00000000 		.4byte	.Ldebug_info0
 3595 000a 04       		.byte	0x4
 3596 000b 00       		.byte	0
 3597 000c 0000     		.2byte	0
 3598 000e 0000     		.2byte	0
 3599 0010 00000000 		.4byte	.LFB64
 3600 0014 1C0E0000 		.4byte	.LFE64-.LFB64
 3601 0018 00000000 		.4byte	.LFB65
 3602 001c 14010000 		.4byte	.LFE65-.LFB65
 3603 0020 00000000 		.4byte	.LFB66
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 82


 3604 0024 30010000 		.4byte	.LFE66-.LFB66
 3605 0028 00000000 		.4byte	.LFB67
 3606 002c 60000000 		.4byte	.LFE67-.LFB67
 3607 0030 00000000 		.4byte	.LFB68
 3608 0034 80010000 		.4byte	.LFE68-.LFB68
 3609 0038 00000000 		.4byte	.LFB69
 3610 003c 22000000 		.4byte	.LFE69-.LFB69
 3611 0040 00000000 		.4byte	.LFB70
 3612 0044 26000000 		.4byte	.LFE70-.LFB70
 3613 0048 00000000 		.4byte	0
 3614 004c 00000000 		.4byte	0
 3615              		.section	.debug_ranges,"",%progbits
 3616              	.Ldebug_ranges0:
 3617 0000 00000000 		.4byte	.LFB64
 3618 0004 1C0E0000 		.4byte	.LFE64
 3619 0008 00000000 		.4byte	.LFB65
 3620 000c 14010000 		.4byte	.LFE65
 3621 0010 00000000 		.4byte	.LFB66
 3622 0014 30010000 		.4byte	.LFE66
 3623 0018 00000000 		.4byte	.LFB67
 3624 001c 60000000 		.4byte	.LFE67
 3625 0020 00000000 		.4byte	.LFB68
 3626 0024 80010000 		.4byte	.LFE68
 3627 0028 00000000 		.4byte	.LFB69
 3628 002c 22000000 		.4byte	.LFE69
 3629 0030 00000000 		.4byte	.LFB70
 3630 0034 26000000 		.4byte	.LFE70
 3631 0038 00000000 		.4byte	0
 3632 003c 00000000 		.4byte	0
 3633              		.section	.debug_line,"",%progbits
 3634              	.Ldebug_line0:
 3635 0000 F6030000 		.section	.debug_str,"MS",%progbits,1
 3635      02005801 
 3635      00000201 
 3635      FB0E0D00 
 3635      01010101 
 3636              	.LASF71:
 3637 0000 646D6163 		.ascii	"dmac_tdmem_struct\000"
 3637      5F74646D 
 3637      656D5F73 
 3637      74727563 
 3637      7400
 3638              	.LASF29:
 3639 0012 63766172 		.ascii	"cvar\000"
 3639      00
 3640              	.LASF59:
 3641 0017 74726967 		.ascii	"trigger_source\000"
 3641      6765725F 
 3641      736F7572 
 3641      636500
 3642              	.LASF19:
 3643 0026 72656731 		.ascii	"reg16\000"
 3643      3600
 3644              	.LASF65:
 3645 002c 77617665 		.ascii	"wave_offset\000"
 3645      5F6F6666 
 3645      73657400 
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 83


 3646              	.LASF2:
 3647 0038 73686F72 		.ascii	"short int\000"
 3647      7420696E 
 3647      7400
 3648              	.LASF21:
 3649 0042 73697A65 		.ascii	"sizetype\000"
 3649      74797065 
 3649      00
 3650              	.LASF62:
 3651 004b 57617665 		.ascii	"Waveform_Buffer\000"
 3651      666F726D 
 3651      5F427566 
 3651      66657200 
 3652              	.LASF68:
 3653 005b 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3653      43313120 
 3653      352E342E 
 3653      31203230 
 3653      31363036 
 3654 008e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3654      20726576 
 3654      6973696F 
 3654      6E203233 
 3654      37373135 
 3655 00c1 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3655      66756E63 
 3655      74696F6E 
 3655      2D736563 
 3655      74696F6E 
 3656              	.LASF49:
 3657 00e9 737A5465 		.ascii	"szTempBuffer\000"
 3657      6D704275 
 3657      66666572 
 3657      00
 3658              	.LASF45:
 3659 00f6 444D415F 		.ascii	"DMA_Channel_2_Chan\000"
 3659      4368616E 
 3659      6E656C5F 
 3659      325F4368 
 3659      616E00
 3660              	.LASF12:
 3661 0109 75696E74 		.ascii	"uint16\000"
 3661      313600
 3662              	.LASF33:
 3663 0110 696E6465 		.ascii	"index\000"
 3663      7800
 3664              	.LASF46:
 3665 0116 444D415F 		.ascii	"DMA_Channel_2_TD\000"
 3665      4368616E 
 3665      6E656C5F 
 3665      325F5444 
 3665      00
 3666              	.LASF63:
 3667 0127 57617665 		.ascii	"Waveform_Temp_Buffer\000"
 3667      666F726D 
 3667      5F54656D 
 3667      705F4275 
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 84


 3667      66666572 
 3668              	.LASF72:
 3669 013c 4765744C 		.ascii	"GetLastSampleIndex\000"
 3669      61737453 
 3669      616D706C 
 3669      65496E64 
 3669      657800
 3670              	.LASF31:
 3671 014f 48617264 		.ascii	"Hardware_Config\000"
 3671      77617265 
 3671      5F436F6E 
 3671      66696700 
 3672              	.LASF54:
 3673 015f 63436F6D 		.ascii	"cCommandsReady\000"
 3673      6D616E64 
 3673      73526561 
 3673      647900
 3674              	.LASF56:
 3675 016e 62436F6D 		.ascii	"bCommandReady\000"
 3675      6D616E64 
 3675      52656164 
 3675      7900
 3676              	.LASF30:
 3677 017c 77617665 		.ascii	"wave_temp\000"
 3677      5F74656D 
 3677      7000
 3678              	.LASF32:
 3679 0186 444D415F 		.ascii	"DMA_Config\000"
 3679      436F6E66 
 3679      696700
 3680              	.LASF64:
 3681 0191 77617665 		.ascii	"wave_gain\000"
 3681      5F676169 
 3681      6E00
 3682              	.LASF15:
 3683 019b 666C6F61 		.ascii	"float\000"
 3683      7400
 3684              	.LASF24:
 3685 01a1 656E6469 		.ascii	"ending_offset\000"
 3685      6E675F6F 
 3685      66667365 
 3685      7400
 3686              	.LASF28:
 3687 01af 66726571 		.ascii	"freq\000"
 3687      00
 3688              	.LASF6:
 3689 01b4 6C6F6E67 		.ascii	"long long int\000"
 3689      206C6F6E 
 3689      6720696E 
 3689      7400
 3690              	.LASF4:
 3691 01c2 6C6F6E67 		.ascii	"long int\000"
 3691      20696E74 
 3691      00
 3692              	.LASF53:
 3693 01cb 69577269 		.ascii	"iWrite\000"
 3693      746500
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 85


 3694              	.LASF39:
 3695 01d2 73747269 		.ascii	"string\000"
 3695      6E6700
 3696              	.LASF41:
 3697 01d9 44617461 		.ascii	"Data\000"
 3697      00
 3698              	.LASF61:
 3699 01de 5553425F 		.ascii	"USB_Out_Buffer\000"
 3699      4F75745F 
 3699      42756666 
 3699      657200
 3700              	.LASF27:
 3701 01ed 70686173 		.ascii	"phase_int\000"
 3701      655F696E 
 3701      7400
 3702              	.LASF43:
 3703 01f7 444D415F 		.ascii	"DMA_Channel_1_Chan\000"
 3703      4368616E 
 3703      6E656C5F 
 3703      315F4368 
 3703      616E00
 3704              	.LASF20:
 3705 020a 6C6F6E67 		.ascii	"long double\000"
 3705      20646F75 
 3705      626C6500 
 3706              	.LASF40:
 3707 0216 50757443 		.ascii	"PutChar\000"
 3707      68617200 
 3708              	.LASF1:
 3709 021e 756E7369 		.ascii	"unsigned char\000"
 3709      676E6564 
 3709      20636861 
 3709      7200
 3710              	.LASF25:
 3711 022c 61766172 		.ascii	"avar\000"
 3711      00
 3712              	.LASF35:
 3713 0231 436F6D6D 		.ascii	"CommandCheck\000"
 3713      616E6443 
 3713      6865636B 
 3713      00
 3714              	.LASF0:
 3715 023e 7369676E 		.ascii	"signed char\000"
 3715      65642063 
 3715      68617200 
 3716              	.LASF7:
 3717 024a 6C6F6E67 		.ascii	"long long unsigned int\000"
 3717      206C6F6E 
 3717      6720756E 
 3717      7369676E 
 3717      65642069 
 3718              	.LASF8:
 3719 0261 756E7369 		.ascii	"unsigned int\000"
 3719      676E6564 
 3719      20696E74 
 3719      00
 3720              	.LASF47:
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 86


 3721 026e 4368616E 		.ascii	"Channel_1_Data\000"
 3721      6E656C5F 
 3721      315F4461 
 3721      746100
 3722              	.LASF60:
 3723 027d 70726561 		.ascii	"preamp_trig\000"
 3723      6D705F74 
 3723      72696700 
 3724              	.LASF22:
 3725 0289 646D6163 		.ascii	"dmac_tdmem\000"
 3725      5F74646D 
 3725      656D00
 3726              	.LASF50:
 3727 0294 63436861 		.ascii	"cCharsReceived\000"
 3727      72735265 
 3727      63656976 
 3727      656400
 3728              	.LASF23:
 3729 02a3 73746174 		.ascii	"status\000"
 3729      757300
 3730              	.LASF66:
 3731 02aa 44696769 		.ascii	"Digital_Input_Status_Last\000"
 3731      74616C5F 
 3731      496E7075 
 3731      745F5374 
 3731      61747573 
 3732              	.LASF17:
 3733 02c4 63686172 		.ascii	"char\000"
 3733      00
 3734              	.LASF34:
 3735 02c9 6D61696E 		.ascii	"main\000"
 3735      00
 3736              	.LASF10:
 3737 02ce 696E7433 		.ascii	"int32_t\000"
 3737      325F7400 
 3738              	.LASF38:
 3739 02d6 63684861 		.ascii	"chHandle\000"
 3739      6E646C65 
 3739      00
 3740              	.LASF3:
 3741 02df 73686F72 		.ascii	"short unsigned int\000"
 3741      7420756E 
 3741      7369676E 
 3741      65642069 
 3741      6E7400
 3742              	.LASF11:
 3743 02f2 75696E74 		.ascii	"uint8\000"
 3743      3800
 3744              	.LASF52:
 3745 02f8 69526561 		.ascii	"iRead\000"
 3745      6400
 3746              	.LASF67:
 3747 02fe 44696769 		.ascii	"Digital_AutoUpdate\000"
 3747      74616C5F 
 3747      4175746F 
 3747      55706461 
 3747      746500
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 87


 3748              	.LASF13:
 3749 0311 75696E74 		.ascii	"uint32\000"
 3749      333200
 3750              	.LASF69:
 3751 0318 6D61696E 		.ascii	"main.c\000"
 3751      2E6300
 3752              	.LASF18:
 3753 031f 72656738 		.ascii	"reg8\000"
 3753      00
 3754              	.LASF5:
 3755 0324 6C6F6E67 		.ascii	"long unsigned int\000"
 3755      20756E73 
 3755      69676E65 
 3755      6420696E 
 3755      7400
 3756              	.LASF14:
 3757 0336 696E7433 		.ascii	"int32\000"
 3757      3200
 3758              	.LASF16:
 3759 033c 646F7562 		.ascii	"double\000"
 3759      6C6500
 3760              	.LASF70:
 3761 0343 433A5C43 		.ascii	"C:\\Cypress\\CyScope-master\\ScopeFreeSoC2\\ScopeFr"
 3761      79707265 
 3761      73735C43 
 3761      7953636F 
 3761      70652D6D 
 3762 0372 6565536F 		.ascii	"eeSoC2.cydsn\000"
 3762      43322E63 
 3762      7964736E 
 3762      00
 3763              	.LASF9:
 3764 037f 5F5F696E 		.ascii	"__int32_t\000"
 3764      7433325F 
 3764      7400
 3765              	.LASF55:
 3766 0389 737A436F 		.ascii	"szCommand\000"
 3766      6D6D616E 
 3766      6400
 3767              	.LASF57:
 3768 0393 70726561 		.ascii	"preamp_a\000"
 3768      6D705F61 
 3768      00
 3769              	.LASF58:
 3770 039c 70726561 		.ascii	"preamp_b\000"
 3770      6D705F62 
 3770      00
 3771              	.LASF51:
 3772 03a5 737A436F 		.ascii	"szCommandsBuffer\000"
 3772      6D6D616E 
 3772      64734275 
 3772      66666572 
 3772      00
 3773              	.LASF37:
 3774 03b6 50757453 		.ascii	"PutString\000"
 3774      7472696E 
 3774      6700
ARM GAS  C:\Users\howe\AppData\Local\Temp\ccWClqIW.s 			page 88


 3775              	.LASF36:
 3776 03c0 52656365 		.ascii	"ReceivedBytes\000"
 3776      69766564 
 3776      42797465 
 3776      7300
 3777              	.LASF42:
 3778 03ce 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3778      52784275 
 3778      66666572 
 3778      00
 3779              	.LASF48:
 3780 03db 4368616E 		.ascii	"Channel_2_Data\000"
 3780      6E656C5F 
 3780      325F4461 
 3780      746100
 3781              	.LASF44:
 3782 03ea 444D415F 		.ascii	"DMA_Channel_1_TD\000"
 3782      4368616E 
 3782      6E656C5F 
 3782      315F5444 
 3782      00
 3783              	.LASF26:
 3784 03fb 62766172 		.ascii	"bvar\000"
 3784      00
 3785              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
