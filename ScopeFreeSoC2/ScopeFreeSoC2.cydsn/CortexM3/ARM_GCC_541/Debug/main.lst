ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	DMA_Channel_1_Chan,1,1
  20              		.comm	DMA_Channel_1_TD,1,4
  21              		.comm	DMA_Channel_2_Chan,1,1
  22              		.comm	DMA_Channel_2_TD,1,4
  23              		.comm	Channel_1_Data,2048,4
  24              		.comm	Channel_2_Data,2048,4
  25              		.comm	szTempBuffer,64,4
  26              		.comm	cCharsReceived,1,1
  27              		.comm	szCommandsBuffer,4096,4
  28              		.comm	iRead,2,2
  29              		.comm	iWrite,2,2
  30              		.comm	cCommandsReady,2,2
  31              		.comm	szCommand,64,4
  32              		.comm	bCommandReady,1,1
  33              		.comm	preamp_a,1,1
  34              		.comm	preamp_b,1,1
  35              		.comm	trigger_source,1,1
  36              		.comm	preamp_trig,1,1
  37              		.comm	USB_Out_Buffer,64,4
  38              		.comm	Waveform_Buffer,256,4
  39              		.comm	Waveform_Temp_Buffer,256,4
  40              		.global	wave_gain
  41              		.bss
  42              		.type	wave_gain, %object
  43              		.size	wave_gain, 1
  44              	wave_gain:
  45 0000 00       		.space	1
  46              		.global	wave_offset
  47              		.type	wave_offset, %object
  48              		.size	wave_offset, 1
  49              	wave_offset:
  50 0001 00       		.space	1
  51              		.comm	Noise_Adjusted,1,1
  52              		.comm	Digital_Input_Status_Last,1,1
  53              		.comm	Digital_AutoUpdate,1,1
  54              		.global	__aeabi_ui2f
  55              		.global	__aeabi_fmul
  56              		.global	__aeabi_f2d
  57              		.global	__aeabi_ddiv
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 2


  58              		.global	__aeabi_dadd
  59              		.global	__aeabi_d2f
  60              		.global	__aeabi_fcmpgt
  61              		.global	__aeabi_f2uiz
  62              		.section	.rodata
  63              		.align	2
  64              	.LC0:
  65 0000 2000     		.ascii	" \000"
  66 0002 0000     		.align	2
  67              	.LC1:
  68 0004 2A537973 		.ascii	"*Syscomp CircuitGear V1.3\012\015\000"
  68      636F6D70 
  68      20436972 
  68      63756974 
  68      47656172 
  69              		.align	2
  70              	.LC2:
  71 0020 25687500 		.ascii	"%hu\000"
  72              		.global	__aeabi_dmul
  73              		.global	__aeabi_fdiv
  74              		.global	__aeabi_i2d
  75              		.global	__aeabi_fcmple
  76              		.global	__aeabi_fcmpge
  77              		.global	__aeabi_dsub
  78              		.global	__aeabi_d2uiz
  79              		.align	2
  80              	.LC3:
  81 0024 4572726F 		.ascii	"Error: Unrecognized Scope Command\012\015\000"
  81      723A2055 
  81      6E726563 
  81      6F676E69 
  81      7A656420 
  82              		.align	2
  83              	.LC4:
  84 0048 4572726F 		.ascii	"Error: Unknown Command\012\015\000"
  84      723A2055 
  84      6E6B6E6F 
  84      776E2043 
  84      6F6D6D61 
  85              		.section	.text.main,"ax",%progbits
  86              		.align	2
  87              		.global	main
  88              		.thumb
  89              		.thumb_func
  90              		.type	main, %function
  91              	main:
  92              	.LFB64:
  93              		.file 1 "main.c"
   1:main.c        **** /* ========================================
   2:main.c        ****  *
   3:main.c        ****  * Copyright Cypress Semiconductor, 2016
   4:main.c        ****  * All Rights Reserved
   5:main.c        ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:main.c        ****  *
   7:main.c        ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:main.c        ****  * WHICH IS THE PROPERTY OF Cypress Semiconductor.
   9:main.c        ****  *
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 3


  10:main.c        ****  * ========================================
  11:main.c        **** */
  12:main.c        **** #include <device.h>
  13:main.c        **** #include <string.h>
  14:main.c        **** #include <stdio.h>
  15:main.c        **** 
  16:main.c        **** void DMA_Config(void);
  17:main.c        **** void Hardware_Config(void);
  18:main.c        **** uint16 GetLastSampleIndex(uint8 chHandle);
  19:main.c        **** void CommandCheck(void);
  20:main.c        **** void PutString(char * string);  // actually checks to see if the CDC device is ready before sending
  21:main.c        **** void PutChar(char Data);
  22:main.c        **** 
  23:main.c        **** // 2047 is the max buffer size in samples
  24:main.c        **** #define BUFFER_SIZE 1024
  25:main.c        **** 
  26:main.c        **** // trigger setup control register definitions
  27:main.c        **** #define FALLING_EDGE_TRIGGERED 0x01
  28:main.c        **** #define RISING_EDGE_TRIGGERED 0x02
  29:main.c        **** #define EITHER_EDGE_TRIGGERED 0x04
  30:main.c        **** #define EXTERNAL_TRIGGERED 0x08
  31:main.c        **** 
  32:main.c        **** #define TRIGGER_MASK 0x0F
  33:main.c        **** 
  34:main.c        **** #define MANUAL_TRIGGER 0x10
  35:main.c        **** #define TRIGGER_ARM 0x40
  36:main.c        **** #define RESET_PWM 0x80
  37:main.c        **** 
  38:main.c        **** // analog mux channel selection defines
  39:main.c        **** #define SCOPE_CHANNEL_1 0
  40:main.c        **** #define SCOPE_CHANNEL_2 1
  41:main.c        **** 
  42:main.c        **** // status register defines
  43:main.c        **** #define COMP_LEVEL 0x01
  44:main.c        **** #define TRIGGERED 0x02
  45:main.c        **** #define CAPTURE_COMPLETE 0x04
  46:main.c        **** 
  47:main.c        **** // Wave_Control control register definitions
  48:main.c        **** #define WAVE_SELECT_MASK 0x01
  49:main.c        **** #define WAVE_SELECT_WAVE 0x00
  50:main.c        **** #define WAVE_SELECT_NOISE 0x01
  51:main.c        **** 
  52:main.c        **** /* DMA Configuration for DMA_Channel_1 */
  53:main.c        **** #define DMA_Channel_1_BYTES_PER_BURST 2
  54:main.c        **** #define DMA_Channel_1_REQUEST_PER_BURST 1
  55:main.c        **** #define DMA_Channel_1_SRC_BASE (CYDEV_PERIPH_BASE)
  56:main.c        **** #define DMA_Channel_1_DST_BASE (CYDEV_SRAM_BASE)
  57:main.c        **** 
  58:main.c        **** /* DMA Configuration for DMA_Channel_2 */
  59:main.c        **** #define DMA_Channel_2_BYTES_PER_BURST 2
  60:main.c        **** #define DMA_Channel_2_REQUEST_PER_BURST 1
  61:main.c        **** #define DMA_Channel_2_SRC_BASE (CYDEV_PERIPH_BASE)
  62:main.c        **** #define DMA_Channel_2_DST_BASE (CYDEV_SRAM_BASE)
  63:main.c        **** 
  64:main.c        **** /* Variable declarations for DMA_Channel_1 */
  65:main.c        **** /* Move these variable declarations to the top of the function */
  66:main.c        **** uint8 DMA_Channel_1_Chan;
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 4


  67:main.c        **** uint8 DMA_Channel_1_TD[1];
  68:main.c        **** 
  69:main.c        **** /* Variable declarations for DMA_Channel_2 */
  70:main.c        **** /* Move these variable declarations to the top of the function */
  71:main.c        **** uint8 DMA_Channel_2_Chan;
  72:main.c        **** uint8 DMA_Channel_2_TD[1];
  73:main.c        **** 
  74:main.c        **** // RAM data arrays for storing the sampled data
  75:main.c        **** uint16 Channel_1_Data[BUFFER_SIZE];
  76:main.c        **** uint16 Channel_2_Data[BUFFER_SIZE];
  77:main.c        **** 
  78:main.c        **** // USB UART variables
  79:main.c        **** #define COMMAND_BUFFER_SIZE 64
  80:main.c        **** char szTempBuffer[COMMAND_BUFFER_SIZE];
  81:main.c        **** uint8 cCharsReceived;
  82:main.c        **** 
  83:main.c        **** #define CIRCULAR_BUFFER_SIZE 4096
  84:main.c        **** char szCommandsBuffer[CIRCULAR_BUFFER_SIZE]; // need to make this many times bigger to deal with th
  85:main.c        **** uint16 iRead, iWrite;
  86:main.c        **** uint16 cCommandsReady;
  87:main.c        **** 
  88:main.c        **** char szCommand[COMMAND_BUFFER_SIZE];
  89:main.c        **** uint8 bCommandReady;
  90:main.c        **** 
  91:main.c        **** // scope status variable
  92:main.c        **** uint8 preamp_a, preamp_b, trigger_source, preamp_trig;
  93:main.c        **** 
  94:main.c        **** // for dumping data out (its 64 bytes, but if you want anything less, it has to be a multiple of 4)
  95:main.c        **** // also a good idea to make it a multiple of the ADC buffer size, defined above
  96:main.c        **** #define USBUART_BUFFER_SIZE 64
  97:main.c        **** uint8 USB_Out_Buffer[USBUART_BUFFER_SIZE];
  98:main.c        **** 
  99:main.c        **** // Waveform generator variables
 100:main.c        **** #define WAVEFORM_BUFFER_SIZE 256
 101:main.c        **** uint8 Waveform_Buffer[WAVEFORM_BUFFER_SIZE];
 102:main.c        **** uint8 Waveform_Temp_Buffer[WAVEFORM_BUFFER_SIZE];
 103:main.c        **** uint8 wave_gain = 0;
 104:main.c        **** uint8 wave_offset = 0;
 105:main.c        **** 
 106:main.c        **** //GJL
 107:main.c        **** // Buffer for noise output after applying amplitude and offset
 108:main.c        **** uint8 Noise_Adjusted;
 109:main.c        **** 
 110:main.c        **** // digital input last state variable
 111:main.c        **** uint8 Digital_Input_Status_Last;
 112:main.c        **** uint8 Digital_AutoUpdate;
 113:main.c        **** 
 114:main.c        **** // For the SAR ADC to run at 18MHz, it *must* have a 50% duty cycle. 
 115:main.c        **** // There are 3 frequencies from the PLL that satisfy
 116:main.c        **** // generating an 18 Mhz clock from integer divides off the PLL: 36 Mhz
 117:main.c        **** // 54 Mhz and 72 Mhz.  Of these three choices, 54 Mhz requires a divide of
 118:main.c        **** // 3 which does not produce a 50% duty cycle.
 119:main.c        **** 
 120:main.c        **** int main()
 121:main.c        **** {
  94              		.loc 1 121 0
  95              		.cfi_startproc
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 5


  96              		@ args = 0, pretend = 0, frame = 32
  97              		@ frame_needed = 1, uses_anonymous_args = 0
  98 0000 B0B5     		push	{r4, r5, r7, lr}
  99              		.cfi_def_cfa_offset 16
 100              		.cfi_offset 4, -16
 101              		.cfi_offset 5, -12
 102              		.cfi_offset 7, -8
 103              		.cfi_offset 14, -4
 104 0002 88B0     		sub	sp, sp, #32
 105              		.cfi_def_cfa_offset 48
 106 0004 00AF     		add	r7, sp, #0
 107              		.cfi_def_cfa_register 7
 122:main.c        **** 	uint8 status;
 123:main.c        **** 	uint16 ending_offset;
 124:main.c        **** 	char * psz;
 125:main.c        **** 	uint16 avar, bvar, i;
 126:main.c        **** 	uint32 phase_int;
 127:main.c        **** 	float freq;
 128:main.c        **** 	float cvar;
 129:main.c        ****     float wave_temp;
 130:main.c        ****  
 131:main.c        ****     Hardware_Config();
 108              		.loc 1 131 0
 109 0006 FFF7FEFF 		bl	Hardware_Config
 132:main.c        ****     DMA_Config();
 110              		.loc 1 132 0
 111 000a FFF7FEFF 		bl	DMA_Config
 112              	.L113:
 133:main.c        **** 
 134:main.c        ****     for(;;)
 135:main.c        ****     {
 136:main.c        **** 	
 137:main.c        **** 		CommandCheck();
 113              		.loc 1 137 0
 114 000e FFF7FEFF 		bl	CommandCheck
 138:main.c        **** 		
 139:main.c        **** 		//GJL Adjust amplitude and offset for noise output
 140:main.c        **** 		wave_temp = (uint8) *PRS_SEED_PTR;
 115              		.loc 1 140 0
 116 0012 BF4B     		ldr	r3, .L122+8
 117 0014 1B88     		ldrh	r3, [r3]	@ movhi
 118 0016 9BB2     		uxth	r3, r3
 119 0018 DBB2     		uxtb	r3, r3
 120 001a 1846     		mov	r0, r3
 121 001c FFF7FEFF 		bl	__aeabi_ui2f
 122 0020 0346     		mov	r3, r0
 123 0022 3B61     		str	r3, [r7, #16]	@ float
 141:main.c        **** 		wave_temp = (((float) wave_temp) * ((float)wave_gain)/255.0) + ((float)wave_offset);
 124              		.loc 1 141 0
 125 0024 BB4B     		ldr	r3, .L122+12
 126 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 127 0028 1846     		mov	r0, r3
 128 002a FFF7FEFF 		bl	__aeabi_ui2f
 129 002e 0346     		mov	r3, r0
 130 0030 3969     		ldr	r1, [r7, #16]	@ float
 131 0032 1846     		mov	r0, r3
 132 0034 FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 6


 133 0038 0346     		mov	r3, r0
 134 003a 1846     		mov	r0, r3
 135 003c FFF7FEFF 		bl	__aeabi_f2d
 136 0040 B1A3     		adr	r3, .L122
 137 0042 D3E90023 		ldrd	r2, [r3]
 138 0046 FFF7FEFF 		bl	__aeabi_ddiv
 139 004a 0346     		mov	r3, r0
 140 004c 0C46     		mov	r4, r1
 141 004e 2546     		mov	r5, r4
 142 0050 1C46     		mov	r4, r3
 143 0052 B14B     		ldr	r3, .L122+16
 144 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 145 0056 1846     		mov	r0, r3
 146 0058 FFF7FEFF 		bl	__aeabi_ui2f
 147 005c 0346     		mov	r3, r0
 148 005e 1846     		mov	r0, r3
 149 0060 FFF7FEFF 		bl	__aeabi_f2d
 150 0064 0246     		mov	r2, r0
 151 0066 0B46     		mov	r3, r1
 152 0068 2046     		mov	r0, r4
 153 006a 2946     		mov	r1, r5
 154 006c FFF7FEFF 		bl	__aeabi_dadd
 155 0070 0346     		mov	r3, r0
 156 0072 0C46     		mov	r4, r1
 157 0074 1846     		mov	r0, r3
 158 0076 2146     		mov	r1, r4
 159 0078 FFF7FEFF 		bl	__aeabi_d2f
 160 007c 0346     		mov	r3, r0
 161 007e 3B61     		str	r3, [r7, #16]	@ float
 142:main.c        **** 		if(wave_temp > 255.0)
 162              		.loc 1 142 0
 163 0080 A649     		ldr	r1, .L122+20
 164 0082 3869     		ldr	r0, [r7, #16]	@ float
 165 0084 FFF7FEFF 		bl	__aeabi_fcmpgt
 166 0088 0346     		mov	r3, r0
 167 008a 002B     		cmp	r3, #0
 168 008c 01D0     		beq	.L2
 143:main.c        **** 		{
 144:main.c        **** 			wave_temp = 255.0;
 169              		.loc 1 144 0
 170 008e A34B     		ldr	r3, .L122+20
 171 0090 3B61     		str	r3, [r7, #16]	@ float
 172              	.L2:
 145:main.c        **** 		}
 146:main.c        **** 		Noise_Adjusted = (uint8) wave_temp;
 173              		.loc 1 146 0
 174 0092 3869     		ldr	r0, [r7, #16]	@ float
 175 0094 FFF7FEFF 		bl	__aeabi_f2uiz
 176 0098 0346     		mov	r3, r0
 177 009a DAB2     		uxtb	r2, r3
 178 009c A04B     		ldr	r3, .L122+24
 179 009e 1A70     		strb	r2, [r3]
 147:main.c        **** 
 148:main.c        **** 		if(bCommandReady != 0)
 180              		.loc 1 148 0
 181 00a0 A04B     		ldr	r3, .L122+28
 182 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 7


 183 00a4 002B     		cmp	r3, #0
 184 00a6 00F0A486 		beq	.L4
 149:main.c        **** 		{
 150:main.c        **** 			psz = strtok(szCommand, " ");
 185              		.loc 1 150 0
 186 00aa 9F49     		ldr	r1, .L122+32
 187 00ac 9F48     		ldr	r0, .L122+36
 188 00ae FFF7FEFF 		bl	strtok
 189 00b2 F860     		str	r0, [r7, #12]
 151:main.c        **** 			if(*psz == 'i')
 190              		.loc 1 151 0
 191 00b4 FB68     		ldr	r3, [r7, #12]
 192 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 193 00b8 692B     		cmp	r3, #105
 194 00ba 04D1     		bne	.L5
 152:main.c        **** 			{
 153:main.c        **** 				// it all started here.  NOTE!  \n\r THE ORDER MATTERS!
 154:main.c        **** 				PutString("*Syscomp CircuitGear V1.3\n\r");
 195              		.loc 1 154 0
 196 00bc 9C48     		ldr	r0, .L122+40
 197 00be FFF7FEFF 		bl	PutString
 198 00c2 00F093BE 		b	.L6
 199              	.L5:
 155:main.c        **** 			}
 156:main.c        **** 			else if(*psz == 'D')
 200              		.loc 1 156 0
 201 00c6 FB68     		ldr	r3, [r7, #12]
 202 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 203 00ca 442B     		cmp	r3, #68
 204 00cc 40F0EE80 		bne	.L7
 157:main.c        **** 			{
 158:main.c        **** 				// Digital I/O commands
 159:main.c        **** 				
 160:main.c        **** 				psz = strtok(0, " ");
 205              		.loc 1 160 0
 206 00d0 9549     		ldr	r1, .L122+32
 207 00d2 0020     		movs	r0, #0
 208 00d4 FFF7FEFF 		bl	strtok
 209 00d8 F860     		str	r0, [r7, #12]
 161:main.c        **** 				if(*psz == 'O')
 210              		.loc 1 161 0
 211 00da FB68     		ldr	r3, [r7, #12]
 212 00dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 213 00de 4F2B     		cmp	r3, #79
 214 00e0 11D1     		bne	.L8
 162:main.c        **** 				{
 163:main.c        **** 					// Digital output
 164:main.c        **** 					// D O N, where N is the output byte value as an ascii 8 bit number
 165:main.c        **** 					psz = strtok(0, " ");
 215              		.loc 1 165 0
 216 00e2 9149     		ldr	r1, .L122+32
 217 00e4 0020     		movs	r0, #0
 218 00e6 FFF7FEFF 		bl	strtok
 219 00ea F860     		str	r0, [r7, #12]
 166:main.c        **** 					sscanf(psz,"%hu", &avar);
 220              		.loc 1 166 0
 221 00ec BB1C     		adds	r3, r7, #2
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 8


 222 00ee 1A46     		mov	r2, r3
 223 00f0 9049     		ldr	r1, .L122+44
 224 00f2 F868     		ldr	r0, [r7, #12]
 225 00f4 FFF7FEFF 		bl	sscanf
 167:main.c        **** 					
 168:main.c        **** 					Digital_Out_Control_Write((uint8) avar);
 226              		.loc 1 168 0
 227 00f8 7B88     		ldrh	r3, [r7, #2]
 228 00fa DBB2     		uxtb	r3, r3
 229 00fc 1846     		mov	r0, r3
 230 00fe FFF7FEFF 		bl	Digital_Out_Control_Write
 231 0102 00F073BE 		b	.L6
 232              	.L8:
 169:main.c        **** 				}
 170:main.c        **** 				else if(*psz == 'I')
 233              		.loc 1 170 0
 234 0106 FB68     		ldr	r3, [r7, #12]
 235 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 236 010a 492B     		cmp	r3, #73
 237 010c 0AD1     		bne	.L9
 171:main.c        **** 				{
 172:main.c        **** 					// reads digital inputs
 173:main.c        **** 					// returns Ix where x is an 8 bit (binary) value representing the status
 174:main.c        **** 					// of the digital input pins
 175:main.c        **** 					
 176:main.c        **** 					PutChar('I');
 238              		.loc 1 176 0
 239 010e 4920     		movs	r0, #73
 240 0110 FFF7FEFF 		bl	PutChar
 177:main.c        **** 					PutChar((uint8) Digital_Input_Status_Read());
 241              		.loc 1 177 0
 242 0114 FFF7FEFF 		bl	Digital_Input_Status_Read
 243 0118 0346     		mov	r3, r0
 244 011a 1846     		mov	r0, r3
 245 011c FFF7FEFF 		bl	PutChar
 246 0120 00F064BE 		b	.L6
 247              	.L9:
 178:main.c        **** 				}
 179:main.c        **** 				else if(*psz == 'A')
 248              		.loc 1 179 0
 249 0124 FB68     		ldr	r3, [r7, #12]
 250 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 251 0128 412B     		cmp	r3, #65
 252 012a 0DD1     		bne	.L10
 180:main.c        **** 				{
 181:main.c        **** 					Digital_AutoUpdate = 1;
 253              		.loc 1 181 0
 254 012c 824B     		ldr	r3, .L122+48
 255 012e 0122     		movs	r2, #1
 256 0130 1A70     		strb	r2, [r3]
 182:main.c        ****                     PutChar('I');
 257              		.loc 1 182 0
 258 0132 4920     		movs	r0, #73
 259 0134 FFF7FEFF 		bl	PutChar
 183:main.c        **** 					PutChar((uint8) Digital_Input_Status_Read());
 260              		.loc 1 183 0
 261 0138 FFF7FEFF 		bl	Digital_Input_Status_Read
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 9


 262 013c 0346     		mov	r3, r0
 263 013e 1846     		mov	r0, r3
 264 0140 FFF7FEFF 		bl	PutChar
 265 0144 00F052BE 		b	.L6
 266              	.L10:
 184:main.c        **** 				}
 185:main.c        **** 				else if(*psz == 'a')
 267              		.loc 1 185 0
 268 0148 FB68     		ldr	r3, [r7, #12]
 269 014a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 270 014c 612B     		cmp	r3, #97
 271 014e 04D1     		bne	.L11
 186:main.c        **** 				{
 187:main.c        **** 					Digital_AutoUpdate = 0;
 272              		.loc 1 187 0
 273 0150 794B     		ldr	r3, .L122+48
 274 0152 0022     		movs	r2, #0
 275 0154 1A70     		strb	r2, [r3]
 276 0156 00F049BE 		b	.L6
 277              	.L11:
 188:main.c        **** 				}
 189:main.c        **** 				else if(*psz == 'F')
 278              		.loc 1 189 0
 279 015a FB68     		ldr	r3, [r7, #12]
 280 015c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 281 015e 462B     		cmp	r3, #70
 282 0160 66D1     		bne	.L12
 190:main.c        **** 				{
 191:main.c        **** 					// set PWM output frequency
 192:main.c        **** 			    	// D F N where N is an 8 bit ascii value that corresponds to these frequencies
 193:main.c        **** 					// 0 72 Khz
 194:main.c        **** 					// 1 36 Khz
 195:main.c        **** 					// 2 9 Khz
 196:main.c        **** 					// 3 4.5 Khz
 197:main.c        **** 					// 4 1.125 Khz
 198:main.c        **** 					// 5 564 Hz
 199:main.c        **** 					// 6 281 Hz
 200:main.c        **** 					// 7 141 Hz
 201:main.c        **** 					// 8 70 Hz
 202:main.c        **** 					// 9 35 Hz
 203:main.c        **** 					// 10 - 255 disabled
 204:main.c        **** 					psz = strtok(0, " ");
 283              		.loc 1 204 0
 284 0162 7149     		ldr	r1, .L122+32
 285 0164 0020     		movs	r0, #0
 286 0166 FFF7FEFF 		bl	strtok
 287 016a F860     		str	r0, [r7, #12]
 205:main.c        **** 					sscanf(psz,"%hu", &avar);
 288              		.loc 1 205 0
 289 016c BB1C     		adds	r3, r7, #2
 290 016e 1A46     		mov	r2, r3
 291 0170 7049     		ldr	r1, .L122+44
 292 0172 F868     		ldr	r0, [r7, #12]
 293 0174 FFF7FEFF 		bl	sscanf
 206:main.c        **** 					
 207:main.c        **** 					switch(avar)
 294              		.loc 1 207 0
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 10


 295 0178 7B88     		ldrh	r3, [r7, #2]
 296 017a 092B     		cmp	r3, #9
 297 017c 00F23586 		bhi	.L121
 298 0180 01A2     		adr	r2, .L15
 299 0182 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 300 0186 00BF     		.p2align 2
 301              	.L15:
 302 0188 B1010000 		.word	.L14+1
 303 018c BD010000 		.word	.L16+1
 304 0190 C9010000 		.word	.L17+1
 305 0194 D5010000 		.word	.L18+1
 306 0198 E1010000 		.word	.L19+1
 307 019c ED010000 		.word	.L20+1
 308 01a0 F9010000 		.word	.L21+1
 309 01a4 07020000 		.word	.L22+1
 310 01a8 15020000 		.word	.L23+1
 311 01ac 23020000 		.word	.L24+1
 312              		.p2align 1
 313              	.L14:
 208:main.c        **** 					{
 209:main.c        **** 						// GJL - change PWM period to 250 to get exact frequency
 210:main.c        ****                         case 0: // (36 Mhz / 250 (period of the PWM)) / 72 Khz = 2
 211:main.c        **** 							PWM_Clock_SetDividerValue(2);
 314              		.loc 1 211 0
 315 01b0 0121     		movs	r1, #1
 316 01b2 0120     		movs	r0, #1
 317 01b4 FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 212:main.c        **** 							break;
 318              		.loc 1 212 0
 319 01b8 00F018BE 		b	.L6
 320              	.L16:
 213:main.c        **** 							
 214:main.c        **** 						case 1:
 215:main.c        **** 							PWM_Clock_SetDividerValue(4);
 321              		.loc 1 215 0
 322 01bc 0121     		movs	r1, #1
 323 01be 0320     		movs	r0, #3
 324 01c0 FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 216:main.c        **** 							break;
 325              		.loc 1 216 0
 326 01c4 00F012BE 		b	.L6
 327              	.L17:
 217:main.c        **** 							
 218:main.c        **** 						case 2:
 219:main.c        **** 							PWM_Clock_SetDividerValue(16);
 328              		.loc 1 219 0
 329 01c8 0121     		movs	r1, #1
 330 01ca 0F20     		movs	r0, #15
 331 01cc FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 220:main.c        **** 							break;
 332              		.loc 1 220 0
 333 01d0 00F00CBE 		b	.L6
 334              	.L18:
 221:main.c        **** 						
 222:main.c        **** 						case 3:
 223:main.c        **** 							PWM_Clock_SetDividerValue(32);
 335              		.loc 1 223 0
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 11


 336 01d4 0121     		movs	r1, #1
 337 01d6 1F20     		movs	r0, #31
 338 01d8 FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 224:main.c        **** 							break;
 339              		.loc 1 224 0
 340 01dc 00F006BE 		b	.L6
 341              	.L19:
 225:main.c        **** 							
 226:main.c        **** 						case 4:
 227:main.c        **** 							PWM_Clock_SetDividerValue(128);
 342              		.loc 1 227 0
 343 01e0 0121     		movs	r1, #1
 344 01e2 7F20     		movs	r0, #127
 345 01e4 FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 228:main.c        **** 							break;
 346              		.loc 1 228 0
 347 01e8 00F000BE 		b	.L6
 348              	.L20:
 229:main.c        **** 							
 230:main.c        **** 						case 5:
 231:main.c        **** 							PWM_Clock_SetDividerValue(255);
 349              		.loc 1 231 0
 350 01ec 0121     		movs	r1, #1
 351 01ee FE20     		movs	r0, #254
 352 01f0 FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 232:main.c        **** 							break;
 353              		.loc 1 232 0
 354 01f4 00F0FABD 		b	.L6
 355              	.L21:
 233:main.c        **** 							
 234:main.c        **** 						case 6:
 235:main.c        **** 							PWM_Clock_SetDividerValue(512);
 356              		.loc 1 235 0
 357 01f8 0121     		movs	r1, #1
 358 01fa 40F2FF10 		movw	r0, #511
 359 01fe FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 236:main.c        **** 							break;
 360              		.loc 1 236 0
 361 0202 00F0F3BD 		b	.L6
 362              	.L22:
 237:main.c        **** 							
 238:main.c        **** 						case 7:
 239:main.c        **** 							PWM_Clock_SetDividerValue(1021);
 363              		.loc 1 239 0
 364 0206 0121     		movs	r1, #1
 365 0208 4FF47F70 		mov	r0, #1020
 366 020c FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 240:main.c        **** 							break;
 367              		.loc 1 240 0
 368 0210 00F0ECBD 		b	.L6
 369              	.L23:
 241:main.c        **** 							
 242:main.c        **** 						case 8:
 243:main.c        **** 							PWM_Clock_SetDividerValue(2057);
 370              		.loc 1 243 0
 371 0214 0121     		movs	r1, #1
 372 0216 40F60800 		movw	r0, #2056
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 12


 373 021a FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 244:main.c        **** 							break;
 374              		.loc 1 244 0
 375 021e 00F0E5BD 		b	.L6
 376              	.L24:
 245:main.c        **** 						
 246:main.c        **** 						case 9:
 247:main.c        **** 							PWM_Clock_SetDividerValue(4114);
 377              		.loc 1 247 0
 378 0222 0121     		movs	r1, #1
 379 0224 41F21100 		movw	r0, #4113
 380 0228 FFF7FEFF 		bl	PWM_Clock_SetDividerRegister
 248:main.c        **** 							break;
 381              		.loc 1 248 0
 382 022c 00F0DEBD 		b	.L6
 383              	.L12:
 249:main.c        **** 							
 250:main.c        **** 						default:
 251:main.c        **** 							//PWM_Stop();
 252:main.c        **** 							break;
 253:main.c        **** 					}
 254:main.c        **** 				}
 255:main.c        **** 				else if(*psz == 'D')
 384              		.loc 1 255 0
 385 0230 FB68     		ldr	r3, [r7, #12]
 386 0232 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 387 0234 442B     		cmp	r3, #68
 388 0236 1BD1     		bne	.L26
 256:main.c        **** 				{
 257:main.c        **** 					// Set PWM Duty cycle
 258:main.c        **** 					// D D N where N is an 8 bit ascii value representing the duty cycle
 259:main.c        **** 					// from 0 to 255
 260:main.c        **** 					psz = strtok(0, " ");
 389              		.loc 1 260 0
 390 0238 3B49     		ldr	r1, .L122+32
 391 023a 0020     		movs	r0, #0
 392 023c FFF7FEFF 		bl	strtok
 393 0240 F860     		str	r0, [r7, #12]
 261:main.c        **** 					sscanf(psz,"%hu", &avar);
 394              		.loc 1 261 0
 395 0242 BB1C     		adds	r3, r7, #2
 396 0244 1A46     		mov	r2, r3
 397 0246 3B49     		ldr	r1, .L122+44
 398 0248 F868     		ldr	r0, [r7, #12]
 399 024a FFF7FEFF 		bl	sscanf
 262:main.c        **** 					// GJL: Limit upper compare value to 249 since period is 249
 263:main.c        ****                     if(avar > 249)
 400              		.loc 1 263 0
 401 024e 7B88     		ldrh	r3, [r7, #2]
 402 0250 F92B     		cmp	r3, #249
 403 0252 01D9     		bls	.L27
 264:main.c        ****                     {
 265:main.c        ****                         avar = 249;
 404              		.loc 1 265 0
 405 0254 F923     		movs	r3, #249
 406 0256 7B80     		strh	r3, [r7, #2]	@ movhi
 407              	.L27:
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 13


 266:main.c        ****                     }
 267:main.c        **** 					Digital_PWM_WriteCompare1((uint8) avar);
 408              		.loc 1 267 0
 409 0258 7B88     		ldrh	r3, [r7, #2]
 410 025a DBB2     		uxtb	r3, r3
 411 025c 1846     		mov	r0, r3
 412 025e FFF7FEFF 		bl	Digital_PWM_WriteCompare1
 268:main.c        **** 					Digital_PWM_WriteCompare2((uint8) avar);
 413              		.loc 1 268 0
 414 0262 7B88     		ldrh	r3, [r7, #2]
 415 0264 DBB2     		uxtb	r3, r3
 416 0266 1846     		mov	r0, r3
 417 0268 FFF7FEFF 		bl	Digital_PWM_WriteCompare2
 418 026c 00F0BEBD 		b	.L6
 419              	.L26:
 269:main.c        **** 				}
 270:main.c        **** 				else if(*psz == '!')
 420              		.loc 1 270 0
 421 0270 FB68     		ldr	r3, [r7, #12]
 422 0272 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 423 0274 212B     		cmp	r3, #33
 424 0276 40F0B985 		bne	.L6
 271:main.c        **** 				{
 272:main.c        **** 					// interrupt line configuration.  not implemented yet
 273:main.c        **** 					// sends back a '!' character when the interrupt condition is met
 274:main.c        **** 					// D ! M where M is the mode:
 275:main.c        **** 					// M = D : Disable
 276:main.c        **** 					// M = R : Rising Edge
 277:main.c        **** 					// M = F : Falling Edge
 278:main.c        **** 					// M = H : High Level
 279:main.c        **** 					// M = L : Low Level
 280:main.c        **** 					psz = strtok(0, " ");
 425              		.loc 1 280 0
 426 027a 2B49     		ldr	r1, .L122+32
 427 027c 0020     		movs	r0, #0
 428 027e FFF7FEFF 		bl	strtok
 429 0282 F860     		str	r0, [r7, #12]
 281:main.c        **** 					
 282:main.c        **** 					if(*psz == 'D')
 430              		.loc 1 282 0
 431 0284 FB68     		ldr	r3, [r7, #12]
 432 0286 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 433 0288 442B     		cmp	r3, #68
 434 028a 00F0AF85 		beq	.L6
 283:main.c        **** 					{
 284:main.c        **** 					}
 285:main.c        **** 					else if(*psz == 'R')
 435              		.loc 1 285 0
 436 028e FB68     		ldr	r3, [r7, #12]
 437 0290 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 438 0292 522B     		cmp	r3, #82
 439 0294 00F0AA85 		beq	.L6
 286:main.c        **** 					{
 287:main.c        **** 					}
 288:main.c        **** 					else if(*psz == 'F')
 440              		.loc 1 288 0
 441 0298 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 14


 442 029a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 443 029c 462B     		cmp	r3, #70
 444 029e 00F0A585 		beq	.L6
 289:main.c        **** 					{
 290:main.c        **** 					}
 291:main.c        **** 					else if(*psz == 'H')
 445              		.loc 1 291 0
 446 02a2 FB68     		ldr	r3, [r7, #12]
 447 02a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 448 02a6 482B     		cmp	r3, #72
 449 02a8 00F0A0BD 		b	.L6
 450              	.L7:
 292:main.c        **** 					{
 293:main.c        **** 					}
 294:main.c        **** 					else if(*psz == 'L')
 295:main.c        **** 					{
 296:main.c        **** 					}
 297:main.c        **** 					
 298:main.c        **** 					// if trigger condition is met, send back the '!' character
 299:main.c        **** 					//PutChar('!');
 300:main.c        **** 				}
 301:main.c        **** 			}
 302:main.c        **** 			else if(*psz == 'W')
 451              		.loc 1 302 0
 452 02ac FB68     		ldr	r3, [r7, #12]
 453 02ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 454 02b0 572B     		cmp	r3, #87
 455 02b2 40F02382 		bne	.L28
 303:main.c        **** 			{
 304:main.c        **** 				// waveform generator commands
 305:main.c        **** 				
 306:main.c        **** 				psz = strtok(0, " ");
 456              		.loc 1 306 0
 457 02b6 1C49     		ldr	r1, .L122+32
 458 02b8 0020     		movs	r0, #0
 459 02ba FFF7FEFF 		bl	strtok
 460 02be F860     		str	r0, [r7, #12]
 307:main.c        **** 				if(*psz == 'S')
 461              		.loc 1 307 0
 462 02c0 FB68     		ldr	r3, [r7, #12]
 463 02c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 464 02c4 532B     		cmp	r3, #83
 465 02c6 3BD1     		bne	.L29
 308:main.c        **** 				{
 309:main.c        **** 					// sample data into the buffer
 310:main.c        **** 					// command is W S ADDR DATA
 311:main.c        **** 					// ADDR is the 8 bit address 0 - 255
 312:main.c        **** 					// DATA is the waveform amplitude 0 - 255
 313:main.c        **** 					psz = strtok(0, " ");
 466              		.loc 1 313 0
 467 02c8 1749     		ldr	r1, .L122+32
 468 02ca 0020     		movs	r0, #0
 469 02cc FFF7FEFF 		bl	strtok
 470 02d0 F860     		str	r0, [r7, #12]
 314:main.c        **** 					sscanf(psz,"%hu", &avar);
 471              		.loc 1 314 0
 472 02d2 BB1C     		adds	r3, r7, #2
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 15


 473 02d4 1A46     		mov	r2, r3
 474 02d6 1749     		ldr	r1, .L122+44
 475 02d8 F868     		ldr	r0, [r7, #12]
 476 02da FFF7FEFF 		bl	sscanf
 315:main.c        **** 					bvar = avar;  // something is wacky with sscanf.  if I dont move the data into bvar, then on t
 477              		.loc 1 315 0
 478 02de 7B88     		ldrh	r3, [r7, #2]	@ movhi
 479 02e0 FB83     		strh	r3, [r7, #30]	@ movhi
 316:main.c        **** 					// if I use another variable, avar gets reset to zero!
 317:main.c        **** 					// got the address
 318:main.c        **** 					
 319:main.c        **** 					psz = strtok(0, " ");
 480              		.loc 1 319 0
 481 02e2 1149     		ldr	r1, .L122+32
 482 02e4 0020     		movs	r0, #0
 483 02e6 FFF7FEFF 		bl	strtok
 484 02ea F860     		str	r0, [r7, #12]
 320:main.c        **** 					sscanf(psz,"%hu", &avar);
 485              		.loc 1 320 0
 486 02ec BB1C     		adds	r3, r7, #2
 487 02ee 1A46     		mov	r2, r3
 488 02f0 1049     		ldr	r1, .L122+44
 489 02f2 F868     		ldr	r0, [r7, #12]
 490 02f4 FFF7FEFF 		bl	sscanf
 321:main.c        **** 					// got the data
 322:main.c        **** 					
 323:main.c        **** 					// store it in the buffer
 324:main.c        **** 					Waveform_Temp_Buffer[bvar] = avar;
 491              		.loc 1 324 0
 492 02f8 FB8B     		ldrh	r3, [r7, #30]
 493 02fa 7A88     		ldrh	r2, [r7, #2]
 494 02fc D1B2     		uxtb	r1, r2
 495 02fe 0F4A     		ldr	r2, .L122+52
 496 0300 D154     		strb	r1, [r2, r3]
 497 0302 00F073BD 		b	.L6
 498              	.L123:
 499 0306 00BF     		.align	3
 500              	.L122:
 501 0308 00000000 		.word	0
 502 030c 00E06F40 		.word	1081073664
 503 0310 04650040 		.word	1073767684
 504 0314 00000000 		.word	wave_gain
 505 0318 00000000 		.word	wave_offset
 506 031c 00007F43 		.word	1132396544
 507 0320 00000000 		.word	Noise_Adjusted
 508 0324 00000000 		.word	bCommandReady
 509 0328 00000000 		.word	.LC0
 510 032c 00000000 		.word	szCommand
 511 0330 04000000 		.word	.LC1
 512 0334 20000000 		.word	.LC2
 513 0338 00000000 		.word	Digital_AutoUpdate
 514 033c 00000000 		.word	Waveform_Temp_Buffer
 515              	.L29:
 325:main.c        **** 				}
 326:main.c        **** 				else if(*psz == 'P')
 516              		.loc 1 326 0
 517 0340 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 16


 518 0342 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 519 0344 502B     		cmp	r3, #80
 520 0346 50D1     		bne	.L31
 327:main.c        **** 				{
 328:main.c        **** 					// program the waveform by copying it into the array that the waveform generator uses
 329:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 521              		.loc 1 329 0
 522 0348 0023     		movs	r3, #0
 523 034a BB83     		strh	r3, [r7, #28]	@ movhi
 524 034c 48E0     		b	.L32
 525              	.L35:
 330:main.c        **** 					{
 331:main.c        **** 						// GJL - add offset and max checking
 332:main.c        ****                         wave_temp = (((float) Waveform_Temp_Buffer[i]) * ((float)wave_gain)/255.0) 
 526              		.loc 1 332 0
 527 034e BB8B     		ldrh	r3, [r7, #28]
 528 0350 A34A     		ldr	r2, .L124+8
 529 0352 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 530 0354 1846     		mov	r0, r3
 531 0356 FFF7FEFF 		bl	__aeabi_ui2f
 532 035a 0446     		mov	r4, r0
 533 035c A14B     		ldr	r3, .L124+12
 534 035e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 535 0360 1846     		mov	r0, r3
 536 0362 FFF7FEFF 		bl	__aeabi_ui2f
 537 0366 0346     		mov	r3, r0
 538 0368 1946     		mov	r1, r3
 539 036a 2046     		mov	r0, r4
 540 036c FFF7FEFF 		bl	__aeabi_fmul
 541 0370 0346     		mov	r3, r0
 542 0372 1846     		mov	r0, r3
 543 0374 FFF7FEFF 		bl	__aeabi_f2d
 544 0378 97A3     		adr	r3, .L124
 545 037a D3E90023 		ldrd	r2, [r3]
 546 037e FFF7FEFF 		bl	__aeabi_ddiv
 547 0382 0346     		mov	r3, r0
 548 0384 0C46     		mov	r4, r1
 549 0386 2546     		mov	r5, r4
 550 0388 1C46     		mov	r4, r3
 551 038a 974B     		ldr	r3, .L124+16
 552 038c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 553 038e 1846     		mov	r0, r3
 554 0390 FFF7FEFF 		bl	__aeabi_ui2f
 555 0394 0346     		mov	r3, r0
 556 0396 1846     		mov	r0, r3
 557 0398 FFF7FEFF 		bl	__aeabi_f2d
 558 039c 0246     		mov	r2, r0
 559 039e 0B46     		mov	r3, r1
 560 03a0 2046     		mov	r0, r4
 561 03a2 2946     		mov	r1, r5
 562 03a4 FFF7FEFF 		bl	__aeabi_dadd
 563 03a8 0346     		mov	r3, r0
 564 03aa 0C46     		mov	r4, r1
 565 03ac 1846     		mov	r0, r3
 566 03ae 2146     		mov	r1, r4
 567 03b0 FFF7FEFF 		bl	__aeabi_d2f
 568 03b4 0346     		mov	r3, r0
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 17


 569 03b6 3B61     		str	r3, [r7, #16]	@ float
 333:main.c        ****                         if(wave_temp > 255.0)
 570              		.loc 1 333 0
 571 03b8 8C49     		ldr	r1, .L124+20
 572 03ba 3869     		ldr	r0, [r7, #16]	@ float
 573 03bc FFF7FEFF 		bl	__aeabi_fcmpgt
 574 03c0 0346     		mov	r3, r0
 575 03c2 002B     		cmp	r3, #0
 576 03c4 01D0     		beq	.L33
 334:main.c        ****                         {
 335:main.c        ****                             wave_temp = 255.0;
 577              		.loc 1 335 0
 578 03c6 894B     		ldr	r3, .L124+20
 579 03c8 3B61     		str	r3, [r7, #16]	@ float
 580              	.L33:
 336:main.c        ****                         }
 337:main.c        ****                         Waveform_Buffer[i] = (uint8) wave_temp;
 581              		.loc 1 337 0 discriminator 2
 582 03ca BC8B     		ldrh	r4, [r7, #28]
 583 03cc 3869     		ldr	r0, [r7, #16]	@ float
 584 03ce FFF7FEFF 		bl	__aeabi_f2uiz
 585 03d2 0346     		mov	r3, r0
 586 03d4 DAB2     		uxtb	r2, r3
 587 03d6 864B     		ldr	r3, .L124+24
 588 03d8 1A55     		strb	r2, [r3, r4]
 329:main.c        **** 					{
 589              		.loc 1 329 0 discriminator 2
 590 03da BB8B     		ldrh	r3, [r7, #28]
 591 03dc 0133     		adds	r3, r3, #1
 592 03de BB83     		strh	r3, [r7, #28]	@ movhi
 593              	.L32:
 329:main.c        **** 					{
 594              		.loc 1 329 0 is_stmt 0 discriminator 1
 595 03e0 BB8B     		ldrh	r3, [r7, #28]
 596 03e2 FF2B     		cmp	r3, #255
 597 03e4 B3D9     		bls	.L35
 598 03e6 00F001BD 		b	.L6
 599              	.L31:
 338:main.c        **** 					}   
 339:main.c        **** 				}
 340:main.c        **** 				else if(*psz == 'A')
 600              		.loc 1 340 0 is_stmt 1
 601 03ea FB68     		ldr	r3, [r7, #12]
 602 03ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 603 03ee 412B     		cmp	r3, #65
 604 03f0 5FD1     		bne	.L36
 341:main.c        **** 				{
 342:main.c        **** 					// set the waveform amplitude
 343:main.c        **** 					// W A A0, where A0 is the a bit amplitude, 0 = 0%, 255 = 100%
 344:main.c        **** 					// program the waveform amplitude by copying it into the array that the waveform generator use
 345:main.c        **** 					// but scale it during the copy
 346:main.c        **** 					
 347:main.c        **** 					psz = strtok(0, " ");
 605              		.loc 1 347 0
 606 03f2 8049     		ldr	r1, .L124+28
 607 03f4 0020     		movs	r0, #0
 608 03f6 FFF7FEFF 		bl	strtok
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 18


 609 03fa F860     		str	r0, [r7, #12]
 348:main.c        **** 					sscanf(psz,"%hu", &avar);
 610              		.loc 1 348 0
 611 03fc BB1C     		adds	r3, r7, #2
 612 03fe 1A46     		mov	r2, r3
 613 0400 7D49     		ldr	r1, .L124+32
 614 0402 F868     		ldr	r0, [r7, #12]
 615 0404 FFF7FEFF 		bl	sscanf
 349:main.c        **** 					
 350:main.c        **** 					wave_gain = avar;
 616              		.loc 1 350 0
 617 0408 7B88     		ldrh	r3, [r7, #2]
 618 040a DAB2     		uxtb	r2, r3
 619 040c 754B     		ldr	r3, .L124+12
 620 040e 1A70     		strb	r2, [r3]
 351:main.c        **** 					
 352:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 621              		.loc 1 352 0
 622 0410 0023     		movs	r3, #0
 623 0412 BB83     		strh	r3, [r7, #28]	@ movhi
 624 0414 48E0     		b	.L37
 625              	.L40:
 353:main.c        **** 					{
 354:main.c        **** 						// GJL - add offset and max checking
 355:main.c        ****                         wave_temp = (((float) Waveform_Temp_Buffer[i]) * ((float)wave_gain)/255.0) 
 626              		.loc 1 355 0
 627 0416 BB8B     		ldrh	r3, [r7, #28]
 628 0418 714A     		ldr	r2, .L124+8
 629 041a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 630 041c 1846     		mov	r0, r3
 631 041e FFF7FEFF 		bl	__aeabi_ui2f
 632 0422 0446     		mov	r4, r0
 633 0424 6F4B     		ldr	r3, .L124+12
 634 0426 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 635 0428 1846     		mov	r0, r3
 636 042a FFF7FEFF 		bl	__aeabi_ui2f
 637 042e 0346     		mov	r3, r0
 638 0430 1946     		mov	r1, r3
 639 0432 2046     		mov	r0, r4
 640 0434 FFF7FEFF 		bl	__aeabi_fmul
 641 0438 0346     		mov	r3, r0
 642 043a 1846     		mov	r0, r3
 643 043c FFF7FEFF 		bl	__aeabi_f2d
 644 0440 65A3     		adr	r3, .L124
 645 0442 D3E90023 		ldrd	r2, [r3]
 646 0446 FFF7FEFF 		bl	__aeabi_ddiv
 647 044a 0346     		mov	r3, r0
 648 044c 0C46     		mov	r4, r1
 649 044e 2546     		mov	r5, r4
 650 0450 1C46     		mov	r4, r3
 651 0452 654B     		ldr	r3, .L124+16
 652 0454 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 653 0456 1846     		mov	r0, r3
 654 0458 FFF7FEFF 		bl	__aeabi_ui2f
 655 045c 0346     		mov	r3, r0
 656 045e 1846     		mov	r0, r3
 657 0460 FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 19


 658 0464 0246     		mov	r2, r0
 659 0466 0B46     		mov	r3, r1
 660 0468 2046     		mov	r0, r4
 661 046a 2946     		mov	r1, r5
 662 046c FFF7FEFF 		bl	__aeabi_dadd
 663 0470 0346     		mov	r3, r0
 664 0472 0C46     		mov	r4, r1
 665 0474 1846     		mov	r0, r3
 666 0476 2146     		mov	r1, r4
 667 0478 FFF7FEFF 		bl	__aeabi_d2f
 668 047c 0346     		mov	r3, r0
 669 047e 3B61     		str	r3, [r7, #16]	@ float
 356:main.c        ****                         if(wave_temp > 255.0)
 670              		.loc 1 356 0
 671 0480 5A49     		ldr	r1, .L124+20
 672 0482 3869     		ldr	r0, [r7, #16]	@ float
 673 0484 FFF7FEFF 		bl	__aeabi_fcmpgt
 674 0488 0346     		mov	r3, r0
 675 048a 002B     		cmp	r3, #0
 676 048c 01D0     		beq	.L38
 357:main.c        ****                         {
 358:main.c        ****                             wave_temp = 255.0;
 677              		.loc 1 358 0
 678 048e 574B     		ldr	r3, .L124+20
 679 0490 3B61     		str	r3, [r7, #16]	@ float
 680              	.L38:
 359:main.c        ****                         }
 360:main.c        ****                         Waveform_Buffer[i] = (uint8) wave_temp;
 681              		.loc 1 360 0 discriminator 2
 682 0492 BC8B     		ldrh	r4, [r7, #28]
 683 0494 3869     		ldr	r0, [r7, #16]	@ float
 684 0496 FFF7FEFF 		bl	__aeabi_f2uiz
 685 049a 0346     		mov	r3, r0
 686 049c DAB2     		uxtb	r2, r3
 687 049e 544B     		ldr	r3, .L124+24
 688 04a0 1A55     		strb	r2, [r3, r4]
 352:main.c        **** 					{
 689              		.loc 1 352 0 discriminator 2
 690 04a2 BB8B     		ldrh	r3, [r7, #28]
 691 04a4 0133     		adds	r3, r3, #1
 692 04a6 BB83     		strh	r3, [r7, #28]	@ movhi
 693              	.L37:
 352:main.c        **** 					{
 694              		.loc 1 352 0 is_stmt 0 discriminator 1
 695 04a8 BB8B     		ldrh	r3, [r7, #28]
 696 04aa FF2B     		cmp	r3, #255
 697 04ac B3D9     		bls	.L40
 698 04ae 00F09DBC 		b	.L6
 699              	.L36:
 361:main.c        **** 					}              
 362:main.c        ****                     
 363:main.c        **** 				}
 364:main.c        **** 				// GJL - add offset functionality
 365:main.c        ****                 else if(*psz == 'O')
 700              		.loc 1 365 0 is_stmt 1
 701 04b2 FB68     		ldr	r3, [r7, #12]
 702 04b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 20


 703 04b6 4F2B     		cmp	r3, #79
 704 04b8 5FD1     		bne	.L41
 366:main.c        ****                 {
 367:main.c        ****                     // set waveform offset
 368:main.c        ****                     // W O O0 where O0 is the offset - 0 = 0%, 255 = 100%
 369:main.c        ****                     // program teh offset by copying it into the array that the waveform generator 
 370:main.c        ****                     // but adjust the values upwards during the copy
 371:main.c        ****                     
 372:main.c        ****                     psz = strtok(0, " ");
 705              		.loc 1 372 0
 706 04ba 4E49     		ldr	r1, .L124+28
 707 04bc 0020     		movs	r0, #0
 708 04be FFF7FEFF 		bl	strtok
 709 04c2 F860     		str	r0, [r7, #12]
 373:main.c        **** 					sscanf(psz,"%hu", &avar);
 710              		.loc 1 373 0
 711 04c4 BB1C     		adds	r3, r7, #2
 712 04c6 1A46     		mov	r2, r3
 713 04c8 4B49     		ldr	r1, .L124+32
 714 04ca F868     		ldr	r0, [r7, #12]
 715 04cc FFF7FEFF 		bl	sscanf
 374:main.c        **** 					
 375:main.c        **** 					wave_offset = avar;
 716              		.loc 1 375 0
 717 04d0 7B88     		ldrh	r3, [r7, #2]
 718 04d2 DAB2     		uxtb	r2, r3
 719 04d4 444B     		ldr	r3, .L124+16
 720 04d6 1A70     		strb	r2, [r3]
 376:main.c        **** 					
 377:main.c        **** 					for(i = 0; i < WAVEFORM_BUFFER_SIZE; i++)
 721              		.loc 1 377 0
 722 04d8 0023     		movs	r3, #0
 723 04da BB83     		strh	r3, [r7, #28]	@ movhi
 724 04dc 48E0     		b	.L42
 725              	.L45:
 378:main.c        **** 					{
 379:main.c        **** 						// GJL temp - add offset
 380:main.c        ****                         wave_temp = (((float) Waveform_Temp_Buffer[i]) * ((float)wave_gain)/255.0) 
 726              		.loc 1 380 0
 727 04de BB8B     		ldrh	r3, [r7, #28]
 728 04e0 3F4A     		ldr	r2, .L124+8
 729 04e2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 730 04e4 1846     		mov	r0, r3
 731 04e6 FFF7FEFF 		bl	__aeabi_ui2f
 732 04ea 0446     		mov	r4, r0
 733 04ec 3D4B     		ldr	r3, .L124+12
 734 04ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 735 04f0 1846     		mov	r0, r3
 736 04f2 FFF7FEFF 		bl	__aeabi_ui2f
 737 04f6 0346     		mov	r3, r0
 738 04f8 1946     		mov	r1, r3
 739 04fa 2046     		mov	r0, r4
 740 04fc FFF7FEFF 		bl	__aeabi_fmul
 741 0500 0346     		mov	r3, r0
 742 0502 1846     		mov	r0, r3
 743 0504 FFF7FEFF 		bl	__aeabi_f2d
 744 0508 33A3     		adr	r3, .L124
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 21


 745 050a D3E90023 		ldrd	r2, [r3]
 746 050e FFF7FEFF 		bl	__aeabi_ddiv
 747 0512 0346     		mov	r3, r0
 748 0514 0C46     		mov	r4, r1
 749 0516 2546     		mov	r5, r4
 750 0518 1C46     		mov	r4, r3
 751 051a 334B     		ldr	r3, .L124+16
 752 051c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 753 051e 1846     		mov	r0, r3
 754 0520 FFF7FEFF 		bl	__aeabi_ui2f
 755 0524 0346     		mov	r3, r0
 756 0526 1846     		mov	r0, r3
 757 0528 FFF7FEFF 		bl	__aeabi_f2d
 758 052c 0246     		mov	r2, r0
 759 052e 0B46     		mov	r3, r1
 760 0530 2046     		mov	r0, r4
 761 0532 2946     		mov	r1, r5
 762 0534 FFF7FEFF 		bl	__aeabi_dadd
 763 0538 0346     		mov	r3, r0
 764 053a 0C46     		mov	r4, r1
 765 053c 1846     		mov	r0, r3
 766 053e 2146     		mov	r1, r4
 767 0540 FFF7FEFF 		bl	__aeabi_d2f
 768 0544 0346     		mov	r3, r0
 769 0546 3B61     		str	r3, [r7, #16]	@ float
 381:main.c        ****                         if(wave_temp > 255.0)
 770              		.loc 1 381 0
 771 0548 2849     		ldr	r1, .L124+20
 772 054a 3869     		ldr	r0, [r7, #16]	@ float
 773 054c FFF7FEFF 		bl	__aeabi_fcmpgt
 774 0550 0346     		mov	r3, r0
 775 0552 002B     		cmp	r3, #0
 776 0554 01D0     		beq	.L43
 382:main.c        ****                         {
 383:main.c        ****                             wave_temp = 255.0;
 777              		.loc 1 383 0
 778 0556 254B     		ldr	r3, .L124+20
 779 0558 3B61     		str	r3, [r7, #16]	@ float
 780              	.L43:
 384:main.c        ****                         }
 385:main.c        ****                         Waveform_Buffer[i] = (uint8) wave_temp;
 781              		.loc 1 385 0 discriminator 2
 782 055a BC8B     		ldrh	r4, [r7, #28]
 783 055c 3869     		ldr	r0, [r7, #16]	@ float
 784 055e FFF7FEFF 		bl	__aeabi_f2uiz
 785 0562 0346     		mov	r3, r0
 786 0564 DAB2     		uxtb	r2, r3
 787 0566 224B     		ldr	r3, .L124+24
 788 0568 1A55     		strb	r2, [r3, r4]
 377:main.c        **** 					{
 789              		.loc 1 377 0 discriminator 2
 790 056a BB8B     		ldrh	r3, [r7, #28]
 791 056c 0133     		adds	r3, r3, #1
 792 056e BB83     		strh	r3, [r7, #28]	@ movhi
 793              	.L42:
 377:main.c        **** 					{
 794              		.loc 1 377 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 22


 795 0570 BB8B     		ldrh	r3, [r7, #28]
 796 0572 FF2B     		cmp	r3, #255
 797 0574 B3D9     		bls	.L45
 798 0576 00F039BC 		b	.L6
 799              	.L41:
 386:main.c        **** 					}              
 387:main.c        ****                 }
 388:main.c        ****                 else if(*psz == 'W')
 800              		.loc 1 388 0 is_stmt 1
 801 057a FB68     		ldr	r3, [r7, #12]
 802 057c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 803 057e 572B     		cmp	r3, #87
 804 0580 10D1     		bne	.L46
 389:main.c        **** 				{
 390:main.c        **** 					// select the waveform output
 391:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVE_SELECT_MASK);
 805              		.loc 1 391 0
 806 0582 FFF7FEFF 		bl	Wave_Control_Read
 807 0586 0346     		mov	r3, r0
 808 0588 23F00103 		bic	r3, r3, #1
 809 058c DBB2     		uxtb	r3, r3
 810 058e 1846     		mov	r0, r3
 811 0590 FFF7FEFF 		bl	Wave_Control_Write
 392:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_WAVE);
 812              		.loc 1 392 0
 813 0594 FFF7FEFF 		bl	Wave_Control_Read
 814 0598 0346     		mov	r3, r0
 815 059a 1846     		mov	r0, r3
 816 059c FFF7FEFF 		bl	Wave_Control_Write
 817 05a0 00F024BC 		b	.L6
 818              	.L46:
 393:main.c        **** 				}
 394:main.c        **** 				else if(*psz == 'N')
 819              		.loc 1 394 0
 820 05a4 FB68     		ldr	r3, [r7, #12]
 821 05a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 822 05a8 4E2B     		cmp	r3, #78
 823 05aa 27D1     		bne	.L47
 395:main.c        **** 				{
 396:main.c        **** 					// select the noise output
 397:main.c        **** 					Wave_Control_Write(Wave_Control_Read() & ~WAVE_SELECT_MASK);
 824              		.loc 1 397 0
 825 05ac FFF7FEFF 		bl	Wave_Control_Read
 826 05b0 0346     		mov	r3, r0
 827 05b2 23F00103 		bic	r3, r3, #1
 828 05b6 DBB2     		uxtb	r3, r3
 829 05b8 1846     		mov	r0, r3
 830 05ba FFF7FEFF 		bl	Wave_Control_Write
 398:main.c        **** 					Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_NOISE);
 831              		.loc 1 398 0
 832 05be FFF7FEFF 		bl	Wave_Control_Read
 833 05c2 0346     		mov	r3, r0
 834 05c4 43F00103 		orr	r3, r3, #1
 835 05c8 DBB2     		uxtb	r3, r3
 836 05ca 1846     		mov	r0, r3
 837 05cc FFF7FEFF 		bl	Wave_Control_Write
 838 05d0 00F00CBC 		b	.L6
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 23


 839              	.L125:
 840 05d4 AFF30080 		.align	3
 841              	.L124:
 842 05d8 00000000 		.word	0
 843 05dc 00E06F40 		.word	1081073664
 844 05e0 00000000 		.word	Waveform_Temp_Buffer
 845 05e4 00000000 		.word	wave_gain
 846 05e8 00000000 		.word	wave_offset
 847 05ec 00007F43 		.word	1132396544
 848 05f0 00000000 		.word	Waveform_Buffer
 849 05f4 00000000 		.word	.LC0
 850 05f8 20000000 		.word	.LC2
 851              	.L47:
 399:main.c        **** 				}
 400:main.c        **** 				else if(*psz == 'F')
 852              		.loc 1 400 0
 853 05fc FB68     		ldr	r3, [r7, #12]
 854 05fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 855 0600 462B     		cmp	r3, #70
 856 0602 40F0F383 		bne	.L6
 401:main.c        **** 				{
 402:main.c        **** 					// set the frequency output of the waveform generator
 403:main.c        **** 					// best thing to have here is an actual DDS in the hardware
 404:main.c        **** 					// but to get this working, I'm just going to fake it by setting
 405:main.c        **** 					// the clock divider.  It wont work for everything, but it should be
 406:main.c        **** 					// passable.  The command is W F F3 F2 F1 F0 where Fn are 8 bit ascii
 407:main.c        **** 					// numbers that are combined into a 32 bit phase accumulator value
 408:main.c        **** 					// phase value = desired output frequency / 0.09313225746 Hz
 409:main.c        **** 					
 410:main.c        **** 					psz = strtok(0, " ");
 857              		.loc 1 410 0
 858 0606 AC49     		ldr	r1, .L126+24
 859 0608 0020     		movs	r0, #0
 860 060a FFF7FEFF 		bl	strtok
 861 060e F860     		str	r0, [r7, #12]
 411:main.c        **** 					sscanf(psz,"%hu", &avar);
 862              		.loc 1 411 0
 863 0610 BB1C     		adds	r3, r7, #2
 864 0612 1A46     		mov	r2, r3
 865 0614 A949     		ldr	r1, .L126+28
 866 0616 F868     		ldr	r0, [r7, #12]
 867 0618 FFF7FEFF 		bl	sscanf
 412:main.c        **** 					phase_int = ((uint32) avar)*16777216;
 868              		.loc 1 412 0
 869 061c 7B88     		ldrh	r3, [r7, #2]
 870 061e 1B06     		lsls	r3, r3, #24
 871 0620 BB61     		str	r3, [r7, #24]
 413:main.c        **** 					
 414:main.c        **** 					psz = strtok(0, " ");
 872              		.loc 1 414 0
 873 0622 A549     		ldr	r1, .L126+24
 874 0624 0020     		movs	r0, #0
 875 0626 FFF7FEFF 		bl	strtok
 876 062a F860     		str	r0, [r7, #12]
 415:main.c        **** 					sscanf(psz,"%hu", &avar);
 877              		.loc 1 415 0
 878 062c BB1C     		adds	r3, r7, #2
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 24


 879 062e 1A46     		mov	r2, r3
 880 0630 A249     		ldr	r1, .L126+28
 881 0632 F868     		ldr	r0, [r7, #12]
 882 0634 FFF7FEFF 		bl	sscanf
 416:main.c        **** 					phase_int += ((uint32) avar)*65536;
 883              		.loc 1 416 0
 884 0638 7B88     		ldrh	r3, [r7, #2]
 885 063a 1B04     		lsls	r3, r3, #16
 886 063c BA69     		ldr	r2, [r7, #24]
 887 063e 1344     		add	r3, r3, r2
 888 0640 BB61     		str	r3, [r7, #24]
 417:main.c        **** 					
 418:main.c        **** 					psz = strtok(0, " ");
 889              		.loc 1 418 0
 890 0642 9D49     		ldr	r1, .L126+24
 891 0644 0020     		movs	r0, #0
 892 0646 FFF7FEFF 		bl	strtok
 893 064a F860     		str	r0, [r7, #12]
 419:main.c        **** 					sscanf(psz,"%hu", &avar);
 894              		.loc 1 419 0
 895 064c BB1C     		adds	r3, r7, #2
 896 064e 1A46     		mov	r2, r3
 897 0650 9A49     		ldr	r1, .L126+28
 898 0652 F868     		ldr	r0, [r7, #12]
 899 0654 FFF7FEFF 		bl	sscanf
 420:main.c        **** 					phase_int += ((uint32) avar)*256;
 900              		.loc 1 420 0
 901 0658 7B88     		ldrh	r3, [r7, #2]
 902 065a 1B02     		lsls	r3, r3, #8
 903 065c BA69     		ldr	r2, [r7, #24]
 904 065e 1344     		add	r3, r3, r2
 905 0660 BB61     		str	r3, [r7, #24]
 421:main.c        **** 					
 422:main.c        **** 					psz = strtok(0, " ");
 906              		.loc 1 422 0
 907 0662 9549     		ldr	r1, .L126+24
 908 0664 0020     		movs	r0, #0
 909 0666 FFF7FEFF 		bl	strtok
 910 066a F860     		str	r0, [r7, #12]
 423:main.c        **** 					sscanf(psz,"%hu", &avar);
 911              		.loc 1 423 0
 912 066c BB1C     		adds	r3, r7, #2
 913 066e 1A46     		mov	r2, r3
 914 0670 9249     		ldr	r1, .L126+28
 915 0672 F868     		ldr	r0, [r7, #12]
 916 0674 FFF7FEFF 		bl	sscanf
 424:main.c        **** 					phase_int += ((uint32) avar);
 917              		.loc 1 424 0
 918 0678 7B88     		ldrh	r3, [r7, #2]
 919 067a 1A46     		mov	r2, r3
 920 067c BB69     		ldr	r3, [r7, #24]
 921 067e 1344     		add	r3, r3, r2
 922 0680 BB61     		str	r3, [r7, #24]
 425:main.c        **** 					
 426:main.c        **** 					freq = ((float) phase_int)*.09313225746;
 923              		.loc 1 426 0
 924 0682 B869     		ldr	r0, [r7, #24]
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 25


 925 0684 FFF7FEFF 		bl	__aeabi_ui2f
 926 0688 0346     		mov	r3, r0
 927 068a 1846     		mov	r0, r3
 928 068c FFF7FEFF 		bl	__aeabi_f2d
 929 0690 83A3     		adr	r3, .L126
 930 0692 D3E90023 		ldrd	r2, [r3]
 931 0696 FFF7FEFF 		bl	__aeabi_dmul
 932 069a 0346     		mov	r3, r0
 933 069c 0C46     		mov	r4, r1
 934 069e 1846     		mov	r0, r3
 935 06a0 2146     		mov	r1, r4
 936 06a2 FFF7FEFF 		bl	__aeabi_d2f
 937 06a6 0346     		mov	r3, r0
 938 06a8 BB60     		str	r3, [r7, #8]	@ float
 427:main.c        **** 					
 428:main.c        **** 					// calculate the clock divider
 429:main.c        **** 					phase_int = (int32) (36000000.0/((float) WAVEFORM_BUFFER_SIZE))/freq;
 939              		.loc 1 429 0
 940 06aa B968     		ldr	r1, [r7, #8]	@ float
 941 06ac 8448     		ldr	r0, .L126+32
 942 06ae FFF7FEFF 		bl	__aeabi_fdiv
 943 06b2 0346     		mov	r3, r0
 944 06b4 1846     		mov	r0, r3
 945 06b6 FFF7FEFF 		bl	__aeabi_f2uiz
 946 06ba 0346     		mov	r3, r0
 947 06bc BB61     		str	r3, [r7, #24]
 430:main.c        **** 					
 431:main.c        **** 					if(phase_int >= 65535)
 948              		.loc 1 431 0
 949 06be BB69     		ldr	r3, [r7, #24]
 950 06c0 4FF6FE72 		movw	r2, #65534
 951 06c4 9342     		cmp	r3, r2
 952 06c6 03D9     		bls	.L48
 432:main.c        **** 					{
 433:main.c        **** 						phase_int = 65535;
 953              		.loc 1 433 0
 954 06c8 4FF6FF73 		movw	r3, #65535
 955 06cc BB61     		str	r3, [r7, #24]
 956 06ce 04E0     		b	.L49
 957              	.L48:
 434:main.c        **** 					}
 435:main.c        **** 					else if(phase_int <= 15) // anything less than this and the DMA doesn't have time to execute
 958              		.loc 1 435 0
 959 06d0 BB69     		ldr	r3, [r7, #24]
 960 06d2 0F2B     		cmp	r3, #15
 961 06d4 01D8     		bhi	.L49
 436:main.c        **** 					{
 437:main.c        **** 						phase_int = 15;
 962              		.loc 1 437 0
 963 06d6 0F23     		movs	r3, #15
 964 06d8 BB61     		str	r3, [r7, #24]
 965              	.L49:
 438:main.c        **** 					}
 439:main.c        **** 					
 440:main.c        **** 					Wave_Clock_SetDividerValue((uint16) phase_int);
 966              		.loc 1 440 0
 967 06da BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 26


 968 06dc 9BB2     		uxth	r3, r3
 969 06de 013B     		subs	r3, r3, #1
 970 06e0 9BB2     		uxth	r3, r3
 971 06e2 0121     		movs	r1, #1
 972 06e4 1846     		mov	r0, r3
 973 06e6 FFF7FEFF 		bl	Wave_Clock_SetDividerRegister
 441:main.c        ****                     Noise_Clock_SetDividerValue((uint16) phase_int);
 974              		.loc 1 441 0
 975 06ea BB69     		ldr	r3, [r7, #24]
 976 06ec 9BB2     		uxth	r3, r3
 977 06ee 013B     		subs	r3, r3, #1
 978 06f0 9BB2     		uxth	r3, r3
 979 06f2 0121     		movs	r1, #1
 980 06f4 1846     		mov	r0, r3
 981 06f6 FFF7FEFF 		bl	Noise_Clock_SetDividerRegister
 982 06fa 77E3     		b	.L6
 983              	.L28:
 442:main.c        **** 					
 443:main.c        **** 				}
 444:main.c        **** 			}
 445:main.c        **** 			else if(*psz == 'S')
 984              		.loc 1 445 0
 985 06fc FB68     		ldr	r3, [r7, #12]
 986 06fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 987 0700 532B     		cmp	r3, #83
 988 0702 40F06E83 		bne	.L50
 446:main.c        **** 			{
 447:main.c        **** 				// scope commands
 448:main.c        **** 				
 449:main.c        **** 				psz = strtok(0, " ");
 989              		.loc 1 449 0
 990 0706 6C49     		ldr	r1, .L126+24
 991 0708 0020     		movs	r0, #0
 992 070a FFF7FEFF 		bl	strtok
 993 070e F860     		str	r0, [r7, #12]
 450:main.c        **** 				if(*psz == 'O')
 994              		.loc 1 450 0
 995 0710 FB68     		ldr	r3, [r7, #12]
 996 0712 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 997 0714 4F2B     		cmp	r3, #79
 998 0716 0FD1     		bne	.L51
 451:main.c        **** 				{
 452:main.c        **** 					// read offset from EEPROM command
 453:main.c        **** 					PutChar('O');
 999              		.loc 1 453 0
 1000 0718 4F20     		movs	r0, #79
 1001 071a FFF7FEFF 		bl	PutChar
 454:main.c        **** 					PutChar(128); // A
 1002              		.loc 1 454 0
 1003 071e 8020     		movs	r0, #128
 1004 0720 FFF7FEFF 		bl	PutChar
 455:main.c        **** 					PutChar(128); // a
 1005              		.loc 1 455 0
 1006 0724 8020     		movs	r0, #128
 1007 0726 FFF7FEFF 		bl	PutChar
 456:main.c        **** 					PutChar(128); // B
 1008              		.loc 1 456 0
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 27


 1009 072a 8020     		movs	r0, #128
 1010 072c FFF7FEFF 		bl	PutChar
 457:main.c        **** 					PutChar(128); // b
 1011              		.loc 1 457 0
 1012 0730 8020     		movs	r0, #128
 1013 0732 FFF7FEFF 		bl	PutChar
 1014 0736 59E3     		b	.L6
 1015              	.L51:
 458:main.c        **** 					
 459:main.c        **** 				}
 460:main.c        **** 				else if(*psz == 'T')
 1016              		.loc 1 460 0
 1017 0738 FB68     		ldr	r3, [r7, #12]
 1018 073a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1019 073c 542B     		cmp	r3, #84
 1020 073e 74D1     		bne	.L53
 461:main.c        **** 				{
 462:main.c        **** 					// set the trigger level
 463:main.c        **** 					// data comes back as two ascii strings, each representing an 8 bit value
 464:main.c        **** 					// S T T_HIGH T_LOW where T_HIGH and T_LOW represent a 10 bit number
 465:main.c        **** 					// the trigger is set by the following equation:
 466:main.c        **** 					// 511 - Gain*Trigger_Voltage/0.052421484375 (383 without the offsets set to 128)
 467:main.c        **** 					psz = strtok(0, " ");
 1021              		.loc 1 467 0
 1022 0740 5D49     		ldr	r1, .L126+24
 1023 0742 0020     		movs	r0, #0
 1024 0744 FFF7FEFF 		bl	strtok
 1025 0748 F860     		str	r0, [r7, #12]
 468:main.c        **** 					sscanf(psz,"%hu", &avar);
 1026              		.loc 1 468 0
 1027 074a BB1C     		adds	r3, r7, #2
 1028 074c 1A46     		mov	r2, r3
 1029 074e 5B49     		ldr	r1, .L126+28
 1030 0750 F868     		ldr	r0, [r7, #12]
 1031 0752 FFF7FEFF 		bl	sscanf
 469:main.c        **** 					bvar = avar*256;
 1032              		.loc 1 469 0
 1033 0756 7B88     		ldrh	r3, [r7, #2]
 1034 0758 1B02     		lsls	r3, r3, #8
 1035 075a FB83     		strh	r3, [r7, #30]	@ movhi
 470:main.c        **** 					
 471:main.c        **** 					psz = strtok(0, " ");
 1036              		.loc 1 471 0
 1037 075c 5649     		ldr	r1, .L126+24
 1038 075e 0020     		movs	r0, #0
 1039 0760 FFF7FEFF 		bl	strtok
 1040 0764 F860     		str	r0, [r7, #12]
 472:main.c        **** 					sscanf(psz,"%hu", &avar);
 1041              		.loc 1 472 0
 1042 0766 BB1C     		adds	r3, r7, #2
 1043 0768 1A46     		mov	r2, r3
 1044 076a 5449     		ldr	r1, .L126+28
 1045 076c F868     		ldr	r0, [r7, #12]
 1046 076e FFF7FEFF 		bl	sscanf
 473:main.c        **** 					bvar += avar;
 1047              		.loc 1 473 0
 1048 0772 7A88     		ldrh	r2, [r7, #2]
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 28


 1049 0774 FB8B     		ldrh	r3, [r7, #30]	@ movhi
 1050 0776 1344     		add	r3, r3, r2
 1051 0778 FB83     		strh	r3, [r7, #30]	@ movhi
 474:main.c        **** 					
 475:main.c        **** 					// voltage = (511 - Value)/Gain * 0.05242 -> (511-Value)/1*0.05242/0.016(mv per bit, 4 volt Vd
 476:main.c        **** 					// there are 2 gain options, 1x and 10x.
 477:main.c        **** 					if(trigger_source == SCOPE_CHANNEL_1)
 1052              		.loc 1 477 0
 1053 077a 524B     		ldr	r3, .L126+36
 1054 077c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1055 077e 002B     		cmp	r3, #0
 1056 0780 04D1     		bne	.L54
 478:main.c        **** 					{
 479:main.c        **** 						preamp_trig = preamp_a;
 1057              		.loc 1 479 0
 1058 0782 514B     		ldr	r3, .L126+40
 1059 0784 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1060 0786 514B     		ldr	r3, .L126+44
 1061 0788 1A70     		strb	r2, [r3]
 1062 078a 03E0     		b	.L55
 1063              	.L54:
 480:main.c        **** 					}
 481:main.c        **** 					else
 482:main.c        **** 					{
 483:main.c        **** 						preamp_trig = preamp_b;
 1064              		.loc 1 483 0
 1065 078c 504B     		ldr	r3, .L126+48
 1066 078e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1067 0790 4E4B     		ldr	r3, .L126+44
 1068 0792 1A70     		strb	r2, [r3]
 1069              	.L55:
 484:main.c        **** 					}
 485:main.c        **** 					
 486:main.c        **** 					if(preamp_trig == 1)
 1070              		.loc 1 486 0
 1071 0794 4D4B     		ldr	r3, .L126+44
 1072 0796 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1073 0798 012B     		cmp	r3, #1
 1074 079a 14D1     		bne	.L56
 487:main.c        **** 					{
 488:main.c        **** 						cvar = (511-bvar)*3.3093; // 3.27635 (before emperical correction value)
 1075              		.loc 1 488 0
 1076 079c FB8B     		ldrh	r3, [r7, #30]
 1077 079e C3F5FF73 		rsb	r3, r3, #510
 1078 07a2 0133     		adds	r3, r3, #1
 1079 07a4 1846     		mov	r0, r3
 1080 07a6 FFF7FEFF 		bl	__aeabi_i2d
 1081 07aa 3FA3     		adr	r3, .L126+8
 1082 07ac D3E90023 		ldrd	r2, [r3]
 1083 07b0 FFF7FEFF 		bl	__aeabi_dmul
 1084 07b4 0346     		mov	r3, r0
 1085 07b6 0C46     		mov	r4, r1
 1086 07b8 1846     		mov	r0, r3
 1087 07ba 2146     		mov	r1, r4
 1088 07bc FFF7FEFF 		bl	__aeabi_d2f
 1089 07c0 0346     		mov	r3, r0
 1090 07c2 7B61     		str	r3, [r7, #20]	@ float
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 29


 1091 07c4 13E0     		b	.L57
 1092              	.L56:
 489:main.c        **** 					}
 490:main.c        **** 					else
 491:main.c        **** 					{
 492:main.c        ****                         //cvar = (511-bvar)*0.37685; // .327635 (before empirical correction value)
 493:main.c        ****                         cvar = (511-bvar)*0.75668;
 1093              		.loc 1 493 0
 1094 07c6 FB8B     		ldrh	r3, [r7, #30]
 1095 07c8 C3F5FF73 		rsb	r3, r3, #510
 1096 07cc 0133     		adds	r3, r3, #1
 1097 07ce 1846     		mov	r0, r3
 1098 07d0 FFF7FEFF 		bl	__aeabi_i2d
 1099 07d4 36A3     		adr	r3, .L126+16
 1100 07d6 D3E90023 		ldrd	r2, [r3]
 1101 07da FFF7FEFF 		bl	__aeabi_dmul
 1102 07de 0346     		mov	r3, r0
 1103 07e0 0C46     		mov	r4, r1
 1104 07e2 1846     		mov	r0, r3
 1105 07e4 2146     		mov	r1, r4
 1106 07e6 FFF7FEFF 		bl	__aeabi_d2f
 1107 07ea 0346     		mov	r3, r0
 1108 07ec 7B61     		str	r3, [r7, #20]	@ float
 1109              	.L57:
 494:main.c        **** 					}
 495:main.c        **** 					
 496:main.c        **** 					if(cvar <= 0.0)
 1110              		.loc 1 496 0
 1111 07ee 4FF00001 		mov	r1, #0
 1112 07f2 7869     		ldr	r0, [r7, #20]	@ float
 1113 07f4 FFF7FEFF 		bl	__aeabi_fcmple
 1114 07f8 0346     		mov	r3, r0
 1115 07fa 002B     		cmp	r3, #0
 1116 07fc 03D0     		beq	.L120
 497:main.c        **** 					{
 498:main.c        **** 						cvar = 0.0;
 1117              		.loc 1 498 0
 1118 07fe 4FF00003 		mov	r3, #0
 1119 0802 7B61     		str	r3, [r7, #20]	@ float
 1120 0804 08E0     		b	.L60
 1121              	.L120:
 499:main.c        **** 					}
 500:main.c        **** 					else if(cvar >= 255.0)
 1122              		.loc 1 500 0
 1123 0806 3349     		ldr	r1, .L126+52
 1124 0808 7869     		ldr	r0, [r7, #20]	@ float
 1125 080a FFF7FEFF 		bl	__aeabi_fcmpge
 1126 080e 0346     		mov	r3, r0
 1127 0810 002B     		cmp	r3, #0
 1128 0812 01D0     		beq	.L60
 501:main.c        **** 					{
 502:main.c        **** 						cvar = 255.0;
 1129              		.loc 1 502 0
 1130 0814 2F4B     		ldr	r3, .L126+52
 1131 0816 7B61     		str	r3, [r7, #20]	@ float
 1132              	.L60:
 503:main.c        **** 					}
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 30


 504:main.c        **** 					Vtrigger_SetValue((uint8) cvar);
 1133              		.loc 1 504 0
 1134 0818 7869     		ldr	r0, [r7, #20]	@ float
 1135 081a FFF7FEFF 		bl	__aeabi_f2uiz
 1136 081e 0346     		mov	r3, r0
 1137 0820 DBB2     		uxtb	r3, r3
 1138 0822 1846     		mov	r0, r3
 1139 0824 FFF7FEFF 		bl	Vtrigger_SetValue
 1140 0828 E0E2     		b	.L6
 1141              	.L53:
 505:main.c        **** 				}
 506:main.c        **** 				else if(*psz == 'C')
 1142              		.loc 1 506 0
 1143 082a FB68     		ldr	r3, [r7, #12]
 1144 082c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1145 082e 432B     		cmp	r3, #67
 1146 0830 52D1     		bne	.L62
 507:main.c        **** 				{
 508:main.c        **** 					// Post trigger buffer size
 509:main.c        **** 					// data comes back as two ascii strings, each representing an 8 bit value
 510:main.c        **** 					// S C C_HIGH C_LOW where C_HIGH and C_LOW represent a 10 bit number
 511:main.c        **** 					psz = strtok(0, " ");
 1147              		.loc 1 511 0
 1148 0832 2149     		ldr	r1, .L126+24
 1149 0834 0020     		movs	r0, #0
 1150 0836 FFF7FEFF 		bl	strtok
 1151 083a F860     		str	r0, [r7, #12]
 512:main.c        **** 					sscanf(psz,"%hu", &avar);
 1152              		.loc 1 512 0
 1153 083c BB1C     		adds	r3, r7, #2
 1154 083e 1A46     		mov	r2, r3
 1155 0840 1E49     		ldr	r1, .L126+28
 1156 0842 F868     		ldr	r0, [r7, #12]
 1157 0844 FFF7FEFF 		bl	sscanf
 513:main.c        **** 					bvar = avar*256;
 1158              		.loc 1 513 0
 1159 0848 7B88     		ldrh	r3, [r7, #2]
 1160 084a 1B02     		lsls	r3, r3, #8
 1161 084c FB83     		strh	r3, [r7, #30]	@ movhi
 514:main.c        **** 					
 515:main.c        **** 					psz = strtok(0, " ");
 1162              		.loc 1 515 0
 1163 084e 1A49     		ldr	r1, .L126+24
 1164 0850 0020     		movs	r0, #0
 1165 0852 FFF7FEFF 		bl	strtok
 1166 0856 F860     		str	r0, [r7, #12]
 516:main.c        **** 					sscanf(psz,"%hu", &avar);
 1167              		.loc 1 516 0
 1168 0858 BB1C     		adds	r3, r7, #2
 1169 085a 1A46     		mov	r2, r3
 1170 085c 1749     		ldr	r1, .L126+28
 1171 085e F868     		ldr	r0, [r7, #12]
 1172 0860 FFF7FEFF 		bl	sscanf
 517:main.c        **** 					bvar += avar;
 1173              		.loc 1 517 0
 1174 0864 7A88     		ldrh	r2, [r7, #2]
 1175 0866 FB8B     		ldrh	r3, [r7, #30]	@ movhi
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 31


 1176 0868 1344     		add	r3, r3, r2
 1177 086a FB83     		strh	r3, [r7, #30]	@ movhi
 518:main.c        **** 					
 519:main.c        **** 					if(bvar >= (BUFFER_SIZE-1))
 1178              		.loc 1 519 0
 1179 086c FB8B     		ldrh	r3, [r7, #30]
 1180 086e 40F2FE32 		movw	r2, #1022
 1181 0872 9342     		cmp	r3, r2
 1182 0874 03D9     		bls	.L63
 520:main.c        **** 					{
 521:main.c        **** 						bvar = (BUFFER_SIZE-1);  // maximum post trigger buffer size
 1183              		.loc 1 521 0
 1184 0876 40F2FF33 		movw	r3, #1023
 1185 087a FB83     		strh	r3, [r7, #30]	@ movhi
 1186 087c 04E0     		b	.L64
 1187              	.L63:
 522:main.c        **** 					}
 523:main.c        **** 					else if(bvar <= 2)
 1188              		.loc 1 523 0
 1189 087e FB8B     		ldrh	r3, [r7, #30]
 1190 0880 022B     		cmp	r3, #2
 1191 0882 01D8     		bhi	.L64
 524:main.c        **** 					{
 525:main.c        **** 						bvar = 2; // minimum post trigger buffer size
 1192              		.loc 1 525 0
 1193 0884 0223     		movs	r3, #2
 1194 0886 FB83     		strh	r3, [r7, #30]	@ movhi
 1195              	.L64:
 526:main.c        **** 					}
 527:main.c        **** 					
 528:main.c        **** 					// update the period to match the trigger buffer size post trigger capture
 529:main.c        **** 					PWM_Sample_Buffer_WritePeriod(bvar); // post trigger buffer
 1196              		.loc 1 529 0
 1197 0888 FB8B     		ldrh	r3, [r7, #30]
 1198 088a 1846     		mov	r0, r3
 1199 088c FFF7FEFF 		bl	PWM_Sample_Buffer_WritePeriod
 530:main.c        **** 					// after setting the period, need to set the count to the proper value as well
 531:main.c        **** 					PWM_Sample_Buffer_WriteCounter(bvar); // post trigger buffer					
 1200              		.loc 1 531 0
 1201 0890 FB8B     		ldrh	r3, [r7, #30]
 1202 0892 1846     		mov	r0, r3
 1203 0894 FFF7FEFF 		bl	PWM_Sample_Buffer_WriteCounter
 1204 0898 A8E2     		b	.L6
 1205              	.L127:
 1206 089a 00BFAFF3 		.align	3
 1206      0080
 1207              	.L126:
 1208 08a0 524CFEFF 		.word	-111534
 1209 08a4 83D7B73F 		.word	1069012867
 1210 08a8 EF384547 		.word	1195718895
 1211 08ac 72790A40 		.word	1074428274
 1212 08b0 6631B1F9 		.word	-105827994
 1213 08b4 B836E83F 		.word	1072182968
 1214 08b8 00000000 		.word	.LC0
 1215 08bc 20000000 		.word	.LC2
 1216 08c0 40540948 		.word	1208570944
 1217 08c4 00000000 		.word	trigger_source
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 32


 1218 08c8 00000000 		.word	preamp_a
 1219 08cc 00000000 		.word	preamp_trig
 1220 08d0 00000000 		.word	preamp_b
 1221 08d4 00007F43 		.word	1132396544
 1222              	.L62:
 532:main.c        **** 				}
 533:main.c        **** 				else if(*psz == 'R')
 1223              		.loc 1 533 0
 1224 08d8 FB68     		ldr	r3, [r7, #12]
 1225 08da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1226 08dc 522B     		cmp	r3, #82
 1227 08de 40F0F180 		bne	.L65
 534:main.c        **** 				{
 535:main.c        **** 					// Scope control register update
 536:main.c        **** 					// data comes back as an ascii number, representing an 8 bit value
 537:main.c        **** 					// bit 7: unused
 538:main.c        **** 					// bit 6: Internal (0, a or b as defined later) or External Trigger (1)
 539:main.c        **** 					// bit 5: trigger polarity, rising (0) or falling (1)
 540:main.c        **** 					// bit 4: trigger source, A (0) or B (1)
 541:main.c        **** 					// bits 3:0 -> sample rate 20 Msps / (2^thisval) this val can be 0 - 15
 542:main.c        **** 					psz = strtok(0, " ");
 1228              		.loc 1 542 0
 1229 08e2 B849     		ldr	r1, .L128
 1230 08e4 0020     		movs	r0, #0
 1231 08e6 FFF7FEFF 		bl	strtok
 1232 08ea F860     		str	r0, [r7, #12]
 543:main.c        **** 					sscanf(psz,"%hu", &avar);
 1233              		.loc 1 543 0
 1234 08ec BB1C     		adds	r3, r7, #2
 1235 08ee 1A46     		mov	r2, r3
 1236 08f0 B549     		ldr	r1, .L128+4
 1237 08f2 F868     		ldr	r0, [r7, #12]
 1238 08f4 FFF7FEFF 		bl	sscanf
 544:main.c        **** 					
 545:main.c        **** 					// internal versus external trigger
 546:main.c        **** 					// bit 6
 547:main.c        **** 					if((avar & 0x40) == 0)
 1239              		.loc 1 547 0
 1240 08f8 7B88     		ldrh	r3, [r7, #2]
 1241 08fa 03F04003 		and	r3, r3, #64
 1242 08fe 002B     		cmp	r3, #0
 1243 0900 2AD1     		bne	.L66
 548:main.c        **** 					{
 549:main.c        **** 						// internal trigger
 550:main.c        **** 						// trigger polarity
 551:main.c        **** 						// bit 5
 552:main.c        **** 						if((avar & 0x20) == 0)
 1244              		.loc 1 552 0
 1245 0902 7B88     		ldrh	r3, [r7, #2]
 1246 0904 03F02003 		and	r3, r3, #32
 1247 0908 002B     		cmp	r3, #0
 1248 090a 12D1     		bne	.L67
 553:main.c        **** 						{
 554:main.c        **** 							// rising edge
 555:main.c        **** 							Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1249              		.loc 1 555 0
 1250 090c FFF7FEFF 		bl	Trigger_Control_Read
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 33


 1251 0910 0346     		mov	r3, r0
 1252 0912 23F00F03 		bic	r3, r3, #15
 1253 0916 DBB2     		uxtb	r3, r3
 1254 0918 1846     		mov	r0, r3
 1255 091a FFF7FEFF 		bl	Trigger_Control_Write
 556:main.c        ****     						Trigger_Control_Write(Trigger_Control_Read() | RISING_EDGE_TRIGGERED);
 1256              		.loc 1 556 0
 1257 091e FFF7FEFF 		bl	Trigger_Control_Read
 1258 0922 0346     		mov	r3, r0
 1259 0924 43F00203 		orr	r3, r3, #2
 1260 0928 DBB2     		uxtb	r3, r3
 1261 092a 1846     		mov	r0, r3
 1262 092c FFF7FEFF 		bl	Trigger_Control_Write
 1263 0930 24E0     		b	.L69
 1264              	.L67:
 557:main.c        **** 						}
 558:main.c        **** 						else
 559:main.c        **** 						{
 560:main.c        **** 							// falling edge
 561:main.c        **** 							Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1265              		.loc 1 561 0
 1266 0932 FFF7FEFF 		bl	Trigger_Control_Read
 1267 0936 0346     		mov	r3, r0
 1268 0938 23F00F03 		bic	r3, r3, #15
 1269 093c DBB2     		uxtb	r3, r3
 1270 093e 1846     		mov	r0, r3
 1271 0940 FFF7FEFF 		bl	Trigger_Control_Write
 562:main.c        ****     						Trigger_Control_Write(Trigger_Control_Read() | FALLING_EDGE_TRIGGERED);
 1272              		.loc 1 562 0
 1273 0944 FFF7FEFF 		bl	Trigger_Control_Read
 1274 0948 0346     		mov	r3, r0
 1275 094a 43F00103 		orr	r3, r3, #1
 1276 094e DBB2     		uxtb	r3, r3
 1277 0950 1846     		mov	r0, r3
 1278 0952 FFF7FEFF 		bl	Trigger_Control_Write
 1279 0956 11E0     		b	.L69
 1280              	.L66:
 563:main.c        **** 						}
 564:main.c        **** 					}
 565:main.c        **** 					else
 566:main.c        **** 					{
 567:main.c        **** 						// external trigger
 568:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 1281              		.loc 1 568 0
 1282 0958 FFF7FEFF 		bl	Trigger_Control_Read
 1283 095c 0346     		mov	r3, r0
 1284 095e 23F00F03 		bic	r3, r3, #15
 1285 0962 DBB2     		uxtb	r3, r3
 1286 0964 1846     		mov	r0, r3
 1287 0966 FFF7FEFF 		bl	Trigger_Control_Write
 569:main.c        ****     					Trigger_Control_Write(Trigger_Control_Read() | EXTERNAL_TRIGGERED);
 1288              		.loc 1 569 0
 1289 096a FFF7FEFF 		bl	Trigger_Control_Read
 1290 096e 0346     		mov	r3, r0
 1291 0970 43F00803 		orr	r3, r3, #8
 1292 0974 DBB2     		uxtb	r3, r3
 1293 0976 1846     		mov	r0, r3
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 34


 1294 0978 FFF7FEFF 		bl	Trigger_Control_Write
 1295              	.L69:
 570:main.c        **** 					}
 571:main.c        **** 					
 572:main.c        **** 					// bit 4
 573:main.c        **** 					// trigger source select
 574:main.c        **** 					if((avar & 0x10) == 0)
 1296              		.loc 1 574 0
 1297 097c 7B88     		ldrh	r3, [r7, #2]
 1298 097e 03F01003 		and	r3, r3, #16
 1299 0982 002B     		cmp	r3, #0
 1300 0984 06D1     		bne	.L70
 575:main.c        **** 					{
 576:main.c        **** 						// channel 1 / A
 577:main.c        **** 						trigger_source = SCOPE_CHANNEL_1;
 1301              		.loc 1 577 0
 1302 0986 914B     		ldr	r3, .L128+8
 1303 0988 0022     		movs	r2, #0
 1304 098a 1A70     		strb	r2, [r3]
 578:main.c        **** 						Amux_Trigger_Select(SCOPE_CHANNEL_1);
 1305              		.loc 1 578 0
 1306 098c 0020     		movs	r0, #0
 1307 098e FFF7FEFF 		bl	Amux_Trigger_FastSelect
 1308 0992 05E0     		b	.L71
 1309              	.L70:
 579:main.c        **** 					}
 580:main.c        **** 					else
 581:main.c        **** 					{
 582:main.c        **** 						// channel 2 / B
 583:main.c        **** 						trigger_source = SCOPE_CHANNEL_2;
 1310              		.loc 1 583 0
 1311 0994 8D4B     		ldr	r3, .L128+8
 1312 0996 0122     		movs	r2, #1
 1313 0998 1A70     		strb	r2, [r3]
 584:main.c        **** 						Amux_Trigger_Select(SCOPE_CHANNEL_2);
 1314              		.loc 1 584 0
 1315 099a 0120     		movs	r0, #1
 1316 099c FFF7FEFF 		bl	Amux_Trigger_FastSelect
 1317              	.L71:
 585:main.c        **** 					}
 586:main.c        **** 					
 587:main.c        **** 					// sample rate
 588:main.c        **** 					// bit 3:0
 589:main.c        **** 					if((avar & 0x0f) <= 0) // 818.2 Ksps "maximum" sample rate
 1318              		.loc 1 589 0
 1319 09a0 7B88     		ldrh	r3, [r7, #2]
 1320 09a2 03F00F03 		and	r3, r3, #15
 1321 09a6 002B     		cmp	r3, #0
 1322 09a8 04DC     		bgt	.L72
 590:main.c        **** 					{
 591:main.c        ****                         // 36 Mhz master clock divided by this number and then divided by 
 592:main.c        ****                         // 18 due to the freq divider set the ADC sample rate.
 593:main.c        **** 						SampleClock_SetDividerValue(1); 
 1323              		.loc 1 593 0
 1324 09aa 0121     		movs	r1, #1
 1325 09ac 0020     		movs	r0, #0
 1326 09ae FFF7FEFF 		bl	SampleClock_SetDividerRegister
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 35


 1327 09b2 1BE2     		b	.L6
 1328              	.L72:
 594:main.c        **** 					}
 595:main.c        **** 					else if((avar & 0x0f) == 1) // 409.1 ksps
 1329              		.loc 1 595 0
 1330 09b4 7B88     		ldrh	r3, [r7, #2]
 1331 09b6 03F00F03 		and	r3, r3, #15
 1332 09ba 012B     		cmp	r3, #1
 1333 09bc 04D1     		bne	.L74
 596:main.c        **** 					{
 597:main.c        **** 						SampleClock_SetDividerValue(2);
 1334              		.loc 1 597 0
 1335 09be 0121     		movs	r1, #1
 1336 09c0 0120     		movs	r0, #1
 1337 09c2 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1338 09c6 11E2     		b	.L6
 1339              	.L74:
 598:main.c        **** 					}
 599:main.c        **** 					else if((avar & 0x0f) == 2) // 204.5 ksps
 1340              		.loc 1 599 0
 1341 09c8 7B88     		ldrh	r3, [r7, #2]
 1342 09ca 03F00F03 		and	r3, r3, #15
 1343 09ce 022B     		cmp	r3, #2
 1344 09d0 04D1     		bne	.L75
 600:main.c        **** 					{
 601:main.c        **** 						SampleClock_SetDividerValue(4);
 1345              		.loc 1 601 0
 1346 09d2 0121     		movs	r1, #1
 1347 09d4 0320     		movs	r0, #3
 1348 09d6 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1349 09da 07E2     		b	.L6
 1350              	.L75:
 602:main.c        **** 					}
 603:main.c        **** 					else if((avar & 0x0f) == 3) // 102.3 ksps
 1351              		.loc 1 603 0
 1352 09dc 7B88     		ldrh	r3, [r7, #2]
 1353 09de 03F00F03 		and	r3, r3, #15
 1354 09e2 032B     		cmp	r3, #3
 1355 09e4 04D1     		bne	.L76
 604:main.c        **** 					{
 605:main.c        **** 						SampleClock_SetDividerValue(8);
 1356              		.loc 1 605 0
 1357 09e6 0121     		movs	r1, #1
 1358 09e8 0720     		movs	r0, #7
 1359 09ea FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1360 09ee FDE1     		b	.L6
 1361              	.L76:
 606:main.c        **** 					}
 607:main.c        **** 					else if((avar & 0x0f) == 4) // 51.1 ksps
 1362              		.loc 1 607 0
 1363 09f0 7B88     		ldrh	r3, [r7, #2]
 1364 09f2 03F00F03 		and	r3, r3, #15
 1365 09f6 042B     		cmp	r3, #4
 1366 09f8 04D1     		bne	.L77
 608:main.c        **** 					{ 
 609:main.c        **** 						SampleClock_SetDividerValue(16);
 1367              		.loc 1 609 0
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 36


 1368 09fa 0121     		movs	r1, #1
 1369 09fc 0F20     		movs	r0, #15
 1370 09fe FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1371 0a02 F3E1     		b	.L6
 1372              	.L77:
 610:main.c        **** 					}
 611:main.c        **** 					else if((avar & 0x0f) == 5) // 25.6 ksps
 1373              		.loc 1 611 0
 1374 0a04 7B88     		ldrh	r3, [r7, #2]
 1375 0a06 03F00F03 		and	r3, r3, #15
 1376 0a0a 052B     		cmp	r3, #5
 1377 0a0c 04D1     		bne	.L78
 612:main.c        **** 					{
 613:main.c        **** 						SampleClock_SetDividerValue(32);
 1378              		.loc 1 613 0
 1379 0a0e 0121     		movs	r1, #1
 1380 0a10 1F20     		movs	r0, #31
 1381 0a12 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1382 0a16 E9E1     		b	.L6
 1383              	.L78:
 614:main.c        **** 					}
 615:main.c        **** 					else if((avar & 0x0f) == 6) // 12.8 ksps
 1384              		.loc 1 615 0
 1385 0a18 7B88     		ldrh	r3, [r7, #2]
 1386 0a1a 03F00F03 		and	r3, r3, #15
 1387 0a1e 062B     		cmp	r3, #6
 1388 0a20 04D1     		bne	.L79
 616:main.c        **** 					{
 617:main.c        **** 						SampleClock_SetDividerValue(64);
 1389              		.loc 1 617 0
 1390 0a22 0121     		movs	r1, #1
 1391 0a24 3F20     		movs	r0, #63
 1392 0a26 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1393 0a2a DFE1     		b	.L6
 1394              	.L79:
 618:main.c        **** 					}
 619:main.c        **** 					else if((avar & 0x0f) == 7) // 6.4 ksps
 1395              		.loc 1 619 0
 1396 0a2c 7B88     		ldrh	r3, [r7, #2]
 1397 0a2e 03F00F03 		and	r3, r3, #15
 1398 0a32 072B     		cmp	r3, #7
 1399 0a34 04D1     		bne	.L80
 620:main.c        **** 					{ 
 621:main.c        **** 						SampleClock_SetDividerValue(128);
 1400              		.loc 1 621 0
 1401 0a36 0121     		movs	r1, #1
 1402 0a38 7F20     		movs	r0, #127
 1403 0a3a FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1404 0a3e D5E1     		b	.L6
 1405              	.L80:
 622:main.c        **** 					}
 623:main.c        **** 					else if((avar & 0x0f) == 8) // 3.2 ksps
 1406              		.loc 1 623 0
 1407 0a40 7B88     		ldrh	r3, [r7, #2]
 1408 0a42 03F00F03 		and	r3, r3, #15
 1409 0a46 082B     		cmp	r3, #8
 1410 0a48 04D1     		bne	.L81
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 37


 624:main.c        **** 					{
 625:main.c        **** 						SampleClock_SetDividerValue(256);
 1411              		.loc 1 625 0
 1412 0a4a 0121     		movs	r1, #1
 1413 0a4c FF20     		movs	r0, #255
 1414 0a4e FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1415 0a52 CBE1     		b	.L6
 1416              	.L81:
 626:main.c        **** 					}
 627:main.c        **** 					else if((avar & 0x0f) == 9) // 1.6 ksps
 1417              		.loc 1 627 0
 1418 0a54 7B88     		ldrh	r3, [r7, #2]
 1419 0a56 03F00F03 		and	r3, r3, #15
 1420 0a5a 092B     		cmp	r3, #9
 1421 0a5c 05D1     		bne	.L82
 628:main.c        **** 					{
 629:main.c        **** 						SampleClock_SetDividerValue(512);
 1422              		.loc 1 629 0
 1423 0a5e 0121     		movs	r1, #1
 1424 0a60 40F2FF10 		movw	r0, #511
 1425 0a64 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1426 0a68 C0E1     		b	.L6
 1427              	.L82:
 630:main.c        **** 					}
 631:main.c        **** 					else if((avar & 0x0f) == 10) // 799 sps 
 1428              		.loc 1 631 0
 1429 0a6a 7B88     		ldrh	r3, [r7, #2]
 1430 0a6c 03F00F03 		and	r3, r3, #15
 1431 0a70 0A2B     		cmp	r3, #10
 1432 0a72 05D1     		bne	.L83
 632:main.c        **** 					{ 
 633:main.c        **** 						SampleClock_SetDividerValue(1024);
 1433              		.loc 1 633 0
 1434 0a74 0121     		movs	r1, #1
 1435 0a76 40F2FF30 		movw	r0, #1023
 1436 0a7a FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1437 0a7e B5E1     		b	.L6
 1438              	.L83:
 634:main.c        **** 					}
 635:main.c        **** 					else if((avar & 0x0f) == 11) // 400 sps
 1439              		.loc 1 635 0
 1440 0a80 7B88     		ldrh	r3, [r7, #2]
 1441 0a82 03F00F03 		and	r3, r3, #15
 1442 0a86 0B2B     		cmp	r3, #11
 1443 0a88 05D1     		bne	.L84
 636:main.c        **** 					{ 
 637:main.c        **** 						SampleClock_SetDividerValue(2048);
 1444              		.loc 1 637 0
 1445 0a8a 0121     		movs	r1, #1
 1446 0a8c 40F2FF70 		movw	r0, #2047
 1447 0a90 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1448 0a94 AAE1     		b	.L6
 1449              	.L84:
 638:main.c        **** 					}                    
 639:main.c        **** 					else if((avar & 0x0f) == 12) // 200 sps
 1450              		.loc 1 639 0
 1451 0a96 7B88     		ldrh	r3, [r7, #2]
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 38


 1452 0a98 03F00F03 		and	r3, r3, #15
 1453 0a9c 0C2B     		cmp	r3, #12
 1454 0a9e 05D1     		bne	.L85
 640:main.c        **** 					{ 
 641:main.c        **** 						SampleClock_SetDividerValue(4096);
 1455              		.loc 1 641 0
 1456 0aa0 0121     		movs	r1, #1
 1457 0aa2 40F6FF70 		movw	r0, #4095
 1458 0aa6 FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1459 0aaa 9FE1     		b	.L6
 1460              	.L85:
 642:main.c        **** 					}
 643:main.c        **** 					else if((avar & 0x0f) >= 13) // 100 sps
 1461              		.loc 1 643 0
 1462 0aac 7B88     		ldrh	r3, [r7, #2]
 1463 0aae 03F00F03 		and	r3, r3, #15
 1464 0ab2 0C2B     		cmp	r3, #12
 1465 0ab4 40F39A81 		ble	.L6
 644:main.c        **** 					{ 
 645:main.c        **** 						SampleClock_SetDividerValue(8192);
 1466              		.loc 1 645 0
 1467 0ab8 0121     		movs	r1, #1
 1468 0aba 41F6FF70 		movw	r0, #8191
 1469 0abe FFF7FEFF 		bl	SampleClock_SetDividerRegister
 1470 0ac2 93E1     		b	.L6
 1471              	.L65:
 646:main.c        **** 					}
 647:main.c        ****                 }
 648:main.c        **** 				else if(*psz == 'D')
 1472              		.loc 1 648 0
 1473 0ac4 FB68     		ldr	r3, [r7, #12]
 1474 0ac6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1475 0ac8 442B     		cmp	r3, #68
 1476 0aca 59D1     		bne	.L86
 649:main.c        **** 				{
 650:main.c        **** 					// Scope debug hardware command
 651:main.c        **** 					// data comes back as an ascii number, representing a single value
 652:main.c        **** 					// 0 set reset to 0
 653:main.c        **** 					// 1 set reset to 1
 654:main.c        **** 					// 2 set REQ = 0
 655:main.c        **** 					// 3 set REQ = 1
 656:main.c        **** 					// 4 set MAN_TRIG = 1
 657:main.c        **** 					// 5 set MAN_TRIG = 0
 658:main.c        **** 					psz = strtok(0, " ");
 1477              		.loc 1 658 0
 1478 0acc 3D49     		ldr	r1, .L128
 1479 0ace 0020     		movs	r0, #0
 1480 0ad0 FFF7FEFF 		bl	strtok
 1481 0ad4 F860     		str	r0, [r7, #12]
 659:main.c        **** 					sscanf(psz,"%hu", &avar);
 1482              		.loc 1 659 0
 1483 0ad6 BB1C     		adds	r3, r7, #2
 1484 0ad8 1A46     		mov	r2, r3
 1485 0ada 3B49     		ldr	r1, .L128+4
 1486 0adc F868     		ldr	r0, [r7, #12]
 1487 0ade FFF7FEFF 		bl	sscanf
 660:main.c        **** 					
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 39


 661:main.c        **** 					if(avar == 0) // reset PWM = 0
 1488              		.loc 1 661 0
 1489 0ae2 7B88     		ldrh	r3, [r7, #2]
 1490 0ae4 002B     		cmp	r3, #0
 1491 0ae6 09D1     		bne	.L87
 662:main.c        **** 					{
 663:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~RESET_PWM);
 1492              		.loc 1 663 0
 1493 0ae8 FFF7FEFF 		bl	Trigger_Control_Read
 1494 0aec 0346     		mov	r3, r0
 1495 0aee 03F07F03 		and	r3, r3, #127
 1496 0af2 DBB2     		uxtb	r3, r3
 1497 0af4 1846     		mov	r0, r3
 1498 0af6 FFF7FEFF 		bl	Trigger_Control_Write
 1499 0afa 77E1     		b	.L6
 1500              	.L87:
 664:main.c        **** 					}
 665:main.c        **** 					else if(avar == 1) // reset PWM = 1
 1501              		.loc 1 665 0
 1502 0afc 7B88     		ldrh	r3, [r7, #2]
 1503 0afe 012B     		cmp	r3, #1
 1504 0b00 09D1     		bne	.L89
 666:main.c        **** 					{
 667:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | RESET_PWM);
 1505              		.loc 1 667 0
 1506 0b02 FFF7FEFF 		bl	Trigger_Control_Read
 1507 0b06 0346     		mov	r3, r0
 1508 0b08 63F07F03 		orn	r3, r3, #127
 1509 0b0c DBB2     		uxtb	r3, r3
 1510 0b0e 1846     		mov	r0, r3
 1511 0b10 FFF7FEFF 		bl	Trigger_Control_Write
 1512 0b14 6AE1     		b	.L6
 1513              	.L89:
 668:main.c        **** 					}
 669:main.c        **** 					else if(avar == 2) // set REQ = 0
 1514              		.loc 1 669 0
 1515 0b16 7B88     		ldrh	r3, [r7, #2]
 1516 0b18 022B     		cmp	r3, #2
 1517 0b1a 09D1     		bne	.L90
 670:main.c        **** 					{
 671:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 1518              		.loc 1 671 0
 1519 0b1c FFF7FEFF 		bl	Trigger_Control_Read
 1520 0b20 0346     		mov	r3, r0
 1521 0b22 23F04003 		bic	r3, r3, #64
 1522 0b26 DBB2     		uxtb	r3, r3
 1523 0b28 1846     		mov	r0, r3
 1524 0b2a FFF7FEFF 		bl	Trigger_Control_Write
 1525 0b2e 5DE1     		b	.L6
 1526              	.L90:
 672:main.c        **** 					}
 673:main.c        **** 					else if(avar == 3) // set REQ = 1
 1527              		.loc 1 673 0
 1528 0b30 7B88     		ldrh	r3, [r7, #2]
 1529 0b32 032B     		cmp	r3, #3
 1530 0b34 09D1     		bne	.L91
 674:main.c        **** 					{
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 40


 675:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 1531              		.loc 1 675 0
 1532 0b36 FFF7FEFF 		bl	Trigger_Control_Read
 1533 0b3a 0346     		mov	r3, r0
 1534 0b3c 43F04003 		orr	r3, r3, #64
 1535 0b40 DBB2     		uxtb	r3, r3
 1536 0b42 1846     		mov	r0, r3
 1537 0b44 FFF7FEFF 		bl	Trigger_Control_Write
 1538 0b48 50E1     		b	.L6
 1539              	.L91:
 676:main.c        **** 					}
 677:main.c        **** 					else if(avar == 4) // manual trigger = 0
 1540              		.loc 1 677 0
 1541 0b4a 7B88     		ldrh	r3, [r7, #2]
 1542 0b4c 042B     		cmp	r3, #4
 1543 0b4e 09D1     		bne	.L92
 678:main.c        **** 					{
 679:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() & ~MANUAL_TRIGGER);
 1544              		.loc 1 679 0
 1545 0b50 FFF7FEFF 		bl	Trigger_Control_Read
 1546 0b54 0346     		mov	r3, r0
 1547 0b56 23F01003 		bic	r3, r3, #16
 1548 0b5a DBB2     		uxtb	r3, r3
 1549 0b5c 1846     		mov	r0, r3
 1550 0b5e FFF7FEFF 		bl	Trigger_Control_Write
 1551 0b62 43E1     		b	.L6
 1552              	.L92:
 680:main.c        **** 					}
 681:main.c        **** 					else if(avar == 5) // manual trigger = 1
 1553              		.loc 1 681 0
 1554 0b64 7B88     		ldrh	r3, [r7, #2]
 1555 0b66 052B     		cmp	r3, #5
 1556 0b68 40F04081 		bne	.L6
 682:main.c        **** 					{
 683:main.c        **** 						//Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 684:main.c        **** 						//Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 685:main.c        **** 						Trigger_Control_Write(Trigger_Control_Read() | MANUAL_TRIGGER);
 1557              		.loc 1 685 0
 1558 0b6c FFF7FEFF 		bl	Trigger_Control_Read
 1559 0b70 0346     		mov	r3, r0
 1560 0b72 43F01003 		orr	r3, r3, #16
 1561 0b76 DBB2     		uxtb	r3, r3
 1562 0b78 1846     		mov	r0, r3
 1563 0b7a FFF7FEFF 		bl	Trigger_Control_Write
 1564 0b7e 35E1     		b	.L6
 1565              	.L86:
 686:main.c        **** 					}
 687:main.c        **** 					
 688:main.c        **** 				}
 689:main.c        **** 				else if(*psz == 'G')
 1566              		.loc 1 689 0
 1567 0b80 FB68     		ldr	r3, [r7, #12]
 1568 0b82 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1569 0b84 472B     		cmp	r3, #71
 1570 0b86 12D1     		bne	.L93
 690:main.c        **** 				{
 691:main.c        **** 					// Scope GO, arms the scope and waits for a trigger event
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 41


 692:main.c        **** 					// if a trigger occurs, sends back the character 'A' followed
 693:main.c        **** 					// by a 2nd and 3rd byte in binary format indicating the address
 694:main.c        **** 					// where the capture ended in the buffer (10 bits).  I'm assuming Aa format
 695:main.c        **** 					
 696:main.c        **** 					// arm the scope
 697:main.c        **** 					Trigger_Control_Write(Trigger_Control_Read() | TRIGGER_ARM);
 1571              		.loc 1 697 0
 1572 0b88 FFF7FEFF 		bl	Trigger_Control_Read
 1573 0b8c 0346     		mov	r3, r0
 1574 0b8e 43F04003 		orr	r3, r3, #64
 1575 0b92 DBB2     		uxtb	r3, r3
 1576 0b94 1846     		mov	r0, r3
 1577 0b96 FFF7FEFF 		bl	Trigger_Control_Write
 698:main.c        **** 					Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_ARM);
 1578              		.loc 1 698 0
 1579 0b9a FFF7FEFF 		bl	Trigger_Control_Read
 1580 0b9e 0346     		mov	r3, r0
 1581 0ba0 23F04003 		bic	r3, r3, #64
 1582 0ba4 DBB2     		uxtb	r3, r3
 1583 0ba6 1846     		mov	r0, r3
 1584 0ba8 FFF7FEFF 		bl	Trigger_Control_Write
 1585 0bac 1EE1     		b	.L6
 1586              	.L93:
 699:main.c        **** 					
 700:main.c        **** 				}
 701:main.c        **** 				else if(*psz == 'B')
 1587              		.loc 1 701 0
 1588 0bae FB68     		ldr	r3, [r7, #12]
 1589 0bb0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1590 0bb2 422B     		cmp	r3, #66
 1591 0bb4 40F0E880 		bne	.L94
 702:main.c        **** 				{
 703:main.c        **** 					// dump the scope buffer
 704:main.c        **** 					PutChar('D');
 1592              		.loc 1 704 0
 1593 0bb8 4420     		movs	r0, #68
 1594 0bba FFF7FEFF 		bl	PutChar
 705:main.c        **** 					
 706:main.c        **** 					for(i = 0; i < BUFFER_SIZE; i++)
 1595              		.loc 1 706 0
 1596 0bbe 0023     		movs	r3, #0
 1597 0bc0 BB83     		strh	r3, [r7, #28]	@ movhi
 1598 0bc2 DBE0     		b	.L95
 1599              	.L129:
 1600              		.align	2
 1601              	.L128:
 1602 0bc4 00000000 		.word	.LC0
 1603 0bc8 20000000 		.word	.LC2
 1604 0bcc 00000000 		.word	trigger_source
 1605              	.L105:
 707:main.c        **** 					{
 708:main.c        **** 						// truncate to 10 bits and "offset" to work with scope hardware
 709:main.c        **** 						if(preamp_a == 1)
 1606              		.loc 1 709 0
 1607 0bd0 B14B     		ldr	r3, .L130+32
 1608 0bd2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1609 0bd4 012B     		cmp	r3, #1
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 42


 1610 0bd6 1ED1     		bne	.L96
 710:main.c        **** 						{ // preamp gain of 1
 711:main.c        **** 							avar = (uint16) (511 - (Channel_1_Data[i]/42.68));
 1611              		.loc 1 711 0
 1612 0bd8 BB8B     		ldrh	r3, [r7, #28]
 1613 0bda B04A     		ldr	r2, .L130+36
 1614 0bdc 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1615 0be0 1846     		mov	r0, r3
 1616 0be2 FFF7FEFF 		bl	__aeabi_i2d
 1617 0be6 A4A3     		adr	r3, .L130
 1618 0be8 D3E90023 		ldrd	r2, [r3]
 1619 0bec FFF7FEFF 		bl	__aeabi_ddiv
 1620 0bf0 0346     		mov	r3, r0
 1621 0bf2 0C46     		mov	r4, r1
 1622 0bf4 1A46     		mov	r2, r3
 1623 0bf6 2346     		mov	r3, r4
 1624 0bf8 A1A1     		adr	r1, .L130+8
 1625 0bfa D1E90001 		ldrd	r0, [r1]
 1626 0bfe FFF7FEFF 		bl	__aeabi_dsub
 1627 0c02 0346     		mov	r3, r0
 1628 0c04 0C46     		mov	r4, r1
 1629 0c06 1846     		mov	r0, r3
 1630 0c08 2146     		mov	r1, r4
 1631 0c0a FFF7FEFF 		bl	__aeabi_d2uiz
 1632 0c0e 0346     		mov	r3, r0
 1633 0c10 9BB2     		uxth	r3, r3
 1634 0c12 7B80     		strh	r3, [r7, #2]	@ movhi
 1635 0c14 1DE0     		b	.L97
 1636              	.L96:
 712:main.c        **** 						}
 713:main.c        **** 						else
 714:main.c        **** 						{ // preamp gain of 10
 715:main.c        **** 							// GJL - fix truncation at 3V by changing 511 to 1023 and fixing in scope.tcl also
 716:main.c        ****                             avar = (uint16) (1023 - (Channel_1_Data[i]/4.8497));
 1637              		.loc 1 716 0
 1638 0c16 BB8B     		ldrh	r3, [r7, #28]
 1639 0c18 A04A     		ldr	r2, .L130+36
 1640 0c1a 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1641 0c1e 1846     		mov	r0, r3
 1642 0c20 FFF7FEFF 		bl	__aeabi_i2d
 1643 0c24 98A3     		adr	r3, .L130+16
 1644 0c26 D3E90023 		ldrd	r2, [r3]
 1645 0c2a FFF7FEFF 		bl	__aeabi_ddiv
 1646 0c2e 0346     		mov	r3, r0
 1647 0c30 0C46     		mov	r4, r1
 1648 0c32 1A46     		mov	r2, r3
 1649 0c34 2346     		mov	r3, r4
 1650 0c36 96A1     		adr	r1, .L130+24
 1651 0c38 D1E90001 		ldrd	r0, [r1]
 1652 0c3c FFF7FEFF 		bl	__aeabi_dsub
 1653 0c40 0346     		mov	r3, r0
 1654 0c42 0C46     		mov	r4, r1
 1655 0c44 1846     		mov	r0, r3
 1656 0c46 2146     		mov	r1, r4
 1657 0c48 FFF7FEFF 		bl	__aeabi_d2uiz
 1658 0c4c 0346     		mov	r3, r0
 1659 0c4e 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 43


 1660 0c50 7B80     		strh	r3, [r7, #2]	@ movhi
 1661              	.L97:
 717:main.c        **** 						}
 718:main.c        **** 						
 719:main.c        **** 						if(preamp_b == 1)
 1662              		.loc 1 719 0
 1663 0c52 934B     		ldr	r3, .L130+40
 1664 0c54 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1665 0c56 012B     		cmp	r3, #1
 1666 0c58 1DD1     		bne	.L98
 720:main.c        **** 						{ // preamp gain of 1
 721:main.c        **** 							bvar = (uint16) (511 - (Channel_2_Data[i]/42.68));
 1667              		.loc 1 721 0
 1668 0c5a BB8B     		ldrh	r3, [r7, #28]
 1669 0c5c 914A     		ldr	r2, .L130+44
 1670 0c5e 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1671 0c62 1846     		mov	r0, r3
 1672 0c64 FFF7FEFF 		bl	__aeabi_i2d
 1673 0c68 83A3     		adr	r3, .L130
 1674 0c6a D3E90023 		ldrd	r2, [r3]
 1675 0c6e FFF7FEFF 		bl	__aeabi_ddiv
 1676 0c72 0346     		mov	r3, r0
 1677 0c74 0C46     		mov	r4, r1
 1678 0c76 1A46     		mov	r2, r3
 1679 0c78 2346     		mov	r3, r4
 1680 0c7a 81A1     		adr	r1, .L130+8
 1681 0c7c D1E90001 		ldrd	r0, [r1]
 1682 0c80 FFF7FEFF 		bl	__aeabi_dsub
 1683 0c84 0346     		mov	r3, r0
 1684 0c86 0C46     		mov	r4, r1
 1685 0c88 1846     		mov	r0, r3
 1686 0c8a 2146     		mov	r1, r4
 1687 0c8c FFF7FEFF 		bl	__aeabi_d2uiz
 1688 0c90 0346     		mov	r3, r0
 1689 0c92 FB83     		strh	r3, [r7, #30]	@ movhi
 1690 0c94 1CE0     		b	.L99
 1691              	.L98:
 722:main.c        **** 						}
 723:main.c        **** 						else
 724:main.c        **** 						{ // preamp gain of 10
 725:main.c        **** 							bvar = (uint16) (1023 - (Channel_2_Data[i]/4.8497));
 1692              		.loc 1 725 0
 1693 0c96 BB8B     		ldrh	r3, [r7, #28]
 1694 0c98 824A     		ldr	r2, .L130+44
 1695 0c9a 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1696 0c9e 1846     		mov	r0, r3
 1697 0ca0 FFF7FEFF 		bl	__aeabi_i2d
 1698 0ca4 78A3     		adr	r3, .L130+16
 1699 0ca6 D3E90023 		ldrd	r2, [r3]
 1700 0caa FFF7FEFF 		bl	__aeabi_ddiv
 1701 0cae 0346     		mov	r3, r0
 1702 0cb0 0C46     		mov	r4, r1
 1703 0cb2 1A46     		mov	r2, r3
 1704 0cb4 2346     		mov	r3, r4
 1705 0cb6 76A1     		adr	r1, .L130+24
 1706 0cb8 D1E90001 		ldrd	r0, [r1]
 1707 0cbc FFF7FEFF 		bl	__aeabi_dsub
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 44


 1708 0cc0 0346     		mov	r3, r0
 1709 0cc2 0C46     		mov	r4, r1
 1710 0cc4 1846     		mov	r0, r3
 1711 0cc6 2146     		mov	r1, r4
 1712 0cc8 FFF7FEFF 		bl	__aeabi_d2uiz
 1713 0ccc 0346     		mov	r3, r0
 1714 0cce FB83     		strh	r3, [r7, #30]	@ movhi
 1715              	.L99:
 726:main.c        **** 						}
 727:main.c        **** 						
 728:main.c        **** 						// send the data out to the terminal
 729:main.c        **** 						USB_Out_Buffer[(i*4+0) % USBUART_BUFFER_SIZE] = (uint8) ((avar >> 8) & 0x0003); // address of
 1716              		.loc 1 729 0
 1717 0cd0 BB8B     		ldrh	r3, [r7, #28]
 1718 0cd2 9B00     		lsls	r3, r3, #2
 1719 0cd4 03F03C03 		and	r3, r3, #60
 1720 0cd8 7A88     		ldrh	r2, [r7, #2]
 1721 0cda 120A     		lsrs	r2, r2, #8
 1722 0cdc 92B2     		uxth	r2, r2
 1723 0cde D2B2     		uxtb	r2, r2
 1724 0ce0 02F00302 		and	r2, r2, #3
 1725 0ce4 D1B2     		uxtb	r1, r2
 1726 0ce6 704A     		ldr	r2, .L130+48
 1727 0ce8 D154     		strb	r1, [r2, r3]
 730:main.c        **** 						USB_Out_Buffer[(i*4+1) % USBUART_BUFFER_SIZE] = (uint8) (avar & 0x00FF); // address of the en
 1728              		.loc 1 730 0
 1729 0cea BB8B     		ldrh	r3, [r7, #28]
 1730 0cec 9B00     		lsls	r3, r3, #2
 1731 0cee 5A1C     		adds	r2, r3, #1
 1732 0cf0 6E4B     		ldr	r3, .L130+52
 1733 0cf2 1340     		ands	r3, r3, r2
 1734 0cf4 002B     		cmp	r3, #0
 1735 0cf6 03DA     		bge	.L100
 1736 0cf8 013B     		subs	r3, r3, #1
 1737 0cfa 63F03F03 		orn	r3, r3, #63
 1738 0cfe 0133     		adds	r3, r3, #1
 1739              	.L100:
 1740 0d00 1A46     		mov	r2, r3
 1741 0d02 7B88     		ldrh	r3, [r7, #2]
 1742 0d04 D9B2     		uxtb	r1, r3
 1743 0d06 684B     		ldr	r3, .L130+48
 1744 0d08 9954     		strb	r1, [r3, r2]
 731:main.c        **** 						USB_Out_Buffer[(i*4+2) % USBUART_BUFFER_SIZE] = (uint8) ((bvar >> 8) & 0x0003); // address of
 1745              		.loc 1 731 0
 1746 0d0a BB8B     		ldrh	r3, [r7, #28]
 1747 0d0c 9B00     		lsls	r3, r3, #2
 1748 0d0e 9A1C     		adds	r2, r3, #2
 1749 0d10 664B     		ldr	r3, .L130+52
 1750 0d12 1340     		ands	r3, r3, r2
 1751 0d14 002B     		cmp	r3, #0
 1752 0d16 03DA     		bge	.L101
 1753 0d18 013B     		subs	r3, r3, #1
 1754 0d1a 63F03F03 		orn	r3, r3, #63
 1755 0d1e 0133     		adds	r3, r3, #1
 1756              	.L101:
 1757 0d20 1A46     		mov	r2, r3
 1758 0d22 FB8B     		ldrh	r3, [r7, #30]
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 45


 1759 0d24 1B0A     		lsrs	r3, r3, #8
 1760 0d26 9BB2     		uxth	r3, r3
 1761 0d28 DBB2     		uxtb	r3, r3
 1762 0d2a 03F00303 		and	r3, r3, #3
 1763 0d2e D9B2     		uxtb	r1, r3
 1764 0d30 5D4B     		ldr	r3, .L130+48
 1765 0d32 9954     		strb	r1, [r3, r2]
 732:main.c        **** 						USB_Out_Buffer[(i*4+3) % USBUART_BUFFER_SIZE] = (uint8) (bvar & 0x00FF); // address of the en
 1766              		.loc 1 732 0
 1767 0d34 BB8B     		ldrh	r3, [r7, #28]
 1768 0d36 9B00     		lsls	r3, r3, #2
 1769 0d38 DA1C     		adds	r2, r3, #3
 1770 0d3a 5C4B     		ldr	r3, .L130+52
 1771 0d3c 1340     		ands	r3, r3, r2
 1772 0d3e 002B     		cmp	r3, #0
 1773 0d40 03DA     		bge	.L102
 1774 0d42 013B     		subs	r3, r3, #1
 1775 0d44 63F03F03 		orn	r3, r3, #63
 1776 0d48 0133     		adds	r3, r3, #1
 1777              	.L102:
 1778 0d4a 1A46     		mov	r2, r3
 1779 0d4c FB8B     		ldrh	r3, [r7, #30]	@ movhi
 1780 0d4e D9B2     		uxtb	r1, r3
 1781 0d50 554B     		ldr	r3, .L130+48
 1782 0d52 9954     		strb	r1, [r3, r2]
 733:main.c        **** 						
 734:main.c        **** 						// our buffer has been filled up, dump the data out the serial port
 735:main.c        **** 						if(((i*4+4) % USBUART_BUFFER_SIZE) == 0)
 1783              		.loc 1 735 0
 1784 0d54 BB8B     		ldrh	r3, [r7, #28]
 1785 0d56 0133     		adds	r3, r3, #1
 1786 0d58 9B00     		lsls	r3, r3, #2
 1787 0d5a 03F03C03 		and	r3, r3, #60
 1788 0d5e 002B     		cmp	r3, #0
 1789 0d60 09D1     		bne	.L103
 736:main.c        **** 						{
 737:main.c        **** 							while(USBUART_CDCIsReady() == 0){};
 1790              		.loc 1 737 0
 1791 0d62 00BF     		nop
 1792              	.L104:
 1793              		.loc 1 737 0 is_stmt 0 discriminator 1
 1794 0d64 FFF7FEFF 		bl	USBUART_CDCIsReady
 1795 0d68 0346     		mov	r3, r0
 1796 0d6a 002B     		cmp	r3, #0
 1797 0d6c FAD0     		beq	.L104
 738:main.c        **** 							USBUART_PutData(USB_Out_Buffer, USBUART_BUFFER_SIZE);
 1798              		.loc 1 738 0 is_stmt 1
 1799 0d6e 4021     		movs	r1, #64
 1800 0d70 4D48     		ldr	r0, .L130+48
 1801 0d72 FFF7FEFF 		bl	USBUART_PutData
 1802              	.L103:
 706:main.c        **** 					{
 1803              		.loc 1 706 0 discriminator 2
 1804 0d76 BB8B     		ldrh	r3, [r7, #28]
 1805 0d78 0133     		adds	r3, r3, #1
 1806 0d7a BB83     		strh	r3, [r7, #28]	@ movhi
 1807              	.L95:
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 46


 706:main.c        **** 					{
 1808              		.loc 1 706 0 is_stmt 0 discriminator 1
 1809 0d7c BB8B     		ldrh	r3, [r7, #28]
 1810 0d7e B3F5806F 		cmp	r3, #1024
 1811 0d82 FFF425AF 		bcc	.L105
 1812 0d86 31E0     		b	.L6
 1813              	.L94:
 739:main.c        **** 						}
 740:main.c        **** 					}
 741:main.c        **** 				}
 742:main.c        **** 				else if(*psz == 'P')
 1814              		.loc 1 742 0 is_stmt 1
 1815 0d88 FB68     		ldr	r3, [r7, #12]
 1816 0d8a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1817 0d8c 502B     		cmp	r3, #80
 1818 0d8e 24D1     		bne	.L106
 743:main.c        **** 				{
 744:main.c        **** 					// Scope Preamp settings
 745:main.c        **** 					// a = channel 1 preamp 10x
 746:main.c        **** 					// A = channel 1 preamp 1x
 747:main.c        **** 					// b = channel 2 preamp 10x
 748:main.c        **** 					// B = channel 2 preamp 1x
 749:main.c        **** 					psz = strtok(0, " ");
 1819              		.loc 1 749 0
 1820 0d90 4749     		ldr	r1, .L130+56
 1821 0d92 0020     		movs	r0, #0
 1822 0d94 FFF7FEFF 		bl	strtok
 1823 0d98 F860     		str	r0, [r7, #12]
 750:main.c        **** 					
 751:main.c        **** 					if(*psz == 'a')
 1824              		.loc 1 751 0
 1825 0d9a FB68     		ldr	r3, [r7, #12]
 1826 0d9c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1827 0d9e 612B     		cmp	r3, #97
 1828 0da0 03D1     		bne	.L107
 752:main.c        **** 					{
 753:main.c        **** 						preamp_a = 10;
 1829              		.loc 1 753 0
 1830 0da2 3D4B     		ldr	r3, .L130+32
 1831 0da4 0A22     		movs	r2, #10
 1832 0da6 1A70     		strb	r2, [r3]
 1833 0da8 20E0     		b	.L6
 1834              	.L107:
 754:main.c        **** 					}
 755:main.c        **** 					else if(*psz == 'A')
 1835              		.loc 1 755 0
 1836 0daa FB68     		ldr	r3, [r7, #12]
 1837 0dac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1838 0dae 412B     		cmp	r3, #65
 1839 0db0 03D1     		bne	.L109
 756:main.c        **** 					{
 757:main.c        **** 						preamp_a = 1;
 1840              		.loc 1 757 0
 1841 0db2 394B     		ldr	r3, .L130+32
 1842 0db4 0122     		movs	r2, #1
 1843 0db6 1A70     		strb	r2, [r3]
 1844 0db8 18E0     		b	.L6
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 47


 1845              	.L109:
 758:main.c        **** 					}
 759:main.c        **** 					else if(*psz == 'b')
 1846              		.loc 1 759 0
 1847 0dba FB68     		ldr	r3, [r7, #12]
 1848 0dbc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1849 0dbe 622B     		cmp	r3, #98
 1850 0dc0 03D1     		bne	.L110
 760:main.c        **** 					{
 761:main.c        **** 						preamp_b = 10;
 1851              		.loc 1 761 0
 1852 0dc2 374B     		ldr	r3, .L130+40
 1853 0dc4 0A22     		movs	r2, #10
 1854 0dc6 1A70     		strb	r2, [r3]
 1855 0dc8 10E0     		b	.L6
 1856              	.L110:
 762:main.c        **** 					}
 763:main.c        **** 					else if(*psz == 'B')
 1857              		.loc 1 763 0
 1858 0dca FB68     		ldr	r3, [r7, #12]
 1859 0dcc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1860 0dce 422B     		cmp	r3, #66
 1861 0dd0 0CD1     		bne	.L6
 764:main.c        **** 					{
 765:main.c        **** 						preamp_b = 1;
 1862              		.loc 1 765 0
 1863 0dd2 334B     		ldr	r3, .L130+40
 1864 0dd4 0122     		movs	r2, #1
 1865 0dd6 1A70     		strb	r2, [r3]
 1866 0dd8 08E0     		b	.L6
 1867              	.L106:
 766:main.c        **** 					}
 767:main.c        **** 					
 768:main.c        **** 				}
 769:main.c        **** 				else
 770:main.c        **** 				{
 771:main.c        **** 					PutString("Error: Unrecognized Scope Command\n\r");
 1868              		.loc 1 771 0
 1869 0dda 3648     		ldr	r0, .L130+60
 1870 0ddc FFF7FEFF 		bl	PutString
 1871 0de0 04E0     		b	.L6
 1872              	.L50:
 772:main.c        **** 				}
 773:main.c        **** 			// END OF SCOPE 'S' COMMANDS
 774:main.c        **** 			}
 775:main.c        **** 			else
 776:main.c        **** 			{
 777:main.c        **** 				// command not recognized, toss it
 778:main.c        **** 				PutString("Error: Unknown Command\n\r");
 1873              		.loc 1 778 0
 1874 0de2 3548     		ldr	r0, .L130+64
 1875 0de4 FFF7FEFF 		bl	PutString
 1876 0de8 00E0     		b	.L6
 1877              	.L121:
 252:main.c        **** 					}
 1878              		.loc 1 252 0
 1879 0dea 00BF     		nop
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 48


 1880              	.L6:
 779:main.c        **** 			}
 780:main.c        **** 			bCommandReady = 0;
 1881              		.loc 1 780 0
 1882 0dec 334B     		ldr	r3, .L130+68
 1883 0dee 0022     		movs	r2, #0
 1884 0df0 1A70     		strb	r2, [r3]
 1885              	.L4:
 781:main.c        **** 		}
 782:main.c        **** 		
 783:main.c        **** 		status = Trigger_Status_Read();
 1886              		.loc 1 783 0
 1887 0df2 FFF7FEFF 		bl	Trigger_Status_Read
 1888 0df6 0346     		mov	r3, r0
 1889 0df8 FB71     		strb	r3, [r7, #7]
 784:main.c        **** 						
 785:main.c        **** 		// if we have completed a capture, get the index of the last sample
 786:main.c        **** 		if((status & CAPTURE_COMPLETE ) != 0)
 1890              		.loc 1 786 0
 1891 0dfa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1892 0dfc 03F00403 		and	r3, r3, #4
 1893 0e00 002B     		cmp	r3, #0
 1894 0e02 18D0     		beq	.L111
 787:main.c        **** 		{
 788:main.c        **** 			ending_offset = GetLastSampleIndex(DMA_Channel_1_Chan);
 1895              		.loc 1 788 0
 1896 0e04 2E4B     		ldr	r3, .L130+72
 1897 0e06 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1898 0e08 1846     		mov	r0, r3
 1899 0e0a FFF7FEFF 		bl	GetLastSampleIndex
 1900 0e0e 0346     		mov	r3, r0
 1901 0e10 BB80     		strh	r3, [r7, #4]	@ movhi
 789:main.c        **** 			
 790:main.c        **** 			// return the capture info
 791:main.c        **** 			PutChar('A');
 1902              		.loc 1 791 0
 1903 0e12 4120     		movs	r0, #65
 1904 0e14 FFF7FEFF 		bl	PutChar
 792:main.c        **** 			PutChar((uint8) ((ending_offset >> 8) & 0x0003)); // address of the end, MSbits
 1905              		.loc 1 792 0
 1906 0e18 BB88     		ldrh	r3, [r7, #4]
 1907 0e1a 1B0A     		lsrs	r3, r3, #8
 1908 0e1c 9BB2     		uxth	r3, r3
 1909 0e1e DBB2     		uxtb	r3, r3
 1910 0e20 03F00303 		and	r3, r3, #3
 1911 0e24 DBB2     		uxtb	r3, r3
 1912 0e26 1846     		mov	r0, r3
 1913 0e28 FFF7FEFF 		bl	PutChar
 793:main.c        **** 			PutChar((uint8) (ending_offset & 0x00FF)); // address of the end, LSbits
 1914              		.loc 1 793 0
 1915 0e2c BB88     		ldrh	r3, [r7, #4]	@ movhi
 1916 0e2e DBB2     		uxtb	r3, r3
 1917 0e30 1846     		mov	r0, r3
 1918 0e32 FFF7FEFF 		bl	PutChar
 1919              	.L111:
 794:main.c        **** 			//PutChar('\n'); // terminate the return data, through testing, there is no need to send this ch
 795:main.c        **** 		}
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 49


 796:main.c        **** 	
 797:main.c        **** 		// digital input update
 798:main.c        **** 		if((Digital_Input_Status_Last != Digital_Input_Status_Read()) && (Digital_AutoUpdate != 0))
 1920              		.loc 1 798 0
 1921 0e36 FFF7FEFF 		bl	Digital_Input_Status_Read
 1922 0e3a 0346     		mov	r3, r0
 1923 0e3c 1A46     		mov	r2, r3
 1924 0e3e 214B     		ldr	r3, .L130+76
 1925 0e40 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1926 0e42 9A42     		cmp	r2, r3
 1927 0e44 3FF4E3A8 		beq	.L113
 1928              		.loc 1 798 0 is_stmt 0 discriminator 1
 1929 0e48 1F4B     		ldr	r3, .L130+80
 1930 0e4a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1931 0e4c 002B     		cmp	r3, #0
 1932 0e4e 3FF4DEA8 		beq	.L113
 799:main.c        **** 		{
 800:main.c        **** 			PutChar('I');
 1933              		.loc 1 800 0 is_stmt 1
 1934 0e52 4920     		movs	r0, #73
 1935 0e54 FFF7FEFF 		bl	PutChar
 801:main.c        **** 			PutChar((uint8) Digital_Input_Status_Read());
 1936              		.loc 1 801 0
 1937 0e58 FFF7FEFF 		bl	Digital_Input_Status_Read
 1938 0e5c 0346     		mov	r3, r0
 1939 0e5e 1846     		mov	r0, r3
 1940 0e60 FFF7FEFF 		bl	PutChar
 802:main.c        **** 			Digital_Input_Status_Last = Digital_Input_Status_Read();
 1941              		.loc 1 802 0
 1942 0e64 FFF7FEFF 		bl	Digital_Input_Status_Read
 1943 0e68 0346     		mov	r3, r0
 1944 0e6a 1A46     		mov	r2, r3
 1945 0e6c 154B     		ldr	r3, .L130+76
 1946 0e6e 1A70     		strb	r2, [r3]
 803:main.c        **** 		}
 804:main.c        **** 	}
 1947              		.loc 1 804 0
 1948 0e70 FFF7CDB8 		b	.L113
 1949              	.L131:
 1950 0e74 AFF30080 		.align	3
 1951              	.L130:
 1952 0e78 D7A3703D 		.word	1030792151
 1953 0e7c 0A574540 		.word	1078286090
 1954 0e80 00000000 		.word	0
 1955 0e84 00F07F40 		.word	1082126336
 1956 0e88 12A5BDC1 		.word	-1044536046
 1957 0e8c 17661340 		.word	1075013143
 1958 0e90 00000000 		.word	0
 1959 0e94 00F88F40 		.word	1083176960
 1960 0e98 00000000 		.word	preamp_a
 1961 0e9c 00000000 		.word	Channel_1_Data
 1962 0ea0 00000000 		.word	preamp_b
 1963 0ea4 00000000 		.word	Channel_2_Data
 1964 0ea8 00000000 		.word	USB_Out_Buffer
 1965 0eac 3F000080 		.word	-2147483585
 1966 0eb0 00000000 		.word	.LC0
 1967 0eb4 24000000 		.word	.LC3
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 50


 1968 0eb8 48000000 		.word	.LC4
 1969 0ebc 00000000 		.word	bCommandReady
 1970 0ec0 00000000 		.word	DMA_Channel_1_Chan
 1971 0ec4 00000000 		.word	Digital_Input_Status_Last
 1972 0ec8 00000000 		.word	Digital_AutoUpdate
 1973              		.cfi_endproc
 1974              	.LFE64:
 1975              		.size	main, .-main
 1976              		.section	.text.Hardware_Config,"ax",%progbits
 1977              		.align	2
 1978              		.global	Hardware_Config
 1979              		.thumb
 1980              		.thumb_func
 1981              		.type	Hardware_Config, %function
 1982              	Hardware_Config:
 1983              	.LFB65:
 805:main.c        **** }
 806:main.c        **** 
 807:main.c        **** void Hardware_Config(void)
 808:main.c        **** {
 1984              		.loc 1 808 0
 1985              		.cfi_startproc
 1986              		@ args = 0, pretend = 0, frame = 0
 1987              		@ frame_needed = 1, uses_anonymous_args = 0
 1988 0000 80B5     		push	{r7, lr}
 1989              		.cfi_def_cfa_offset 8
 1990              		.cfi_offset 7, -8
 1991              		.cfi_offset 14, -4
 1992 0002 00AF     		add	r7, sp, #0
 1993              		.cfi_def_cfa_register 7
 809:main.c        ****     CyGlobalIntEnable;
 1994              		.loc 1 809 0
 1995              		.syntax unified
 1996              	@ 809 "main.c" 1
 1997 0004 62B6     		CPSIE   i
 1998              	@ 0 "" 2
 810:main.c        **** 	
 811:main.c        **** 	cCommandsReady = 0;
 1999              		.loc 1 811 0
 2000              		.thumb
 2001              		.syntax unified
 2002 0006 394B     		ldr	r3, .L134
 2003 0008 0022     		movs	r2, #0
 2004 000a 1A80     		strh	r2, [r3]	@ movhi
 812:main.c        **** 	bCommandReady = 0;
 2005              		.loc 1 812 0
 2006 000c 384B     		ldr	r3, .L134+4
 2007 000e 0022     		movs	r2, #0
 2008 0010 1A70     		strb	r2, [r3]
 813:main.c        ****     
 814:main.c        ****     USBUART_Start(0, USBUART_5V_OPERATION);
 2009              		.loc 1 814 0
 2010 0012 0121     		movs	r1, #1
 2011 0014 0020     		movs	r0, #0
 2012 0016 FFF7FEFF 		bl	USBUART_Start
 815:main.c        **** 	while(!USBUART_GetConfiguration())
 2013              		.loc 1 815 0
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 51


 2014 001a 00BF     		nop
 2015              	.L133:
 2016              		.loc 1 815 0 is_stmt 0 discriminator 1
 2017 001c FFF7FEFF 		bl	USBUART_GetConfiguration
 2018 0020 0346     		mov	r3, r0
 2019 0022 002B     		cmp	r3, #0
 2020 0024 FAD0     		beq	.L133
 816:main.c        ****     {
 817:main.c        ****         /* Wait for USBUART to complete configuration */
 818:main.c        ****     }
 819:main.c        ****     USBUART_CDC_Init();
 2021              		.loc 1 819 0 is_stmt 1
 2022 0026 FFF7FEFF 		bl	USBUART_CDC_Init
 820:main.c        **** 	
 821:main.c        **** 	Amux_Trigger_Select(SCOPE_CHANNEL_1);
 2023              		.loc 1 821 0
 2024 002a 0020     		movs	r0, #0
 2025 002c FFF7FEFF 		bl	Amux_Trigger_FastSelect
 822:main.c        ****     
 823:main.c        ****     ADC_1_Start();
 2026              		.loc 1 823 0
 2027 0030 FFF7FEFF 		bl	ADC_1_Start
 824:main.c        ****     ADC_2_Start();
 2028              		.loc 1 824 0
 2029 0034 FFF7FEFF 		bl	ADC_2_Start
 825:main.c        ****     
 826:main.c        ****     Vtrigger_Start();
 2030              		.loc 1 826 0
 2031 0038 FFF7FEFF 		bl	Vtrigger_Start
 827:main.c        ****     Trigger_Comp_Start();
 2032              		.loc 1 827 0
 2033 003c FFF7FEFF 		bl	Trigger_Comp_Start
 828:main.c        ****     
 829:main.c        ****     // The extras
 830:main.c        ****     Trig_Buf_Start();
 2034              		.loc 1 830 0
 2035 0040 FFF7FEFF 		bl	Trig_Buf_Start
 831:main.c        ****     
 832:main.c        ****     PWM_Sample_Buffer_Start();
 2036              		.loc 1 832 0
 2037 0044 FFF7FEFF 		bl	PWM_Sample_Buffer_Start
 833:main.c        **** 	// update the period to match the trigger buffer size for maximum post trigger capture
 834:main.c        **** 	PWM_Sample_Buffer_WritePeriod(BUFFER_SIZE-1); // maximum post trigger buffer
 2038              		.loc 1 834 0
 2039 0048 40F2FF30 		movw	r0, #1023
 2040 004c FFF7FEFF 		bl	PWM_Sample_Buffer_WritePeriod
 835:main.c        **** 	//PWM_Sample_Buffer_WritePeriod(2); // minimum post trigger buffer, 3 samples after trigger (used 
 836:main.c        **** 	// after setting the period, need to set the count to the proper value as well
 837:main.c        **** 	PWM_Sample_Buffer_WriteCounter(BUFFER_SIZE-1); // maximum post trigger buffer
 2041              		.loc 1 837 0
 2042 0050 40F2FF30 		movw	r0, #1023
 2043 0054 FFF7FEFF 		bl	PWM_Sample_Buffer_WriteCounter
 838:main.c        **** 	//PWM_Sample_Buffer_WriteCounter(2); // minimum post trigger buffer, 3 samples after trigger
 839:main.c        **** 	
 840:main.c        **** 	preamp_a = 1;
 2044              		.loc 1 840 0
 2045 0058 264B     		ldr	r3, .L134+8
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 52


 2046 005a 0122     		movs	r2, #1
 2047 005c 1A70     		strb	r2, [r3]
 841:main.c        **** 	preamp_b = 1;
 2048              		.loc 1 841 0
 2049 005e 264B     		ldr	r3, .L134+12
 2050 0060 0122     		movs	r2, #1
 2051 0062 1A70     		strb	r2, [r3]
 842:main.c        **** 	trigger_source = SCOPE_CHANNEL_1;
 2052              		.loc 1 842 0
 2053 0064 254B     		ldr	r3, .L134+16
 2054 0066 0022     		movs	r2, #0
 2055 0068 1A70     		strb	r2, [r3]
 843:main.c        ****     
 844:main.c        **** 	// basic configuration is trigger on the rising edge of channel 0
 845:main.c        **** 	Trigger_Control_Write(Trigger_Control_Read() & ~TRIGGER_MASK);
 2056              		.loc 1 845 0
 2057 006a FFF7FEFF 		bl	Trigger_Control_Read
 2058 006e 0346     		mov	r3, r0
 2059 0070 23F00F03 		bic	r3, r3, #15
 2060 0074 DBB2     		uxtb	r3, r3
 2061 0076 1846     		mov	r0, r3
 2062 0078 FFF7FEFF 		bl	Trigger_Control_Write
 846:main.c        ****     Trigger_Control_Write(Trigger_Control_Read() | RISING_EDGE_TRIGGERED);
 2063              		.loc 1 846 0
 2064 007c FFF7FEFF 		bl	Trigger_Control_Read
 2065 0080 0346     		mov	r3, r0
 2066 0082 43F00203 		orr	r3, r3, #2
 2067 0086 DBB2     		uxtb	r3, r3
 2068 0088 1846     		mov	r0, r3
 2069 008a FFF7FEFF 		bl	Trigger_Control_Write
 847:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | FALLING_EDGE_TRIGGERED);
 848:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | EITHER_EDGE_TRIGGERED);
 849:main.c        ****     //Trigger_Control_Write(Trigger_Control_Read() | EXTERNAL_TRIGGERED);
 850:main.c        **** 	
 851:main.c        **** 	// waveform generator control
 852:main.c        **** 	Wave_Control_Write(Wave_Control_Read() & ~WAVE_SELECT_MASK);
 2070              		.loc 1 852 0
 2071 008e FFF7FEFF 		bl	Wave_Control_Read
 2072 0092 0346     		mov	r3, r0
 2073 0094 23F00103 		bic	r3, r3, #1
 2074 0098 DBB2     		uxtb	r3, r3
 2075 009a 1846     		mov	r0, r3
 2076 009c FFF7FEFF 		bl	Wave_Control_Write
 853:main.c        **** 	Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_WAVE);
 2077              		.loc 1 853 0
 2078 00a0 FFF7FEFF 		bl	Wave_Control_Read
 2079 00a4 0346     		mov	r3, r0
 2080 00a6 1846     		mov	r0, r3
 2081 00a8 FFF7FEFF 		bl	Wave_Control_Write
 854:main.c        **** 	// Wave_Control_Write(Wave_Control_Read() | WAVE_SELECT_NOISE);
 855:main.c        **** 	Wave_DAC_Start();
 2082              		.loc 1 855 0
 2083 00ac FFF7FEFF 		bl	Wave_DAC_Start
 856:main.c        **** 	Wave_Buf_Start();
 2084              		.loc 1 856 0
 2085 00b0 FFF7FEFF 		bl	Wave_Buf_Start
 857:main.c        **** 	Wave_DAC_Wave1Setup(&Waveform_Buffer[0], WAVEFORM_BUFFER_SIZE);
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 53


 2086              		.loc 1 857 0
 2087 00b4 4FF48071 		mov	r1, #256
 2088 00b8 1148     		ldr	r0, .L134+20
 2089 00ba FFF7FEFF 		bl	Wave_DAC_Wave1Setup
 858:main.c        **** 	wave_gain = 0;
 2090              		.loc 1 858 0
 2091 00be 114B     		ldr	r3, .L134+24
 2092 00c0 0022     		movs	r2, #0
 2093 00c2 1A70     		strb	r2, [r3]
 859:main.c        **** 	
 860:main.c        **** 	PRS_Start();
 2094              		.loc 1 860 0
 2095 00c4 FFF7FEFF 		bl	PRS_Start
 861:main.c        ****     // GJL
 862:main.c        ****     // Change noise output to use value adjusted for amplitude/offset
 863:main.c        **** 	//Wave_DAC_Wave2Setup((uint8 *) PRS_SEED_PTR, 1);
 864:main.c        ****     Wave_DAC_Wave2Setup(&Noise_Adjusted, 1);
 2096              		.loc 1 864 0
 2097 00c8 0121     		movs	r1, #1
 2098 00ca 0F48     		ldr	r0, .L134+28
 2099 00cc FFF7FEFF 		bl	Wave_DAC_Wave2Setup
 865:main.c        **** 	
 866:main.c        **** 	// digital IO initializations
 867:main.c        **** 	Digital_Input_Status_Last = 0;
 2100              		.loc 1 867 0
 2101 00d0 0E4B     		ldr	r3, .L134+32
 2102 00d2 0022     		movs	r2, #0
 2103 00d4 1A70     		strb	r2, [r3]
 868:main.c        **** 	Digital_Out_Control_Write(0);
 2104              		.loc 1 868 0
 2105 00d6 0020     		movs	r0, #0
 2106 00d8 FFF7FEFF 		bl	Digital_Out_Control_Write
 869:main.c        **** 	Digital_AutoUpdate = 0;
 2107              		.loc 1 869 0
 2108 00dc 0C4B     		ldr	r3, .L134+36
 2109 00de 0022     		movs	r2, #0
 2110 00e0 1A70     		strb	r2, [r3]
 870:main.c        **** 	
 871:main.c        **** 	Digital_PWM_Start();
 2111              		.loc 1 871 0
 2112 00e2 FFF7FEFF 		bl	Digital_PWM_Start
 872:main.c        **** }
 2113              		.loc 1 872 0
 2114 00e6 00BF     		nop
 2115 00e8 80BD     		pop	{r7, pc}
 2116              	.L135:
 2117 00ea 00BF     		.align	2
 2118              	.L134:
 2119 00ec 00000000 		.word	cCommandsReady
 2120 00f0 00000000 		.word	bCommandReady
 2121 00f4 00000000 		.word	preamp_a
 2122 00f8 00000000 		.word	preamp_b
 2123 00fc 00000000 		.word	trigger_source
 2124 0100 00000000 		.word	Waveform_Buffer
 2125 0104 00000000 		.word	wave_gain
 2126 0108 00000000 		.word	Noise_Adjusted
 2127 010c 00000000 		.word	Digital_Input_Status_Last
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 54


 2128 0110 00000000 		.word	Digital_AutoUpdate
 2129              		.cfi_endproc
 2130              	.LFE65:
 2131              		.size	Hardware_Config, .-Hardware_Config
 2132              		.section	.text.DMA_Config,"ax",%progbits
 2133              		.align	2
 2134              		.global	DMA_Config
 2135              		.thumb
 2136              		.thumb_func
 2137              		.type	DMA_Config, %function
 2138              	DMA_Config:
 2139              	.LFB66:
 873:main.c        **** 
 874:main.c        **** void DMA_Config(void)
 875:main.c        **** {
 2140              		.loc 1 875 0
 2141              		.cfi_startproc
 2142              		@ args = 0, pretend = 0, frame = 0
 2143              		@ frame_needed = 1, uses_anonymous_args = 0
 2144 0000 80B5     		push	{r7, lr}
 2145              		.cfi_def_cfa_offset 8
 2146              		.cfi_offset 7, -8
 2147              		.cfi_offset 14, -4
 2148 0002 00AF     		add	r7, sp, #0
 2149              		.cfi_def_cfa_register 7
 876:main.c        ****     DMA_Channel_1_Chan = DMA_Channel_1_DmaInitialize(DMA_Channel_1_BYTES_PER_BURST, DMA_Channel_1_R
 2150              		.loc 1 876 0
 2151 0004 41F6FF73 		movw	r3, #8191
 2152 0008 4FF48042 		mov	r2, #16384
 2153 000c 0121     		movs	r1, #1
 2154 000e 0220     		movs	r0, #2
 2155 0010 FFF7FEFF 		bl	DMA_Channel_1_DmaInitialize
 2156 0014 0346     		mov	r3, r0
 2157 0016 1A46     		mov	r2, r3
 2158 0018 3F4B     		ldr	r3, .L138
 2159 001a 1A70     		strb	r2, [r3]
 877:main.c        ****         HI16(DMA_Channel_1_SRC_BASE), HI16(DMA_Channel_1_DST_BASE));
 878:main.c        ****     DMA_Channel_1_TD[0] = CyDmaTdAllocate();
 2160              		.loc 1 878 0
 2161 001c FFF7FEFF 		bl	CyDmaTdAllocate
 2162 0020 0346     		mov	r3, r0
 2163 0022 1A46     		mov	r2, r3
 2164 0024 3D4B     		ldr	r3, .L138+4
 2165 0026 1A70     		strb	r2, [r3]
 879:main.c        ****     CyDmaTdSetConfiguration(DMA_Channel_1_TD[0], BUFFER_SIZE*sizeof(int16), DMA_Channel_1_TD[0], DM
 2166              		.loc 1 879 0
 2167 0028 3C4B     		ldr	r3, .L138+4
 2168 002a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2169 002c 3B4B     		ldr	r3, .L138+4
 2170 002e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2171 0030 0623     		movs	r3, #6
 2172 0032 4FF40061 		mov	r1, #2048
 2173 0036 FFF7FEFF 		bl	CyDmaTdSetConfiguration
 880:main.c        ****     CyDmaTdSetAddress(DMA_Channel_1_TD[0], LO16((uint32)ADC_1_SAR_WRK0_PTR), LO16((uint32)&Channel_
 2174              		.loc 1 880 0
 2175 003a 384B     		ldr	r3, .L138+4
 2176 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 55


 2177 003e 384A     		ldr	r2, .L138+8
 2178 0040 92B2     		uxth	r2, r2
 2179 0042 45F6A031 		movw	r1, #23456
 2180 0046 1846     		mov	r0, r3
 2181 0048 FFF7FEFF 		bl	CyDmaTdSetAddress
 881:main.c        ****     CyDmaChSetInitialTd(DMA_Channel_1_Chan, DMA_Channel_1_TD[0]);
 2182              		.loc 1 881 0
 2183 004c 324B     		ldr	r3, .L138
 2184 004e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2185 0050 324B     		ldr	r3, .L138+4
 2186 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2187 0054 1946     		mov	r1, r3
 2188 0056 1046     		mov	r0, r2
 2189 0058 FFF7FEFF 		bl	CyDmaChSetInitialTd
 882:main.c        ****     CyDmaChRoundRobin(DMA_Channel_1_Chan, 1);
 2190              		.loc 1 882 0
 2191 005c 2E4B     		ldr	r3, .L138
 2192 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2193 0060 0121     		movs	r1, #1
 2194 0062 1846     		mov	r0, r3
 2195 0064 FFF7FEFF 		bl	CyDmaChRoundRobin
 883:main.c        ****     CyDmaChSetRequest(DMA_Channel_1_Chan, CPU_TERM_CHAIN);
 2196              		.loc 1 883 0
 2197 0068 2B4B     		ldr	r3, .L138
 2198 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2199 006c 0421     		movs	r1, #4
 2200 006e 1846     		mov	r0, r3
 2201 0070 FFF7FEFF 		bl	CyDmaChSetRequest
 884:main.c        ****     CyDmaChEnable(DMA_Channel_1_Chan, 1);
 2202              		.loc 1 884 0
 2203 0074 284B     		ldr	r3, .L138
 2204 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2205 0078 0121     		movs	r1, #1
 2206 007a 1846     		mov	r0, r3
 2207 007c FFF7FEFF 		bl	CyDmaChEnable
 885:main.c        ****     CyDmaChEnable(DMA_Channel_1_Chan, 1);
 2208              		.loc 1 885 0
 2209 0080 254B     		ldr	r3, .L138
 2210 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2211 0084 0121     		movs	r1, #1
 2212 0086 1846     		mov	r0, r3
 2213 0088 FFF7FEFF 		bl	CyDmaChEnable
 886:main.c        **** 
 887:main.c        ****     DMA_Channel_2_Chan = DMA_Channel_2_DmaInitialize(DMA_Channel_2_BYTES_PER_BURST, DMA_Channel_2_R
 2214              		.loc 1 887 0
 2215 008c 41F6FF73 		movw	r3, #8191
 2216 0090 4FF48042 		mov	r2, #16384
 2217 0094 0121     		movs	r1, #1
 2218 0096 0220     		movs	r0, #2
 2219 0098 FFF7FEFF 		bl	DMA_Channel_2_DmaInitialize
 2220 009c 0346     		mov	r3, r0
 2221 009e 1A46     		mov	r2, r3
 2222 00a0 204B     		ldr	r3, .L138+12
 2223 00a2 1A70     		strb	r2, [r3]
 888:main.c        ****         HI16(DMA_Channel_2_SRC_BASE), HI16(DMA_Channel_2_DST_BASE));
 889:main.c        ****     DMA_Channel_2_TD[0] = CyDmaTdAllocate();
 2224              		.loc 1 889 0
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 56


 2225 00a4 FFF7FEFF 		bl	CyDmaTdAllocate
 2226 00a8 0346     		mov	r3, r0
 2227 00aa 1A46     		mov	r2, r3
 2228 00ac 1E4B     		ldr	r3, .L138+16
 2229 00ae 1A70     		strb	r2, [r3]
 890:main.c        ****     CyDmaTdSetConfiguration(DMA_Channel_2_TD[0], BUFFER_SIZE*sizeof(int16), DMA_Channel_2_TD[0], DM
 2230              		.loc 1 890 0
 2231 00b0 1D4B     		ldr	r3, .L138+16
 2232 00b2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2233 00b4 1C4B     		ldr	r3, .L138+16
 2234 00b6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2235 00b8 0223     		movs	r3, #2
 2236 00ba 4FF40061 		mov	r1, #2048
 2237 00be FFF7FEFF 		bl	CyDmaTdSetConfiguration
 891:main.c        ****     CyDmaTdSetAddress(DMA_Channel_2_TD[0], LO16((uint32)ADC_2_SAR_WRK0_PTR), LO16((uint32)&Channel_
 2238              		.loc 1 891 0
 2239 00c2 194B     		ldr	r3, .L138+16
 2240 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2241 00c6 194A     		ldr	r2, .L138+20
 2242 00c8 92B2     		uxth	r2, r2
 2243 00ca 45F6A231 		movw	r1, #23458
 2244 00ce 1846     		mov	r0, r3
 2245 00d0 FFF7FEFF 		bl	CyDmaTdSetAddress
 892:main.c        ****     CyDmaChSetInitialTd(DMA_Channel_2_Chan, DMA_Channel_2_TD[0]);
 2246              		.loc 1 892 0
 2247 00d4 134B     		ldr	r3, .L138+12
 2248 00d6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2249 00d8 134B     		ldr	r3, .L138+16
 2250 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2251 00dc 1946     		mov	r1, r3
 2252 00de 1046     		mov	r0, r2
 2253 00e0 FFF7FEFF 		bl	CyDmaChSetInitialTd
 893:main.c        ****     CyDmaChRoundRobin(DMA_Channel_2_Chan, 1);
 2254              		.loc 1 893 0
 2255 00e4 0F4B     		ldr	r3, .L138+12
 2256 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2257 00e8 0121     		movs	r1, #1
 2258 00ea 1846     		mov	r0, r3
 2259 00ec FFF7FEFF 		bl	CyDmaChRoundRobin
 894:main.c        ****     CyDmaChSetRequest(DMA_Channel_2_Chan, CPU_TERM_CHAIN);
 2260              		.loc 1 894 0
 2261 00f0 0C4B     		ldr	r3, .L138+12
 2262 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2263 00f4 0421     		movs	r1, #4
 2264 00f6 1846     		mov	r0, r3
 2265 00f8 FFF7FEFF 		bl	CyDmaChSetRequest
 895:main.c        ****     CyDmaChEnable(DMA_Channel_2_Chan, 1);
 2266              		.loc 1 895 0
 2267 00fc 094B     		ldr	r3, .L138+12
 2268 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2269 0100 0121     		movs	r1, #1
 2270 0102 1846     		mov	r0, r3
 2271 0104 FFF7FEFF 		bl	CyDmaChEnable
 896:main.c        ****     CyDmaChEnable(DMA_Channel_2_Chan, 1);
 2272              		.loc 1 896 0
 2273 0108 064B     		ldr	r3, .L138+12
 2274 010a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 57


 2275 010c 0121     		movs	r1, #1
 2276 010e 1846     		mov	r0, r3
 2277 0110 FFF7FEFF 		bl	CyDmaChEnable
 897:main.c        **** 
 898:main.c        ****     return;
 2278              		.loc 1 898 0
 2279 0114 00BF     		nop
 899:main.c        **** }
 2280              		.loc 1 899 0
 2281 0116 80BD     		pop	{r7, pc}
 2282              	.L139:
 2283              		.align	2
 2284              	.L138:
 2285 0118 00000000 		.word	DMA_Channel_1_Chan
 2286 011c 00000000 		.word	DMA_Channel_1_TD
 2287 0120 00000000 		.word	Channel_1_Data
 2288 0124 00000000 		.word	DMA_Channel_2_Chan
 2289 0128 00000000 		.word	DMA_Channel_2_TD
 2290 012c 00000000 		.word	Channel_2_Data
 2291              		.cfi_endproc
 2292              	.LFE66:
 2293              		.size	DMA_Config, .-DMA_Config
 2294              		.section	.text.GetLastSampleIndex,"ax",%progbits
 2295              		.align	2
 2296              		.global	GetLastSampleIndex
 2297              		.thumb
 2298              		.thumb_func
 2299              		.type	GetLastSampleIndex, %function
 2300              	GetLastSampleIndex:
 2301              	.LFB67:
 900:main.c        **** 
 901:main.c        **** // returns the address of the first sample in the circular DMA buffer
 902:main.c        **** 
 903:main.c        **** uint16 GetLastSampleIndex(uint8 chHandle)
 904:main.c        **** {
 2302              		.loc 1 904 0
 2303              		.cfi_startproc
 2304              		@ args = 0, pretend = 0, frame = 16
 2305              		@ frame_needed = 1, uses_anonymous_args = 0
 2306              		@ link register save eliminated.
 2307 0000 80B4     		push	{r7}
 2308              		.cfi_def_cfa_offset 4
 2309              		.cfi_offset 7, -4
 2310 0002 85B0     		sub	sp, sp, #20
 2311              		.cfi_def_cfa_offset 24
 2312 0004 00AF     		add	r7, sp, #0
 2313              		.cfi_def_cfa_register 7
 2314 0006 0346     		mov	r3, r0
 2315 0008 FB71     		strb	r3, [r7, #7]
 905:main.c        **** 	uint16 index;
 906:main.c        **** 
 907:main.c        **** 	// get the upper 16 bits of the destination (not strictly necessary) (actually it doesn't work sin
 908:main.c        **** 	// upper 16 bit addresses for the same RAM information
 909:main.c        **** 	//dest_address = (((uint32) CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG1[3]) << 24) | (((uint32) CY_DMA
 910:main.c        **** 	
 911:main.c        **** 	// grab the lower 16 bits of the destination address
 912:main.c        **** 	// the assumption here is that "work seperate" has been enabled, so a copy of the TD is stored in 
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 58


 913:main.c        **** 	index = ((uint32) CY_DMA_TDMEM_STRUCT_PTR[chHandle].TD1[3] << 8) | ((uint32) CY_DMA_TDMEM_STRUCT_P
 2316              		.loc 1 913 0
 2317 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2318 000c DB00     		lsls	r3, r3, #3
 2319 000e 03F18043 		add	r3, r3, #1073741824
 2320 0012 03F5F043 		add	r3, r3, #30720
 2321 0016 DB79     		ldrb	r3, [r3, #7]
 2322 0018 DBB2     		uxtb	r3, r3
 2323 001a 9BB2     		uxth	r3, r3
 2324 001c 1B02     		lsls	r3, r3, #8
 2325 001e 9AB2     		uxth	r2, r3
 2326 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2327 0022 DB00     		lsls	r3, r3, #3
 2328 0024 03F18043 		add	r3, r3, #1073741824
 2329 0028 03F5F043 		add	r3, r3, #30720
 2330 002c 9B79     		ldrb	r3, [r3, #6]
 2331 002e DBB2     		uxtb	r3, r3
 2332 0030 9BB2     		uxth	r3, r3
 2333 0032 1343     		orrs	r3, r3, r2
 2334 0034 FB81     		strh	r3, [r7, #14]	@ movhi
 914:main.c        **** 	
 915:main.c        **** 	// calculate the index by taking the difference between the starting and ending destination addres
 916:main.c        **** 	index = (index - sizeof(int16) - LO16((uint32) &Channel_1_Data[0]))/sizeof(int16) % BUFFER_SIZE;
 2335              		.loc 1 916 0
 2336 0036 FA89     		ldrh	r2, [r7, #14]
 2337 0038 084B     		ldr	r3, .L142
 2338 003a 99B2     		uxth	r1, r3
 2339 003c 6FF00103 		mvn	r3, #1
 2340 0040 5B1A     		subs	r3, r3, r1
 2341 0042 1344     		add	r3, r3, r2
 2342 0044 5B08     		lsrs	r3, r3, #1
 2343 0046 9BB2     		uxth	r3, r3
 2344 0048 C3F30903 		ubfx	r3, r3, #0, #10
 2345 004c FB81     		strh	r3, [r7, #14]	@ movhi
 917:main.c        **** 	
 918:main.c        **** 	return index;
 2346              		.loc 1 918 0
 2347 004e FB89     		ldrh	r3, [r7, #14]
 919:main.c        **** }
 2348              		.loc 1 919 0
 2349 0050 1846     		mov	r0, r3
 2350 0052 1437     		adds	r7, r7, #20
 2351              		.cfi_def_cfa_offset 4
 2352 0054 BD46     		mov	sp, r7
 2353              		.cfi_def_cfa_register 13
 2354              		@ sp needed
 2355 0056 80BC     		pop	{r7}
 2356              		.cfi_restore 7
 2357              		.cfi_def_cfa_offset 0
 2358 0058 7047     		bx	lr
 2359              	.L143:
 2360 005a 00BF     		.align	2
 2361              	.L142:
 2362 005c 00000000 		.word	Channel_1_Data
 2363              		.cfi_endproc
 2364              	.LFE67:
 2365              		.size	GetLastSampleIndex, .-GetLastSampleIndex
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 59


 2366              		.section	.text.CommandCheck,"ax",%progbits
 2367              		.align	2
 2368              		.global	CommandCheck
 2369              		.thumb
 2370              		.thumb_func
 2371              		.type	CommandCheck, %function
 2372              	CommandCheck:
 2373              	.LFB68:
 920:main.c        **** 
 921:main.c        **** void CommandCheck(void)
 922:main.c        **** {
 2374              		.loc 1 922 0
 2375              		.cfi_startproc
 2376              		@ args = 0, pretend = 0, frame = 8
 2377              		@ frame_needed = 1, uses_anonymous_args = 0
 2378 0000 80B5     		push	{r7, lr}
 2379              		.cfi_def_cfa_offset 8
 2380              		.cfi_offset 7, -8
 2381              		.cfi_offset 14, -4
 2382 0002 82B0     		sub	sp, sp, #8
 2383              		.cfi_def_cfa_offset 16
 2384 0004 00AF     		add	r7, sp, #0
 2385              		.cfi_def_cfa_register 7
 923:main.c        **** 	uint16 i, ReceivedBytes;
 924:main.c        **** 	// check to see if line state has changed? thought this might be necessary, but it probably isn't
 925:main.c        **** 	USBUART_IsLineChanged();
 2386              		.loc 1 925 0
 2387 0006 FFF7FEFF 		bl	USBUART_IsLineChanged
 926:main.c        **** 	
 927:main.c        **** 	// if data is waiting
 928:main.c        **** 	if(USBUART_DataIsReady() != 0)
 2388              		.loc 1 928 0
 2389 000a FFF7FEFF 		bl	USBUART_DataIsReady
 2390 000e 0346     		mov	r3, r0
 2391 0010 002B     		cmp	r3, #0
 2392 0012 5AD0     		beq	.L145
 929:main.c        **** 	{
 930:main.c        **** 		// lets find out how much the PC sent to us
 931:main.c        **** 		ReceivedBytes = USBUART_GetCount();
 2393              		.loc 1 931 0
 2394 0014 FFF7FEFF 		bl	USBUART_GetCount
 2395 0018 0346     		mov	r3, r0
 2396 001a BB80     		strh	r3, [r7, #4]	@ movhi
 932:main.c        **** 		
 933:main.c        **** 		// if the amount of data received is non-zero
 934:main.c        **** 		if(ReceivedBytes != 0)
 2397              		.loc 1 934 0
 2398 001c BB88     		ldrh	r3, [r7, #4]
 2399 001e 002B     		cmp	r3, #0
 2400 0020 07D0     		beq	.L146
 935:main.c        **** 		{
 936:main.c        **** 			cCharsReceived = USBUART_GetAll((uint8 *) &szTempBuffer[0]);
 2401              		.loc 1 936 0
 2402 0022 4F48     		ldr	r0, .L157
 2403 0024 FFF7FEFF 		bl	USBUART_GetAll
 2404 0028 0346     		mov	r3, r0
 2405 002a DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 60


 2406 002c 4D4B     		ldr	r3, .L157+4
 2407 002e 1A70     		strb	r2, [r3]
 2408 0030 02E0     		b	.L147
 2409              	.L146:
 937:main.c        **** 		}
 938:main.c        **** 		else
 939:main.c        **** 		{
 940:main.c        **** 			// its a zero length data packet, it *should* be safe to do this and not worry about corrupting 
 941:main.c        **** 			USBUART_GetAll((uint8 *) &szTempBuffer[0]);
 2410              		.loc 1 941 0
 2411 0032 4B48     		ldr	r0, .L157
 2412 0034 FFF7FEFF 		bl	USBUART_GetAll
 2413              	.L147:
 942:main.c        **** 			//PutString("Zero Length Packet\n");
 943:main.c        **** 		}
 944:main.c        **** 		
 945:main.c        **** 		// move the data from the temporary buffer into the circular command buffer
 946:main.c        **** 		i = 0;
 2414              		.loc 1 946 0
 2415 0038 0023     		movs	r3, #0
 2416 003a FB80     		strh	r3, [r7, #6]	@ movhi
 2417              	.L149:
 947:main.c        **** 		do
 948:main.c        **** 		{
 949:main.c        **** 			szCommandsBuffer[iWrite] = szTempBuffer[i];
 2418              		.loc 1 949 0 discriminator 2
 2419 003c 4A4B     		ldr	r3, .L157+8
 2420 003e 1B88     		ldrh	r3, [r3]
 2421 0040 1946     		mov	r1, r3
 2422 0042 FB88     		ldrh	r3, [r7, #6]
 2423 0044 464A     		ldr	r2, .L157
 2424 0046 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 2425 0048 484B     		ldr	r3, .L157+12
 2426 004a 5A54     		strb	r2, [r3, r1]
 950:main.c        **** 			i++;
 2427              		.loc 1 950 0 discriminator 2
 2428 004c FB88     		ldrh	r3, [r7, #6]
 2429 004e 0133     		adds	r3, r3, #1
 2430 0050 FB80     		strh	r3, [r7, #6]	@ movhi
 951:main.c        **** 			iWrite++;
 2431              		.loc 1 951 0 discriminator 2
 2432 0052 454B     		ldr	r3, .L157+8
 2433 0054 1B88     		ldrh	r3, [r3]
 2434 0056 0133     		adds	r3, r3, #1
 2435 0058 9AB2     		uxth	r2, r3
 2436 005a 434B     		ldr	r3, .L157+8
 2437 005c 1A80     		strh	r2, [r3]	@ movhi
 952:main.c        **** 			iWrite = iWrite % CIRCULAR_BUFFER_SIZE;
 2438              		.loc 1 952 0 discriminator 2
 2439 005e 424B     		ldr	r3, .L157+8
 2440 0060 1B88     		ldrh	r3, [r3]
 2441 0062 C3F30B03 		ubfx	r3, r3, #0, #12
 2442 0066 9AB2     		uxth	r2, r3
 2443 0068 3F4B     		ldr	r3, .L157+8
 2444 006a 1A80     		strh	r2, [r3]	@ movhi
 953:main.c        **** 		}while((iWrite != iRead) && (i != cCharsReceived));
 2445              		.loc 1 953 0 discriminator 2
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 61


 2446 006c 3E4B     		ldr	r3, .L157+8
 2447 006e 1A88     		ldrh	r2, [r3]
 2448 0070 3F4B     		ldr	r3, .L157+16
 2449 0072 1B88     		ldrh	r3, [r3]
 2450 0074 9A42     		cmp	r2, r3
 2451 0076 05D0     		beq	.L148
 2452              		.loc 1 953 0 is_stmt 0 discriminator 1
 2453 0078 3A4B     		ldr	r3, .L157+4
 2454 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2455 007c 9BB2     		uxth	r3, r3
 2456 007e FA88     		ldrh	r2, [r7, #6]
 2457 0080 9A42     		cmp	r2, r3
 2458 0082 DBD1     		bne	.L149
 2459              	.L148:
 954:main.c        **** 		
 955:main.c        **** 		// scan the command buffer for commands
 956:main.c        **** 		i = iRead;
 2460              		.loc 1 956 0 is_stmt 1
 2461 0084 3A4B     		ldr	r3, .L157+16
 2462 0086 1B88     		ldrh	r3, [r3]	@ movhi
 2463 0088 FB80     		strh	r3, [r7, #6]	@ movhi
 2464              	.L152:
 957:main.c        **** 		do
 958:main.c        **** 		{
 959:main.c        **** 			// if we see a carriage return or a line feed
 960:main.c        **** 			if((szCommandsBuffer[i] == '\n') || (szCommandsBuffer[i] == '\r'))
 2465              		.loc 1 960 0
 2466 008a FB88     		ldrh	r3, [r7, #6]
 2467 008c 374A     		ldr	r2, .L157+12
 2468 008e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2469 0090 0A2B     		cmp	r3, #10
 2470 0092 04D0     		beq	.L150
 2471              		.loc 1 960 0 is_stmt 0 discriminator 1
 2472 0094 FB88     		ldrh	r3, [r7, #6]
 2473 0096 354A     		ldr	r2, .L157+12
 2474 0098 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2475 009a 0D2B     		cmp	r3, #13
 2476 009c 09D1     		bne	.L151
 2477              	.L150:
 961:main.c        **** 			{
 962:main.c        **** 				cCommandsReady++; // indicate the buffer contains commands to be dealt with
 2478              		.loc 1 962 0 is_stmt 1
 2479 009e 354B     		ldr	r3, .L157+20
 2480 00a0 1B88     		ldrh	r3, [r3]
 2481 00a2 0133     		adds	r3, r3, #1
 2482 00a4 9AB2     		uxth	r2, r3
 2483 00a6 334B     		ldr	r3, .L157+20
 2484 00a8 1A80     		strh	r2, [r3]	@ movhi
 963:main.c        **** 				szCommandsBuffer[i] = 0; // null terminate the string
 2485              		.loc 1 963 0
 2486 00aa FB88     		ldrh	r3, [r7, #6]
 2487 00ac 2F4A     		ldr	r2, .L157+12
 2488 00ae 0021     		movs	r1, #0
 2489 00b0 D154     		strb	r1, [r2, r3]
 2490              	.L151:
 964:main.c        **** 			}
 965:main.c        **** 			i++;
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 62


 2491              		.loc 1 965 0
 2492 00b2 FB88     		ldrh	r3, [r7, #6]
 2493 00b4 0133     		adds	r3, r3, #1
 2494 00b6 FB80     		strh	r3, [r7, #6]	@ movhi
 966:main.c        **** 			i = i % CIRCULAR_BUFFER_SIZE;
 2495              		.loc 1 966 0
 2496 00b8 FB88     		ldrh	r3, [r7, #6]	@ movhi
 2497 00ba C3F30B03 		ubfx	r3, r3, #0, #12
 2498 00be FB80     		strh	r3, [r7, #6]	@ movhi
 967:main.c        **** 		}while(i != iWrite);
 2499              		.loc 1 967 0
 2500 00c0 294B     		ldr	r3, .L157+8
 2501 00c2 1B88     		ldrh	r3, [r3]
 2502 00c4 FA88     		ldrh	r2, [r7, #6]
 2503 00c6 9A42     		cmp	r2, r3
 2504 00c8 DFD1     		bne	.L152
 2505              	.L145:
 968:main.c        **** 	}
 969:main.c        **** 	
 970:main.c        **** 	i = 0;
 2506              		.loc 1 970 0
 2507 00ca 0023     		movs	r3, #0
 2508 00cc FB80     		strh	r3, [r7, #6]	@ movhi
 971:main.c        **** 	if(cCommandsReady > 0 && bCommandReady == 0)
 2509              		.loc 1 971 0
 2510 00ce 294B     		ldr	r3, .L157+20
 2511 00d0 1B88     		ldrh	r3, [r3]
 2512 00d2 002B     		cmp	r3, #0
 2513 00d4 40D0     		beq	.L156
 2514              		.loc 1 971 0 is_stmt 0 discriminator 1
 2515 00d6 284B     		ldr	r3, .L157+24
 2516 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2517 00da 002B     		cmp	r3, #0
 2518 00dc 3CD1     		bne	.L156
 972:main.c        **** 	{
 973:main.c        **** 		while(szCommandsBuffer[iRead] != 0)
 2519              		.loc 1 973 0 is_stmt 1
 2520 00de 17E0     		b	.L154
 2521              	.L155:
 974:main.c        **** 		{
 975:main.c        **** 			szCommand[i] = szCommandsBuffer[iRead];
 2522              		.loc 1 975 0
 2523 00e0 FB88     		ldrh	r3, [r7, #6]
 2524 00e2 234A     		ldr	r2, .L157+16
 2525 00e4 1288     		ldrh	r2, [r2]
 2526 00e6 1146     		mov	r1, r2
 2527 00e8 204A     		ldr	r2, .L157+12
 2528 00ea 515C     		ldrb	r1, [r2, r1]	@ zero_extendqisi2
 2529 00ec 234A     		ldr	r2, .L157+28
 2530 00ee D154     		strb	r1, [r2, r3]
 976:main.c        **** 			i++;
 2531              		.loc 1 976 0
 2532 00f0 FB88     		ldrh	r3, [r7, #6]
 2533 00f2 0133     		adds	r3, r3, #1
 2534 00f4 FB80     		strh	r3, [r7, #6]	@ movhi
 977:main.c        **** 			iRead++;
 2535              		.loc 1 977 0
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 63


 2536 00f6 1E4B     		ldr	r3, .L157+16
 2537 00f8 1B88     		ldrh	r3, [r3]
 2538 00fa 0133     		adds	r3, r3, #1
 2539 00fc 9AB2     		uxth	r2, r3
 2540 00fe 1C4B     		ldr	r3, .L157+16
 2541 0100 1A80     		strh	r2, [r3]	@ movhi
 978:main.c        **** 			iRead = iRead % CIRCULAR_BUFFER_SIZE;
 2542              		.loc 1 978 0
 2543 0102 1B4B     		ldr	r3, .L157+16
 2544 0104 1B88     		ldrh	r3, [r3]
 2545 0106 C3F30B03 		ubfx	r3, r3, #0, #12
 2546 010a 9AB2     		uxth	r2, r3
 2547 010c 184B     		ldr	r3, .L157+16
 2548 010e 1A80     		strh	r2, [r3]	@ movhi
 2549              	.L154:
 973:main.c        **** 		{
 2550              		.loc 1 973 0
 2551 0110 174B     		ldr	r3, .L157+16
 2552 0112 1B88     		ldrh	r3, [r3]
 2553 0114 1A46     		mov	r2, r3
 2554 0116 154B     		ldr	r3, .L157+12
 2555 0118 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 2556 011a 002B     		cmp	r3, #0
 2557 011c E0D1     		bne	.L155
 979:main.c        **** 		}
 980:main.c        **** 		
 981:main.c        **** 		szCommand[i] = 0;
 2558              		.loc 1 981 0
 2559 011e FB88     		ldrh	r3, [r7, #6]
 2560 0120 164A     		ldr	r2, .L157+28
 2561 0122 0021     		movs	r1, #0
 2562 0124 D154     		strb	r1, [r2, r3]
 982:main.c        **** 		iRead++;
 2563              		.loc 1 982 0
 2564 0126 124B     		ldr	r3, .L157+16
 2565 0128 1B88     		ldrh	r3, [r3]
 2566 012a 0133     		adds	r3, r3, #1
 2567 012c 9AB2     		uxth	r2, r3
 2568 012e 104B     		ldr	r3, .L157+16
 2569 0130 1A80     		strh	r2, [r3]	@ movhi
 983:main.c        **** 		iRead = iRead % CIRCULAR_BUFFER_SIZE;
 2570              		.loc 1 983 0
 2571 0132 0F4B     		ldr	r3, .L157+16
 2572 0134 1B88     		ldrh	r3, [r3]
 2573 0136 C3F30B03 		ubfx	r3, r3, #0, #12
 2574 013a 9AB2     		uxth	r2, r3
 2575 013c 0C4B     		ldr	r3, .L157+16
 2576 013e 1A80     		strh	r2, [r3]	@ movhi
 984:main.c        **** 		cCommandsReady--;
 2577              		.loc 1 984 0
 2578 0140 0C4B     		ldr	r3, .L157+20
 2579 0142 1B88     		ldrh	r3, [r3]
 2580 0144 013B     		subs	r3, r3, #1
 2581 0146 9AB2     		uxth	r2, r3
 2582 0148 0A4B     		ldr	r3, .L157+20
 2583 014a 1A80     		strh	r2, [r3]	@ movhi
 985:main.c        **** 		if(i == 0)
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 64


 2584              		.loc 1 985 0
 2585 014c FB88     		ldrh	r3, [r7, #6]
 2586 014e 002B     		cmp	r3, #0
 2587 0150 02D0     		beq	.L156
 986:main.c        **** 		{
 987:main.c        **** 			// this is a zero length command, nothing to do
 988:main.c        **** 		}
 989:main.c        **** 		else
 990:main.c        **** 		{
 991:main.c        **** 			// the command was at least 1 character, report it
 992:main.c        **** 			bCommandReady = 1;
 2588              		.loc 1 992 0
 2589 0152 094B     		ldr	r3, .L157+24
 2590 0154 0122     		movs	r2, #1
 2591 0156 1A70     		strb	r2, [r3]
 2592              	.L156:
 993:main.c        **** 		}
 994:main.c        **** 	}
 995:main.c        **** }
 2593              		.loc 1 995 0
 2594 0158 00BF     		nop
 2595 015a 0837     		adds	r7, r7, #8
 2596              		.cfi_def_cfa_offset 8
 2597 015c BD46     		mov	sp, r7
 2598              		.cfi_def_cfa_register 13
 2599              		@ sp needed
 2600 015e 80BD     		pop	{r7, pc}
 2601              	.L158:
 2602              		.align	2
 2603              	.L157:
 2604 0160 00000000 		.word	szTempBuffer
 2605 0164 00000000 		.word	cCharsReceived
 2606 0168 00000000 		.word	iWrite
 2607 016c 00000000 		.word	szCommandsBuffer
 2608 0170 00000000 		.word	iRead
 2609 0174 00000000 		.word	cCommandsReady
 2610 0178 00000000 		.word	bCommandReady
 2611 017c 00000000 		.word	szCommand
 2612              		.cfi_endproc
 2613              	.LFE68:
 2614              		.size	CommandCheck, .-CommandCheck
 2615              		.section	.text.PutString,"ax",%progbits
 2616              		.align	2
 2617              		.global	PutString
 2618              		.thumb
 2619              		.thumb_func
 2620              		.type	PutString, %function
 2621              	PutString:
 2622              	.LFB69:
 996:main.c        **** 
 997:main.c        **** void PutString(char * string)
 998:main.c        **** {
 2623              		.loc 1 998 0
 2624              		.cfi_startproc
 2625              		@ args = 0, pretend = 0, frame = 8
 2626              		@ frame_needed = 1, uses_anonymous_args = 0
 2627 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 65


 2628              		.cfi_def_cfa_offset 8
 2629              		.cfi_offset 7, -8
 2630              		.cfi_offset 14, -4
 2631 0002 82B0     		sub	sp, sp, #8
 2632              		.cfi_def_cfa_offset 16
 2633 0004 00AF     		add	r7, sp, #0
 2634              		.cfi_def_cfa_register 7
 2635 0006 7860     		str	r0, [r7, #4]
 999:main.c        **** 	while(USBUART_CDCIsReady() == 0){};
 2636              		.loc 1 999 0
 2637 0008 00BF     		nop
 2638              	.L160:
 2639              		.loc 1 999 0 is_stmt 0 discriminator 1
 2640 000a FFF7FEFF 		bl	USBUART_CDCIsReady
 2641 000e 0346     		mov	r3, r0
 2642 0010 002B     		cmp	r3, #0
 2643 0012 FAD0     		beq	.L160
1000:main.c        **** 	USBUART_PutString(string);
 2644              		.loc 1 1000 0 is_stmt 1
 2645 0014 7868     		ldr	r0, [r7, #4]
 2646 0016 FFF7FEFF 		bl	USBUART_PutString
1001:main.c        **** }
 2647              		.loc 1 1001 0
 2648 001a 00BF     		nop
 2649 001c 0837     		adds	r7, r7, #8
 2650              		.cfi_def_cfa_offset 8
 2651 001e BD46     		mov	sp, r7
 2652              		.cfi_def_cfa_register 13
 2653              		@ sp needed
 2654 0020 80BD     		pop	{r7, pc}
 2655              		.cfi_endproc
 2656              	.LFE69:
 2657              		.size	PutString, .-PutString
 2658 0022 00BF     		.section	.text.PutChar,"ax",%progbits
 2659              		.align	2
 2660              		.global	PutChar
 2661              		.thumb
 2662              		.thumb_func
 2663              		.type	PutChar, %function
 2664              	PutChar:
 2665              	.LFB70:
1002:main.c        **** 
1003:main.c        **** void PutChar(char Data)
1004:main.c        **** {
 2666              		.loc 1 1004 0
 2667              		.cfi_startproc
 2668              		@ args = 0, pretend = 0, frame = 8
 2669              		@ frame_needed = 1, uses_anonymous_args = 0
 2670 0000 80B5     		push	{r7, lr}
 2671              		.cfi_def_cfa_offset 8
 2672              		.cfi_offset 7, -8
 2673              		.cfi_offset 14, -4
 2674 0002 82B0     		sub	sp, sp, #8
 2675              		.cfi_def_cfa_offset 16
 2676 0004 00AF     		add	r7, sp, #0
 2677              		.cfi_def_cfa_register 7
 2678 0006 0346     		mov	r3, r0
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 66


 2679 0008 FB71     		strb	r3, [r7, #7]
1005:main.c        **** 	while(USBUART_CDCIsReady() == 0){};
 2680              		.loc 1 1005 0
 2681 000a 00BF     		nop
 2682              	.L162:
 2683              		.loc 1 1005 0 is_stmt 0 discriminator 1
 2684 000c FFF7FEFF 		bl	USBUART_CDCIsReady
 2685 0010 0346     		mov	r3, r0
 2686 0012 002B     		cmp	r3, #0
 2687 0014 FAD0     		beq	.L162
1006:main.c        **** 	USBUART_PutChar(Data);
 2688              		.loc 1 1006 0 is_stmt 1
 2689 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2690 0018 1846     		mov	r0, r3
 2691 001a FFF7FEFF 		bl	USBUART_PutChar
1007:main.c        **** }
 2692              		.loc 1 1007 0
 2693 001e 00BF     		nop
 2694 0020 0837     		adds	r7, r7, #8
 2695              		.cfi_def_cfa_offset 8
 2696 0022 BD46     		mov	sp, r7
 2697              		.cfi_def_cfa_register 13
 2698              		@ sp needed
 2699 0024 80BD     		pop	{r7, pc}
 2700              		.cfi_endproc
 2701              	.LFE70:
 2702              		.size	PutChar, .-PutChar
 2703 0026 00BF     		.text
 2704              	.Letext0:
 2705              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 2706              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 2707              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2708              		.file 5 "Generated_Source\\PSoC5/CYDMAC.H"
 2709              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 2710              		.section	.debug_info,"",%progbits
 2711              	.Ldebug_info0:
 2712 0000 F0040000 		.4byte	0x4f0
 2713 0004 0400     		.2byte	0x4
 2714 0006 00000000 		.4byte	.Ldebug_abbrev0
 2715 000a 04       		.byte	0x4
 2716 000b 01       		.uleb128 0x1
 2717 000c 77000000 		.4byte	.LASF69
 2718 0010 0C       		.byte	0xc
 2719 0011 37030000 		.4byte	.LASF70
 2720 0015 36000000 		.4byte	.LASF71
 2721 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2722 001d 00000000 		.4byte	0
 2723 0021 00000000 		.4byte	.Ldebug_line0
 2724 0025 02       		.uleb128 0x2
 2725 0026 01       		.byte	0x1
 2726 0027 06       		.byte	0x6
 2727 0028 5A020000 		.4byte	.LASF0
 2728 002c 02       		.uleb128 0x2
 2729 002d 01       		.byte	0x1
 2730 002e 08       		.byte	0x8
 2731 002f 3A020000 		.4byte	.LASF1
 2732 0033 02       		.uleb128 0x2
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 67


 2733 0034 02       		.byte	0x2
 2734 0035 05       		.byte	0x5
 2735 0036 2C000000 		.4byte	.LASF2
 2736 003a 02       		.uleb128 0x2
 2737 003b 02       		.byte	0x2
 2738 003c 07       		.byte	0x7
 2739 003d FE020000 		.4byte	.LASF3
 2740 0041 03       		.uleb128 0x3
 2741 0042 6B030000 		.4byte	.LASF9
 2742 0046 02       		.byte	0x2
 2743 0047 3F       		.byte	0x3f
 2744 0048 4C000000 		.4byte	0x4c
 2745 004c 02       		.uleb128 0x2
 2746 004d 04       		.byte	0x4
 2747 004e 05       		.byte	0x5
 2748 004f DE010000 		.4byte	.LASF4
 2749 0053 02       		.uleb128 0x2
 2750 0054 04       		.byte	0x4
 2751 0055 07       		.byte	0x7
 2752 0056 43030000 		.4byte	.LASF5
 2753 005a 02       		.uleb128 0x2
 2754 005b 08       		.byte	0x8
 2755 005c 05       		.byte	0x5
 2756 005d D0010000 		.4byte	.LASF6
 2757 0061 02       		.uleb128 0x2
 2758 0062 08       		.byte	0x8
 2759 0063 07       		.byte	0x7
 2760 0064 66020000 		.4byte	.LASF7
 2761 0068 04       		.uleb128 0x4
 2762 0069 04       		.byte	0x4
 2763 006a 05       		.byte	0x5
 2764 006b 696E7400 		.ascii	"int\000"
 2765 006f 02       		.uleb128 0x2
 2766 0070 04       		.byte	0x4
 2767 0071 07       		.byte	0x7
 2768 0072 7D020000 		.4byte	.LASF8
 2769 0076 03       		.uleb128 0x3
 2770 0077 EA020000 		.4byte	.LASF10
 2771 007b 03       		.byte	0x3
 2772 007c 2C       		.byte	0x2c
 2773 007d 41000000 		.4byte	0x41
 2774 0081 05       		.uleb128 0x5
 2775 0082 11030000 		.4byte	.LASF11
 2776 0086 04       		.byte	0x4
 2777 0087 9201     		.2byte	0x192
 2778 0089 2C000000 		.4byte	0x2c
 2779 008d 05       		.uleb128 0x5
 2780 008e 25010000 		.4byte	.LASF12
 2781 0092 04       		.byte	0x4
 2782 0093 9301     		.2byte	0x193
 2783 0095 3A000000 		.4byte	0x3a
 2784 0099 05       		.uleb128 0x5
 2785 009a 30030000 		.4byte	.LASF13
 2786 009e 04       		.byte	0x4
 2787 009f 9401     		.2byte	0x194
 2788 00a1 53000000 		.4byte	0x53
 2789 00a5 05       		.uleb128 0x5
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 68


 2790 00a6 55030000 		.4byte	.LASF14
 2791 00aa 04       		.byte	0x4
 2792 00ab 9701     		.2byte	0x197
 2793 00ad 4C000000 		.4byte	0x4c
 2794 00b1 02       		.uleb128 0x2
 2795 00b2 04       		.byte	0x4
 2796 00b3 04       		.byte	0x4
 2797 00b4 B7010000 		.4byte	.LASF15
 2798 00b8 02       		.uleb128 0x2
 2799 00b9 08       		.byte	0x8
 2800 00ba 04       		.byte	0x4
 2801 00bb 5B030000 		.4byte	.LASF16
 2802 00bf 02       		.uleb128 0x2
 2803 00c0 01       		.byte	0x1
 2804 00c1 08       		.byte	0x8
 2805 00c2 E0020000 		.4byte	.LASF17
 2806 00c6 05       		.uleb128 0x5
 2807 00c7 3E030000 		.4byte	.LASF18
 2808 00cb 04       		.byte	0x4
 2809 00cc 3C02     		.2byte	0x23c
 2810 00ce D2000000 		.4byte	0xd2
 2811 00d2 06       		.uleb128 0x6
 2812 00d3 81000000 		.4byte	0x81
 2813 00d7 05       		.uleb128 0x5
 2814 00d8 26000000 		.4byte	.LASF19
 2815 00dc 04       		.byte	0x4
 2816 00dd 3D02     		.2byte	0x23d
 2817 00df E3000000 		.4byte	0xe3
 2818 00e3 06       		.uleb128 0x6
 2819 00e4 8D000000 		.4byte	0x8d
 2820 00e8 02       		.uleb128 0x2
 2821 00e9 08       		.byte	0x8
 2822 00ea 04       		.byte	0x4
 2823 00eb 26020000 		.4byte	.LASF20
 2824 00ef 02       		.uleb128 0x2
 2825 00f0 04       		.byte	0x4
 2826 00f1 07       		.byte	0x7
 2827 00f2 75030000 		.4byte	.LASF21
 2828 00f6 07       		.uleb128 0x7
 2829 00f7 04       		.byte	0x4
 2830 00f8 BF000000 		.4byte	0xbf
 2831 00fc 08       		.uleb128 0x8
 2832 00fd D2000000 		.4byte	0xd2
 2833 0101 0C010000 		.4byte	0x10c
 2834 0105 09       		.uleb128 0x9
 2835 0106 EF000000 		.4byte	0xef
 2836 010a 03       		.byte	0x3
 2837 010b 00       		.byte	0
 2838 010c 0A       		.uleb128 0xa
 2839 010d 00000000 		.4byte	.LASF72
 2840 0111 08       		.byte	0x8
 2841 0112 05       		.byte	0x5
 2842 0113 59       		.byte	0x59
 2843 0114 31010000 		.4byte	0x131
 2844 0118 0B       		.uleb128 0xb
 2845 0119 54443000 		.ascii	"TD0\000"
 2846 011d 05       		.byte	0x5
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 69


 2847 011e 5B       		.byte	0x5b
 2848 011f 31010000 		.4byte	0x131
 2849 0123 00       		.byte	0
 2850 0124 0B       		.uleb128 0xb
 2851 0125 54443100 		.ascii	"TD1\000"
 2852 0129 05       		.byte	0x5
 2853 012a 5C       		.byte	0x5c
 2854 012b 36010000 		.4byte	0x136
 2855 012f 04       		.byte	0x4
 2856 0130 00       		.byte	0
 2857 0131 06       		.uleb128 0x6
 2858 0132 FC000000 		.4byte	0xfc
 2859 0136 06       		.uleb128 0x6
 2860 0137 FC000000 		.4byte	0xfc
 2861 013b 03       		.uleb128 0x3
 2862 013c A5020000 		.4byte	.LASF22
 2863 0140 05       		.byte	0x5
 2864 0141 5E       		.byte	0x5e
 2865 0142 0C010000 		.4byte	0x10c
 2866 0146 0C       		.uleb128 0xc
 2867 0147 E5020000 		.4byte	.LASF34
 2868 014b 01       		.byte	0x1
 2869 014c 78       		.byte	0x78
 2870 014d 68000000 		.4byte	0x68
 2871 0151 00000000 		.4byte	.LFB64
 2872 0155 CC0E0000 		.4byte	.LFE64-.LFB64
 2873 0159 01       		.uleb128 0x1
 2874 015a 9C       		.byte	0x9c
 2875 015b EA010000 		.4byte	0x1ea
 2876 015f 0D       		.uleb128 0xd
 2877 0160 BF020000 		.4byte	.LASF23
 2878 0164 01       		.byte	0x1
 2879 0165 7A       		.byte	0x7a
 2880 0166 81000000 		.4byte	0x81
 2881 016a 02       		.uleb128 0x2
 2882 016b 91       		.byte	0x91
 2883 016c 57       		.sleb128 -41
 2884 016d 0D       		.uleb128 0xd
 2885 016e BD010000 		.4byte	.LASF24
 2886 0172 01       		.byte	0x1
 2887 0173 7B       		.byte	0x7b
 2888 0174 8D000000 		.4byte	0x8d
 2889 0178 02       		.uleb128 0x2
 2890 0179 91       		.byte	0x91
 2891 017a 54       		.sleb128 -44
 2892 017b 0E       		.uleb128 0xe
 2893 017c 70737A00 		.ascii	"psz\000"
 2894 0180 01       		.byte	0x1
 2895 0181 7C       		.byte	0x7c
 2896 0182 F6000000 		.4byte	0xf6
 2897 0186 02       		.uleb128 0x2
 2898 0187 91       		.byte	0x91
 2899 0188 5C       		.sleb128 -36
 2900 0189 0D       		.uleb128 0xd
 2901 018a 48020000 		.4byte	.LASF25
 2902 018e 01       		.byte	0x1
 2903 018f 7D       		.byte	0x7d
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 70


 2904 0190 8D000000 		.4byte	0x8d
 2905 0194 02       		.uleb128 0x2
 2906 0195 91       		.byte	0x91
 2907 0196 52       		.sleb128 -46
 2908 0197 0D       		.uleb128 0xd
 2909 0198 FF030000 		.4byte	.LASF26
 2910 019c 01       		.byte	0x1
 2911 019d 7D       		.byte	0x7d
 2912 019e 8D000000 		.4byte	0x8d
 2913 01a2 02       		.uleb128 0x2
 2914 01a3 91       		.byte	0x91
 2915 01a4 6E       		.sleb128 -18
 2916 01a5 0E       		.uleb128 0xe
 2917 01a6 6900     		.ascii	"i\000"
 2918 01a8 01       		.byte	0x1
 2919 01a9 7D       		.byte	0x7d
 2920 01aa 8D000000 		.4byte	0x8d
 2921 01ae 02       		.uleb128 0x2
 2922 01af 91       		.byte	0x91
 2923 01b0 6C       		.sleb128 -20
 2924 01b1 0D       		.uleb128 0xd
 2925 01b2 09020000 		.4byte	.LASF27
 2926 01b6 01       		.byte	0x1
 2927 01b7 7E       		.byte	0x7e
 2928 01b8 99000000 		.4byte	0x99
 2929 01bc 02       		.uleb128 0x2
 2930 01bd 91       		.byte	0x91
 2931 01be 68       		.sleb128 -24
 2932 01bf 0D       		.uleb128 0xd
 2933 01c0 CB010000 		.4byte	.LASF28
 2934 01c4 01       		.byte	0x1
 2935 01c5 7F       		.byte	0x7f
 2936 01c6 B1000000 		.4byte	0xb1
 2937 01ca 02       		.uleb128 0x2
 2938 01cb 91       		.byte	0x91
 2939 01cc 58       		.sleb128 -40
 2940 01cd 0D       		.uleb128 0xd
 2941 01ce 12000000 		.4byte	.LASF29
 2942 01d2 01       		.byte	0x1
 2943 01d3 80       		.byte	0x80
 2944 01d4 B1000000 		.4byte	0xb1
 2945 01d8 02       		.uleb128 0x2
 2946 01d9 91       		.byte	0x91
 2947 01da 64       		.sleb128 -28
 2948 01db 0D       		.uleb128 0xd
 2949 01dc 98010000 		.4byte	.LASF30
 2950 01e0 01       		.byte	0x1
 2951 01e1 81       		.byte	0x81
 2952 01e2 B1000000 		.4byte	0xb1
 2953 01e6 02       		.uleb128 0x2
 2954 01e7 91       		.byte	0x91
 2955 01e8 60       		.sleb128 -32
 2956 01e9 00       		.byte	0
 2957 01ea 0F       		.uleb128 0xf
 2958 01eb 6B010000 		.4byte	.LASF31
 2959 01ef 01       		.byte	0x1
 2960 01f0 2703     		.2byte	0x327
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 71


 2961 01f2 00000000 		.4byte	.LFB65
 2962 01f6 14010000 		.4byte	.LFE65-.LFB65
 2963 01fa 01       		.uleb128 0x1
 2964 01fb 9C       		.byte	0x9c
 2965 01fc 0F       		.uleb128 0xf
 2966 01fd A2010000 		.4byte	.LASF32
 2967 0201 01       		.byte	0x1
 2968 0202 6A03     		.2byte	0x36a
 2969 0204 00000000 		.4byte	.LFB66
 2970 0208 30010000 		.4byte	.LFE66-.LFB66
 2971 020c 01       		.uleb128 0x1
 2972 020d 9C       		.byte	0x9c
 2973 020e 10       		.uleb128 0x10
 2974 020f 58010000 		.4byte	.LASF73
 2975 0213 01       		.byte	0x1
 2976 0214 8703     		.2byte	0x387
 2977 0216 8D000000 		.4byte	0x8d
 2978 021a 00000000 		.4byte	.LFB67
 2979 021e 60000000 		.4byte	.LFE67-.LFB67
 2980 0222 01       		.uleb128 0x1
 2981 0223 9C       		.byte	0x9c
 2982 0224 47020000 		.4byte	0x247
 2983 0228 11       		.uleb128 0x11
 2984 0229 62030000 		.4byte	.LASF38
 2985 022d 01       		.byte	0x1
 2986 022e 8703     		.2byte	0x387
 2987 0230 81000000 		.4byte	0x81
 2988 0234 02       		.uleb128 0x2
 2989 0235 91       		.byte	0x91
 2990 0236 6F       		.sleb128 -17
 2991 0237 12       		.uleb128 0x12
 2992 0238 2C010000 		.4byte	.LASF33
 2993 023c 01       		.byte	0x1
 2994 023d 8903     		.2byte	0x389
 2995 023f 8D000000 		.4byte	0x8d
 2996 0243 02       		.uleb128 0x2
 2997 0244 91       		.byte	0x91
 2998 0245 76       		.sleb128 -10
 2999 0246 00       		.byte	0
 3000 0247 13       		.uleb128 0x13
 3001 0248 4D020000 		.4byte	.LASF35
 3002 024c 01       		.byte	0x1
 3003 024d 9903     		.2byte	0x399
 3004 024f 00000000 		.4byte	.LFB68
 3005 0253 80010000 		.4byte	.LFE68-.LFB68
 3006 0257 01       		.uleb128 0x1
 3007 0258 9C       		.byte	0x9c
 3008 0259 7A020000 		.4byte	0x27a
 3009 025d 14       		.uleb128 0x14
 3010 025e 6900     		.ascii	"i\000"
 3011 0260 01       		.byte	0x1
 3012 0261 9B03     		.2byte	0x39b
 3013 0263 8D000000 		.4byte	0x8d
 3014 0267 02       		.uleb128 0x2
 3015 0268 91       		.byte	0x91
 3016 0269 76       		.sleb128 -10
 3017 026a 12       		.uleb128 0x12
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 72


 3018 026b B5030000 		.4byte	.LASF36
 3019 026f 01       		.byte	0x1
 3020 0270 9B03     		.2byte	0x39b
 3021 0272 8D000000 		.4byte	0x8d
 3022 0276 02       		.uleb128 0x2
 3023 0277 91       		.byte	0x91
 3024 0278 74       		.sleb128 -12
 3025 0279 00       		.byte	0
 3026 027a 13       		.uleb128 0x13
 3027 027b AB030000 		.4byte	.LASF37
 3028 027f 01       		.byte	0x1
 3029 0280 E503     		.2byte	0x3e5
 3030 0282 00000000 		.4byte	.LFB69
 3031 0286 22000000 		.4byte	.LFE69-.LFB69
 3032 028a 01       		.uleb128 0x1
 3033 028b 9C       		.byte	0x9c
 3034 028c A0020000 		.4byte	0x2a0
 3035 0290 11       		.uleb128 0x11
 3036 0291 EE010000 		.4byte	.LASF39
 3037 0295 01       		.byte	0x1
 3038 0296 E503     		.2byte	0x3e5
 3039 0298 F6000000 		.4byte	0xf6
 3040 029c 02       		.uleb128 0x2
 3041 029d 91       		.byte	0x91
 3042 029e 74       		.sleb128 -12
 3043 029f 00       		.byte	0
 3044 02a0 13       		.uleb128 0x13
 3045 02a1 32020000 		.4byte	.LASF40
 3046 02a5 01       		.byte	0x1
 3047 02a6 EB03     		.2byte	0x3eb
 3048 02a8 00000000 		.4byte	.LFB70
 3049 02ac 26000000 		.4byte	.LFE70-.LFB70
 3050 02b0 01       		.uleb128 0x1
 3051 02b1 9C       		.byte	0x9c
 3052 02b2 C6020000 		.4byte	0x2c6
 3053 02b6 11       		.uleb128 0x11
 3054 02b7 F5010000 		.4byte	.LASF41
 3055 02bb 01       		.byte	0x1
 3056 02bc EB03     		.2byte	0x3eb
 3057 02be BF000000 		.4byte	0xbf
 3058 02c2 02       		.uleb128 0x2
 3059 02c3 91       		.byte	0x91
 3060 02c4 77       		.sleb128 -9
 3061 02c5 00       		.byte	0
 3062 02c6 15       		.uleb128 0x15
 3063 02c7 C3030000 		.4byte	.LASF42
 3064 02cb 06       		.byte	0x6
 3065 02cc 9606     		.2byte	0x696
 3066 02ce D2020000 		.4byte	0x2d2
 3067 02d2 06       		.uleb128 0x6
 3068 02d3 76000000 		.4byte	0x76
 3069 02d7 16       		.uleb128 0x16
 3070 02d8 13020000 		.4byte	.LASF43
 3071 02dc 01       		.byte	0x1
 3072 02dd 42       		.byte	0x42
 3073 02de 81000000 		.4byte	0x81
 3074 02e2 05       		.uleb128 0x5
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 73


 3075 02e3 03       		.byte	0x3
 3076 02e4 00000000 		.4byte	DMA_Channel_1_Chan
 3077 02e8 08       		.uleb128 0x8
 3078 02e9 81000000 		.4byte	0x81
 3079 02ed F8020000 		.4byte	0x2f8
 3080 02f1 09       		.uleb128 0x9
 3081 02f2 EF000000 		.4byte	0xef
 3082 02f6 00       		.byte	0
 3083 02f7 00       		.byte	0
 3084 02f8 16       		.uleb128 0x16
 3085 02f9 EE030000 		.4byte	.LASF44
 3086 02fd 01       		.byte	0x1
 3087 02fe 43       		.byte	0x43
 3088 02ff E8020000 		.4byte	0x2e8
 3089 0303 05       		.uleb128 0x5
 3090 0304 03       		.byte	0x3
 3091 0305 00000000 		.4byte	DMA_Channel_1_TD
 3092 0309 16       		.uleb128 0x16
 3093 030a 12010000 		.4byte	.LASF45
 3094 030e 01       		.byte	0x1
 3095 030f 47       		.byte	0x47
 3096 0310 81000000 		.4byte	0x81
 3097 0314 05       		.uleb128 0x5
 3098 0315 03       		.byte	0x3
 3099 0316 00000000 		.4byte	DMA_Channel_2_Chan
 3100 031a 16       		.uleb128 0x16
 3101 031b 32010000 		.4byte	.LASF46
 3102 031f 01       		.byte	0x1
 3103 0320 48       		.byte	0x48
 3104 0321 E8020000 		.4byte	0x2e8
 3105 0325 05       		.uleb128 0x5
 3106 0326 03       		.byte	0x3
 3107 0327 00000000 		.4byte	DMA_Channel_2_TD
 3108 032b 08       		.uleb128 0x8
 3109 032c 8D000000 		.4byte	0x8d
 3110 0330 3C030000 		.4byte	0x33c
 3111 0334 17       		.uleb128 0x17
 3112 0335 EF000000 		.4byte	0xef
 3113 0339 FF03     		.2byte	0x3ff
 3114 033b 00       		.byte	0
 3115 033c 16       		.uleb128 0x16
 3116 033d 8A020000 		.4byte	.LASF47
 3117 0341 01       		.byte	0x1
 3118 0342 4B       		.byte	0x4b
 3119 0343 2B030000 		.4byte	0x32b
 3120 0347 05       		.uleb128 0x5
 3121 0348 03       		.byte	0x3
 3122 0349 00000000 		.4byte	Channel_1_Data
 3123 034d 16       		.uleb128 0x16
 3124 034e DF030000 		.4byte	.LASF48
 3125 0352 01       		.byte	0x1
 3126 0353 4C       		.byte	0x4c
 3127 0354 2B030000 		.4byte	0x32b
 3128 0358 05       		.uleb128 0x5
 3129 0359 03       		.byte	0x3
 3130 035a 00000000 		.4byte	Channel_2_Data
 3131 035e 08       		.uleb128 0x8
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 74


 3132 035f BF000000 		.4byte	0xbf
 3133 0363 6E030000 		.4byte	0x36e
 3134 0367 09       		.uleb128 0x9
 3135 0368 EF000000 		.4byte	0xef
 3136 036c 3F       		.byte	0x3f
 3137 036d 00       		.byte	0
 3138 036e 16       		.uleb128 0x16
 3139 036f 05010000 		.4byte	.LASF49
 3140 0373 01       		.byte	0x1
 3141 0374 50       		.byte	0x50
 3142 0375 5E030000 		.4byte	0x35e
 3143 0379 05       		.uleb128 0x5
 3144 037a 03       		.byte	0x3
 3145 037b 00000000 		.4byte	szTempBuffer
 3146 037f 16       		.uleb128 0x16
 3147 0380 B0020000 		.4byte	.LASF50
 3148 0384 01       		.byte	0x1
 3149 0385 51       		.byte	0x51
 3150 0386 81000000 		.4byte	0x81
 3151 038a 05       		.uleb128 0x5
 3152 038b 03       		.byte	0x3
 3153 038c 00000000 		.4byte	cCharsReceived
 3154 0390 08       		.uleb128 0x8
 3155 0391 BF000000 		.4byte	0xbf
 3156 0395 A1030000 		.4byte	0x3a1
 3157 0399 17       		.uleb128 0x17
 3158 039a EF000000 		.4byte	0xef
 3159 039e FF0F     		.2byte	0xfff
 3160 03a0 00       		.byte	0
 3161 03a1 16       		.uleb128 0x16
 3162 03a2 9A030000 		.4byte	.LASF51
 3163 03a6 01       		.byte	0x1
 3164 03a7 54       		.byte	0x54
 3165 03a8 90030000 		.4byte	0x390
 3166 03ac 05       		.uleb128 0x5
 3167 03ad 03       		.byte	0x3
 3168 03ae 00000000 		.4byte	szCommandsBuffer
 3169 03b2 16       		.uleb128 0x16
 3170 03b3 17030000 		.4byte	.LASF52
 3171 03b7 01       		.byte	0x1
 3172 03b8 55       		.byte	0x55
 3173 03b9 8D000000 		.4byte	0x8d
 3174 03bd 05       		.uleb128 0x5
 3175 03be 03       		.byte	0x3
 3176 03bf 00000000 		.4byte	iRead
 3177 03c3 16       		.uleb128 0x16
 3178 03c4 E7010000 		.4byte	.LASF53
 3179 03c8 01       		.byte	0x1
 3180 03c9 55       		.byte	0x55
 3181 03ca 8D000000 		.4byte	0x8d
 3182 03ce 05       		.uleb128 0x5
 3183 03cf 03       		.byte	0x3
 3184 03d0 00000000 		.4byte	iWrite
 3185 03d4 16       		.uleb128 0x16
 3186 03d5 7B010000 		.4byte	.LASF54
 3187 03d9 01       		.byte	0x1
 3188 03da 56       		.byte	0x56
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 75


 3189 03db 8D000000 		.4byte	0x8d
 3190 03df 05       		.uleb128 0x5
 3191 03e0 03       		.byte	0x3
 3192 03e1 00000000 		.4byte	cCommandsReady
 3193 03e5 16       		.uleb128 0x16
 3194 03e6 7E030000 		.4byte	.LASF55
 3195 03ea 01       		.byte	0x1
 3196 03eb 58       		.byte	0x58
 3197 03ec 5E030000 		.4byte	0x35e
 3198 03f0 05       		.uleb128 0x5
 3199 03f1 03       		.byte	0x3
 3200 03f2 00000000 		.4byte	szCommand
 3201 03f6 16       		.uleb128 0x16
 3202 03f7 8A010000 		.4byte	.LASF56
 3203 03fb 01       		.byte	0x1
 3204 03fc 59       		.byte	0x59
 3205 03fd 81000000 		.4byte	0x81
 3206 0401 05       		.uleb128 0x5
 3207 0402 03       		.byte	0x3
 3208 0403 00000000 		.4byte	bCommandReady
 3209 0407 16       		.uleb128 0x16
 3210 0408 88030000 		.4byte	.LASF57
 3211 040c 01       		.byte	0x1
 3212 040d 5C       		.byte	0x5c
 3213 040e 81000000 		.4byte	0x81
 3214 0412 05       		.uleb128 0x5
 3215 0413 03       		.byte	0x3
 3216 0414 00000000 		.4byte	preamp_a
 3217 0418 16       		.uleb128 0x16
 3218 0419 91030000 		.4byte	.LASF58
 3219 041d 01       		.byte	0x1
 3220 041e 5C       		.byte	0x5c
 3221 041f 81000000 		.4byte	0x81
 3222 0423 05       		.uleb128 0x5
 3223 0424 03       		.byte	0x3
 3224 0425 00000000 		.4byte	preamp_b
 3225 0429 16       		.uleb128 0x16
 3226 042a 17000000 		.4byte	.LASF59
 3227 042e 01       		.byte	0x1
 3228 042f 5C       		.byte	0x5c
 3229 0430 81000000 		.4byte	0x81
 3230 0434 05       		.uleb128 0x5
 3231 0435 03       		.byte	0x3
 3232 0436 00000000 		.4byte	trigger_source
 3233 043a 16       		.uleb128 0x16
 3234 043b 99020000 		.4byte	.LASF60
 3235 043f 01       		.byte	0x1
 3236 0440 5C       		.byte	0x5c
 3237 0441 81000000 		.4byte	0x81
 3238 0445 05       		.uleb128 0x5
 3239 0446 03       		.byte	0x3
 3240 0447 00000000 		.4byte	preamp_trig
 3241 044b 08       		.uleb128 0x8
 3242 044c 81000000 		.4byte	0x81
 3243 0450 5B040000 		.4byte	0x45b
 3244 0454 09       		.uleb128 0x9
 3245 0455 EF000000 		.4byte	0xef
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 76


 3246 0459 3F       		.byte	0x3f
 3247 045a 00       		.byte	0
 3248 045b 16       		.uleb128 0x16
 3249 045c FA010000 		.4byte	.LASF61
 3250 0460 01       		.byte	0x1
 3251 0461 61       		.byte	0x61
 3252 0462 4B040000 		.4byte	0x44b
 3253 0466 05       		.uleb128 0x5
 3254 0467 03       		.byte	0x3
 3255 0468 00000000 		.4byte	USB_Out_Buffer
 3256 046c 08       		.uleb128 0x8
 3257 046d 81000000 		.4byte	0x81
 3258 0471 7C040000 		.4byte	0x47c
 3259 0475 09       		.uleb128 0x9
 3260 0476 EF000000 		.4byte	0xef
 3261 047a FF       		.byte	0xff
 3262 047b 00       		.byte	0
 3263 047c 16       		.uleb128 0x16
 3264 047d 67000000 		.4byte	.LASF62
 3265 0481 01       		.byte	0x1
 3266 0482 65       		.byte	0x65
 3267 0483 6C040000 		.4byte	0x46c
 3268 0487 05       		.uleb128 0x5
 3269 0488 03       		.byte	0x3
 3270 0489 00000000 		.4byte	Waveform_Buffer
 3271 048d 16       		.uleb128 0x16
 3272 048e 43010000 		.4byte	.LASF63
 3273 0492 01       		.byte	0x1
 3274 0493 66       		.byte	0x66
 3275 0494 6C040000 		.4byte	0x46c
 3276 0498 05       		.uleb128 0x5
 3277 0499 03       		.byte	0x3
 3278 049a 00000000 		.4byte	Waveform_Temp_Buffer
 3279 049e 16       		.uleb128 0x16
 3280 049f AD010000 		.4byte	.LASF64
 3281 04a3 01       		.byte	0x1
 3282 04a4 67       		.byte	0x67
 3283 04a5 81000000 		.4byte	0x81
 3284 04a9 05       		.uleb128 0x5
 3285 04aa 03       		.byte	0x3
 3286 04ab 00000000 		.4byte	wave_gain
 3287 04af 16       		.uleb128 0x16
 3288 04b0 F2020000 		.4byte	.LASF65
 3289 04b4 01       		.byte	0x1
 3290 04b5 68       		.byte	0x68
 3291 04b6 81000000 		.4byte	0x81
 3292 04ba 05       		.uleb128 0x5
 3293 04bb 03       		.byte	0x3
 3294 04bc 00000000 		.4byte	wave_offset
 3295 04c0 16       		.uleb128 0x16
 3296 04c1 D0030000 		.4byte	.LASF66
 3297 04c5 01       		.byte	0x1
 3298 04c6 6C       		.byte	0x6c
 3299 04c7 81000000 		.4byte	0x81
 3300 04cb 05       		.uleb128 0x5
 3301 04cc 03       		.byte	0x3
 3302 04cd 00000000 		.4byte	Noise_Adjusted
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 77


 3303 04d1 16       		.uleb128 0x16
 3304 04d2 C6020000 		.4byte	.LASF67
 3305 04d6 01       		.byte	0x1
 3306 04d7 6F       		.byte	0x6f
 3307 04d8 81000000 		.4byte	0x81
 3308 04dc 05       		.uleb128 0x5
 3309 04dd 03       		.byte	0x3
 3310 04de 00000000 		.4byte	Digital_Input_Status_Last
 3311 04e2 16       		.uleb128 0x16
 3312 04e3 1D030000 		.4byte	.LASF68
 3313 04e7 01       		.byte	0x1
 3314 04e8 70       		.byte	0x70
 3315 04e9 81000000 		.4byte	0x81
 3316 04ed 05       		.uleb128 0x5
 3317 04ee 03       		.byte	0x3
 3318 04ef 00000000 		.4byte	Digital_AutoUpdate
 3319 04f3 00       		.byte	0
 3320              		.section	.debug_abbrev,"",%progbits
 3321              	.Ldebug_abbrev0:
 3322 0000 01       		.uleb128 0x1
 3323 0001 11       		.uleb128 0x11
 3324 0002 01       		.byte	0x1
 3325 0003 25       		.uleb128 0x25
 3326 0004 0E       		.uleb128 0xe
 3327 0005 13       		.uleb128 0x13
 3328 0006 0B       		.uleb128 0xb
 3329 0007 03       		.uleb128 0x3
 3330 0008 0E       		.uleb128 0xe
 3331 0009 1B       		.uleb128 0x1b
 3332 000a 0E       		.uleb128 0xe
 3333 000b 55       		.uleb128 0x55
 3334 000c 17       		.uleb128 0x17
 3335 000d 11       		.uleb128 0x11
 3336 000e 01       		.uleb128 0x1
 3337 000f 10       		.uleb128 0x10
 3338 0010 17       		.uleb128 0x17
 3339 0011 00       		.byte	0
 3340 0012 00       		.byte	0
 3341 0013 02       		.uleb128 0x2
 3342 0014 24       		.uleb128 0x24
 3343 0015 00       		.byte	0
 3344 0016 0B       		.uleb128 0xb
 3345 0017 0B       		.uleb128 0xb
 3346 0018 3E       		.uleb128 0x3e
 3347 0019 0B       		.uleb128 0xb
 3348 001a 03       		.uleb128 0x3
 3349 001b 0E       		.uleb128 0xe
 3350 001c 00       		.byte	0
 3351 001d 00       		.byte	0
 3352 001e 03       		.uleb128 0x3
 3353 001f 16       		.uleb128 0x16
 3354 0020 00       		.byte	0
 3355 0021 03       		.uleb128 0x3
 3356 0022 0E       		.uleb128 0xe
 3357 0023 3A       		.uleb128 0x3a
 3358 0024 0B       		.uleb128 0xb
 3359 0025 3B       		.uleb128 0x3b
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 78


 3360 0026 0B       		.uleb128 0xb
 3361 0027 49       		.uleb128 0x49
 3362 0028 13       		.uleb128 0x13
 3363 0029 00       		.byte	0
 3364 002a 00       		.byte	0
 3365 002b 04       		.uleb128 0x4
 3366 002c 24       		.uleb128 0x24
 3367 002d 00       		.byte	0
 3368 002e 0B       		.uleb128 0xb
 3369 002f 0B       		.uleb128 0xb
 3370 0030 3E       		.uleb128 0x3e
 3371 0031 0B       		.uleb128 0xb
 3372 0032 03       		.uleb128 0x3
 3373 0033 08       		.uleb128 0x8
 3374 0034 00       		.byte	0
 3375 0035 00       		.byte	0
 3376 0036 05       		.uleb128 0x5
 3377 0037 16       		.uleb128 0x16
 3378 0038 00       		.byte	0
 3379 0039 03       		.uleb128 0x3
 3380 003a 0E       		.uleb128 0xe
 3381 003b 3A       		.uleb128 0x3a
 3382 003c 0B       		.uleb128 0xb
 3383 003d 3B       		.uleb128 0x3b
 3384 003e 05       		.uleb128 0x5
 3385 003f 49       		.uleb128 0x49
 3386 0040 13       		.uleb128 0x13
 3387 0041 00       		.byte	0
 3388 0042 00       		.byte	0
 3389 0043 06       		.uleb128 0x6
 3390 0044 35       		.uleb128 0x35
 3391 0045 00       		.byte	0
 3392 0046 49       		.uleb128 0x49
 3393 0047 13       		.uleb128 0x13
 3394 0048 00       		.byte	0
 3395 0049 00       		.byte	0
 3396 004a 07       		.uleb128 0x7
 3397 004b 0F       		.uleb128 0xf
 3398 004c 00       		.byte	0
 3399 004d 0B       		.uleb128 0xb
 3400 004e 0B       		.uleb128 0xb
 3401 004f 49       		.uleb128 0x49
 3402 0050 13       		.uleb128 0x13
 3403 0051 00       		.byte	0
 3404 0052 00       		.byte	0
 3405 0053 08       		.uleb128 0x8
 3406 0054 01       		.uleb128 0x1
 3407 0055 01       		.byte	0x1
 3408 0056 49       		.uleb128 0x49
 3409 0057 13       		.uleb128 0x13
 3410 0058 01       		.uleb128 0x1
 3411 0059 13       		.uleb128 0x13
 3412 005a 00       		.byte	0
 3413 005b 00       		.byte	0
 3414 005c 09       		.uleb128 0x9
 3415 005d 21       		.uleb128 0x21
 3416 005e 00       		.byte	0
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 79


 3417 005f 49       		.uleb128 0x49
 3418 0060 13       		.uleb128 0x13
 3419 0061 2F       		.uleb128 0x2f
 3420 0062 0B       		.uleb128 0xb
 3421 0063 00       		.byte	0
 3422 0064 00       		.byte	0
 3423 0065 0A       		.uleb128 0xa
 3424 0066 13       		.uleb128 0x13
 3425 0067 01       		.byte	0x1
 3426 0068 03       		.uleb128 0x3
 3427 0069 0E       		.uleb128 0xe
 3428 006a 0B       		.uleb128 0xb
 3429 006b 0B       		.uleb128 0xb
 3430 006c 3A       		.uleb128 0x3a
 3431 006d 0B       		.uleb128 0xb
 3432 006e 3B       		.uleb128 0x3b
 3433 006f 0B       		.uleb128 0xb
 3434 0070 01       		.uleb128 0x1
 3435 0071 13       		.uleb128 0x13
 3436 0072 00       		.byte	0
 3437 0073 00       		.byte	0
 3438 0074 0B       		.uleb128 0xb
 3439 0075 0D       		.uleb128 0xd
 3440 0076 00       		.byte	0
 3441 0077 03       		.uleb128 0x3
 3442 0078 08       		.uleb128 0x8
 3443 0079 3A       		.uleb128 0x3a
 3444 007a 0B       		.uleb128 0xb
 3445 007b 3B       		.uleb128 0x3b
 3446 007c 0B       		.uleb128 0xb
 3447 007d 49       		.uleb128 0x49
 3448 007e 13       		.uleb128 0x13
 3449 007f 38       		.uleb128 0x38
 3450 0080 0B       		.uleb128 0xb
 3451 0081 00       		.byte	0
 3452 0082 00       		.byte	0
 3453 0083 0C       		.uleb128 0xc
 3454 0084 2E       		.uleb128 0x2e
 3455 0085 01       		.byte	0x1
 3456 0086 3F       		.uleb128 0x3f
 3457 0087 19       		.uleb128 0x19
 3458 0088 03       		.uleb128 0x3
 3459 0089 0E       		.uleb128 0xe
 3460 008a 3A       		.uleb128 0x3a
 3461 008b 0B       		.uleb128 0xb
 3462 008c 3B       		.uleb128 0x3b
 3463 008d 0B       		.uleb128 0xb
 3464 008e 49       		.uleb128 0x49
 3465 008f 13       		.uleb128 0x13
 3466 0090 11       		.uleb128 0x11
 3467 0091 01       		.uleb128 0x1
 3468 0092 12       		.uleb128 0x12
 3469 0093 06       		.uleb128 0x6
 3470 0094 40       		.uleb128 0x40
 3471 0095 18       		.uleb128 0x18
 3472 0096 9642     		.uleb128 0x2116
 3473 0098 19       		.uleb128 0x19
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 80


 3474 0099 01       		.uleb128 0x1
 3475 009a 13       		.uleb128 0x13
 3476 009b 00       		.byte	0
 3477 009c 00       		.byte	0
 3478 009d 0D       		.uleb128 0xd
 3479 009e 34       		.uleb128 0x34
 3480 009f 00       		.byte	0
 3481 00a0 03       		.uleb128 0x3
 3482 00a1 0E       		.uleb128 0xe
 3483 00a2 3A       		.uleb128 0x3a
 3484 00a3 0B       		.uleb128 0xb
 3485 00a4 3B       		.uleb128 0x3b
 3486 00a5 0B       		.uleb128 0xb
 3487 00a6 49       		.uleb128 0x49
 3488 00a7 13       		.uleb128 0x13
 3489 00a8 02       		.uleb128 0x2
 3490 00a9 18       		.uleb128 0x18
 3491 00aa 00       		.byte	0
 3492 00ab 00       		.byte	0
 3493 00ac 0E       		.uleb128 0xe
 3494 00ad 34       		.uleb128 0x34
 3495 00ae 00       		.byte	0
 3496 00af 03       		.uleb128 0x3
 3497 00b0 08       		.uleb128 0x8
 3498 00b1 3A       		.uleb128 0x3a
 3499 00b2 0B       		.uleb128 0xb
 3500 00b3 3B       		.uleb128 0x3b
 3501 00b4 0B       		.uleb128 0xb
 3502 00b5 49       		.uleb128 0x49
 3503 00b6 13       		.uleb128 0x13
 3504 00b7 02       		.uleb128 0x2
 3505 00b8 18       		.uleb128 0x18
 3506 00b9 00       		.byte	0
 3507 00ba 00       		.byte	0
 3508 00bb 0F       		.uleb128 0xf
 3509 00bc 2E       		.uleb128 0x2e
 3510 00bd 00       		.byte	0
 3511 00be 3F       		.uleb128 0x3f
 3512 00bf 19       		.uleb128 0x19
 3513 00c0 03       		.uleb128 0x3
 3514 00c1 0E       		.uleb128 0xe
 3515 00c2 3A       		.uleb128 0x3a
 3516 00c3 0B       		.uleb128 0xb
 3517 00c4 3B       		.uleb128 0x3b
 3518 00c5 05       		.uleb128 0x5
 3519 00c6 27       		.uleb128 0x27
 3520 00c7 19       		.uleb128 0x19
 3521 00c8 11       		.uleb128 0x11
 3522 00c9 01       		.uleb128 0x1
 3523 00ca 12       		.uleb128 0x12
 3524 00cb 06       		.uleb128 0x6
 3525 00cc 40       		.uleb128 0x40
 3526 00cd 18       		.uleb128 0x18
 3527 00ce 9642     		.uleb128 0x2116
 3528 00d0 19       		.uleb128 0x19
 3529 00d1 00       		.byte	0
 3530 00d2 00       		.byte	0
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 81


 3531 00d3 10       		.uleb128 0x10
 3532 00d4 2E       		.uleb128 0x2e
 3533 00d5 01       		.byte	0x1
 3534 00d6 3F       		.uleb128 0x3f
 3535 00d7 19       		.uleb128 0x19
 3536 00d8 03       		.uleb128 0x3
 3537 00d9 0E       		.uleb128 0xe
 3538 00da 3A       		.uleb128 0x3a
 3539 00db 0B       		.uleb128 0xb
 3540 00dc 3B       		.uleb128 0x3b
 3541 00dd 05       		.uleb128 0x5
 3542 00de 27       		.uleb128 0x27
 3543 00df 19       		.uleb128 0x19
 3544 00e0 49       		.uleb128 0x49
 3545 00e1 13       		.uleb128 0x13
 3546 00e2 11       		.uleb128 0x11
 3547 00e3 01       		.uleb128 0x1
 3548 00e4 12       		.uleb128 0x12
 3549 00e5 06       		.uleb128 0x6
 3550 00e6 40       		.uleb128 0x40
 3551 00e7 18       		.uleb128 0x18
 3552 00e8 9742     		.uleb128 0x2117
 3553 00ea 19       		.uleb128 0x19
 3554 00eb 01       		.uleb128 0x1
 3555 00ec 13       		.uleb128 0x13
 3556 00ed 00       		.byte	0
 3557 00ee 00       		.byte	0
 3558 00ef 11       		.uleb128 0x11
 3559 00f0 05       		.uleb128 0x5
 3560 00f1 00       		.byte	0
 3561 00f2 03       		.uleb128 0x3
 3562 00f3 0E       		.uleb128 0xe
 3563 00f4 3A       		.uleb128 0x3a
 3564 00f5 0B       		.uleb128 0xb
 3565 00f6 3B       		.uleb128 0x3b
 3566 00f7 05       		.uleb128 0x5
 3567 00f8 49       		.uleb128 0x49
 3568 00f9 13       		.uleb128 0x13
 3569 00fa 02       		.uleb128 0x2
 3570 00fb 18       		.uleb128 0x18
 3571 00fc 00       		.byte	0
 3572 00fd 00       		.byte	0
 3573 00fe 12       		.uleb128 0x12
 3574 00ff 34       		.uleb128 0x34
 3575 0100 00       		.byte	0
 3576 0101 03       		.uleb128 0x3
 3577 0102 0E       		.uleb128 0xe
 3578 0103 3A       		.uleb128 0x3a
 3579 0104 0B       		.uleb128 0xb
 3580 0105 3B       		.uleb128 0x3b
 3581 0106 05       		.uleb128 0x5
 3582 0107 49       		.uleb128 0x49
 3583 0108 13       		.uleb128 0x13
 3584 0109 02       		.uleb128 0x2
 3585 010a 18       		.uleb128 0x18
 3586 010b 00       		.byte	0
 3587 010c 00       		.byte	0
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 82


 3588 010d 13       		.uleb128 0x13
 3589 010e 2E       		.uleb128 0x2e
 3590 010f 01       		.byte	0x1
 3591 0110 3F       		.uleb128 0x3f
 3592 0111 19       		.uleb128 0x19
 3593 0112 03       		.uleb128 0x3
 3594 0113 0E       		.uleb128 0xe
 3595 0114 3A       		.uleb128 0x3a
 3596 0115 0B       		.uleb128 0xb
 3597 0116 3B       		.uleb128 0x3b
 3598 0117 05       		.uleb128 0x5
 3599 0118 27       		.uleb128 0x27
 3600 0119 19       		.uleb128 0x19
 3601 011a 11       		.uleb128 0x11
 3602 011b 01       		.uleb128 0x1
 3603 011c 12       		.uleb128 0x12
 3604 011d 06       		.uleb128 0x6
 3605 011e 40       		.uleb128 0x40
 3606 011f 18       		.uleb128 0x18
 3607 0120 9642     		.uleb128 0x2116
 3608 0122 19       		.uleb128 0x19
 3609 0123 01       		.uleb128 0x1
 3610 0124 13       		.uleb128 0x13
 3611 0125 00       		.byte	0
 3612 0126 00       		.byte	0
 3613 0127 14       		.uleb128 0x14
 3614 0128 34       		.uleb128 0x34
 3615 0129 00       		.byte	0
 3616 012a 03       		.uleb128 0x3
 3617 012b 08       		.uleb128 0x8
 3618 012c 3A       		.uleb128 0x3a
 3619 012d 0B       		.uleb128 0xb
 3620 012e 3B       		.uleb128 0x3b
 3621 012f 05       		.uleb128 0x5
 3622 0130 49       		.uleb128 0x49
 3623 0131 13       		.uleb128 0x13
 3624 0132 02       		.uleb128 0x2
 3625 0133 18       		.uleb128 0x18
 3626 0134 00       		.byte	0
 3627 0135 00       		.byte	0
 3628 0136 15       		.uleb128 0x15
 3629 0137 34       		.uleb128 0x34
 3630 0138 00       		.byte	0
 3631 0139 03       		.uleb128 0x3
 3632 013a 0E       		.uleb128 0xe
 3633 013b 3A       		.uleb128 0x3a
 3634 013c 0B       		.uleb128 0xb
 3635 013d 3B       		.uleb128 0x3b
 3636 013e 05       		.uleb128 0x5
 3637 013f 49       		.uleb128 0x49
 3638 0140 13       		.uleb128 0x13
 3639 0141 3F       		.uleb128 0x3f
 3640 0142 19       		.uleb128 0x19
 3641 0143 3C       		.uleb128 0x3c
 3642 0144 19       		.uleb128 0x19
 3643 0145 00       		.byte	0
 3644 0146 00       		.byte	0
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 83


 3645 0147 16       		.uleb128 0x16
 3646 0148 34       		.uleb128 0x34
 3647 0149 00       		.byte	0
 3648 014a 03       		.uleb128 0x3
 3649 014b 0E       		.uleb128 0xe
 3650 014c 3A       		.uleb128 0x3a
 3651 014d 0B       		.uleb128 0xb
 3652 014e 3B       		.uleb128 0x3b
 3653 014f 0B       		.uleb128 0xb
 3654 0150 49       		.uleb128 0x49
 3655 0151 13       		.uleb128 0x13
 3656 0152 3F       		.uleb128 0x3f
 3657 0153 19       		.uleb128 0x19
 3658 0154 02       		.uleb128 0x2
 3659 0155 18       		.uleb128 0x18
 3660 0156 00       		.byte	0
 3661 0157 00       		.byte	0
 3662 0158 17       		.uleb128 0x17
 3663 0159 21       		.uleb128 0x21
 3664 015a 00       		.byte	0
 3665 015b 49       		.uleb128 0x49
 3666 015c 13       		.uleb128 0x13
 3667 015d 2F       		.uleb128 0x2f
 3668 015e 05       		.uleb128 0x5
 3669 015f 00       		.byte	0
 3670 0160 00       		.byte	0
 3671 0161 00       		.byte	0
 3672              		.section	.debug_aranges,"",%progbits
 3673 0000 4C000000 		.4byte	0x4c
 3674 0004 0200     		.2byte	0x2
 3675 0006 00000000 		.4byte	.Ldebug_info0
 3676 000a 04       		.byte	0x4
 3677 000b 00       		.byte	0
 3678 000c 0000     		.2byte	0
 3679 000e 0000     		.2byte	0
 3680 0010 00000000 		.4byte	.LFB64
 3681 0014 CC0E0000 		.4byte	.LFE64-.LFB64
 3682 0018 00000000 		.4byte	.LFB65
 3683 001c 14010000 		.4byte	.LFE65-.LFB65
 3684 0020 00000000 		.4byte	.LFB66
 3685 0024 30010000 		.4byte	.LFE66-.LFB66
 3686 0028 00000000 		.4byte	.LFB67
 3687 002c 60000000 		.4byte	.LFE67-.LFB67
 3688 0030 00000000 		.4byte	.LFB68
 3689 0034 80010000 		.4byte	.LFE68-.LFB68
 3690 0038 00000000 		.4byte	.LFB69
 3691 003c 22000000 		.4byte	.LFE69-.LFB69
 3692 0040 00000000 		.4byte	.LFB70
 3693 0044 26000000 		.4byte	.LFE70-.LFB70
 3694 0048 00000000 		.4byte	0
 3695 004c 00000000 		.4byte	0
 3696              		.section	.debug_ranges,"",%progbits
 3697              	.Ldebug_ranges0:
 3698 0000 00000000 		.4byte	.LFB64
 3699 0004 CC0E0000 		.4byte	.LFE64
 3700 0008 00000000 		.4byte	.LFB65
 3701 000c 14010000 		.4byte	.LFE65
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 84


 3702 0010 00000000 		.4byte	.LFB66
 3703 0014 30010000 		.4byte	.LFE66
 3704 0018 00000000 		.4byte	.LFB67
 3705 001c 60000000 		.4byte	.LFE67
 3706 0020 00000000 		.4byte	.LFB68
 3707 0024 80010000 		.4byte	.LFE68
 3708 0028 00000000 		.4byte	.LFB69
 3709 002c 22000000 		.4byte	.LFE69
 3710 0030 00000000 		.4byte	.LFB70
 3711 0034 26000000 		.4byte	.LFE70
 3712 0038 00000000 		.4byte	0
 3713 003c 00000000 		.4byte	0
 3714              		.section	.debug_line,"",%progbits
 3715              	.Ldebug_line0:
 3716 0000 FE030000 		.section	.debug_str,"MS",%progbits,1
 3716      02005801 
 3716      00000201 
 3716      FB0E0D00 
 3716      01010101 
 3717              	.LASF72:
 3718 0000 646D6163 		.ascii	"dmac_tdmem_struct\000"
 3718      5F74646D 
 3718      656D5F73 
 3718      74727563 
 3718      7400
 3719              	.LASF29:
 3720 0012 63766172 		.ascii	"cvar\000"
 3720      00
 3721              	.LASF59:
 3722 0017 74726967 		.ascii	"trigger_source\000"
 3722      6765725F 
 3722      736F7572 
 3722      636500
 3723              	.LASF19:
 3724 0026 72656731 		.ascii	"reg16\000"
 3724      3600
 3725              	.LASF2:
 3726 002c 73686F72 		.ascii	"short int\000"
 3726      7420696E 
 3726      7400
 3727              	.LASF71:
 3728 0036 433A5C47 		.ascii	"C:\\Git\\CyScope\\ScopeFreeSoC2\\ScopeFreeSoC2.cyds"
 3728      69745C43 
 3728      7953636F 
 3728      70655C53 
 3728      636F7065 
 3729 0065 6E00     		.ascii	"n\000"
 3730              	.LASF62:
 3731 0067 57617665 		.ascii	"Waveform_Buffer\000"
 3731      666F726D 
 3731      5F427566 
 3731      66657200 
 3732              	.LASF69:
 3733 0077 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3733      43313120 
 3733      352E342E 
 3733      31203230 
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 85


 3733      31363036 
 3734 00aa 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3734      20726576 
 3734      6973696F 
 3734      6E203233 
 3734      37373135 
 3735 00dd 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3735      66756E63 
 3735      74696F6E 
 3735      2D736563 
 3735      74696F6E 
 3736              	.LASF49:
 3737 0105 737A5465 		.ascii	"szTempBuffer\000"
 3737      6D704275 
 3737      66666572 
 3737      00
 3738              	.LASF45:
 3739 0112 444D415F 		.ascii	"DMA_Channel_2_Chan\000"
 3739      4368616E 
 3739      6E656C5F 
 3739      325F4368 
 3739      616E00
 3740              	.LASF12:
 3741 0125 75696E74 		.ascii	"uint16\000"
 3741      313600
 3742              	.LASF33:
 3743 012c 696E6465 		.ascii	"index\000"
 3743      7800
 3744              	.LASF46:
 3745 0132 444D415F 		.ascii	"DMA_Channel_2_TD\000"
 3745      4368616E 
 3745      6E656C5F 
 3745      325F5444 
 3745      00
 3746              	.LASF63:
 3747 0143 57617665 		.ascii	"Waveform_Temp_Buffer\000"
 3747      666F726D 
 3747      5F54656D 
 3747      705F4275 
 3747      66666572 
 3748              	.LASF73:
 3749 0158 4765744C 		.ascii	"GetLastSampleIndex\000"
 3749      61737453 
 3749      616D706C 
 3749      65496E64 
 3749      657800
 3750              	.LASF31:
 3751 016b 48617264 		.ascii	"Hardware_Config\000"
 3751      77617265 
 3751      5F436F6E 
 3751      66696700 
 3752              	.LASF54:
 3753 017b 63436F6D 		.ascii	"cCommandsReady\000"
 3753      6D616E64 
 3753      73526561 
 3753      647900
 3754              	.LASF56:
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 86


 3755 018a 62436F6D 		.ascii	"bCommandReady\000"
 3755      6D616E64 
 3755      52656164 
 3755      7900
 3756              	.LASF30:
 3757 0198 77617665 		.ascii	"wave_temp\000"
 3757      5F74656D 
 3757      7000
 3758              	.LASF32:
 3759 01a2 444D415F 		.ascii	"DMA_Config\000"
 3759      436F6E66 
 3759      696700
 3760              	.LASF64:
 3761 01ad 77617665 		.ascii	"wave_gain\000"
 3761      5F676169 
 3761      6E00
 3762              	.LASF15:
 3763 01b7 666C6F61 		.ascii	"float\000"
 3763      7400
 3764              	.LASF24:
 3765 01bd 656E6469 		.ascii	"ending_offset\000"
 3765      6E675F6F 
 3765      66667365 
 3765      7400
 3766              	.LASF28:
 3767 01cb 66726571 		.ascii	"freq\000"
 3767      00
 3768              	.LASF6:
 3769 01d0 6C6F6E67 		.ascii	"long long int\000"
 3769      206C6F6E 
 3769      6720696E 
 3769      7400
 3770              	.LASF4:
 3771 01de 6C6F6E67 		.ascii	"long int\000"
 3771      20696E74 
 3771      00
 3772              	.LASF53:
 3773 01e7 69577269 		.ascii	"iWrite\000"
 3773      746500
 3774              	.LASF39:
 3775 01ee 73747269 		.ascii	"string\000"
 3775      6E6700
 3776              	.LASF41:
 3777 01f5 44617461 		.ascii	"Data\000"
 3777      00
 3778              	.LASF61:
 3779 01fa 5553425F 		.ascii	"USB_Out_Buffer\000"
 3779      4F75745F 
 3779      42756666 
 3779      657200
 3780              	.LASF27:
 3781 0209 70686173 		.ascii	"phase_int\000"
 3781      655F696E 
 3781      7400
 3782              	.LASF43:
 3783 0213 444D415F 		.ascii	"DMA_Channel_1_Chan\000"
 3783      4368616E 
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 87


 3783      6E656C5F 
 3783      315F4368 
 3783      616E00
 3784              	.LASF20:
 3785 0226 6C6F6E67 		.ascii	"long double\000"
 3785      20646F75 
 3785      626C6500 
 3786              	.LASF40:
 3787 0232 50757443 		.ascii	"PutChar\000"
 3787      68617200 
 3788              	.LASF1:
 3789 023a 756E7369 		.ascii	"unsigned char\000"
 3789      676E6564 
 3789      20636861 
 3789      7200
 3790              	.LASF25:
 3791 0248 61766172 		.ascii	"avar\000"
 3791      00
 3792              	.LASF35:
 3793 024d 436F6D6D 		.ascii	"CommandCheck\000"
 3793      616E6443 
 3793      6865636B 
 3793      00
 3794              	.LASF0:
 3795 025a 7369676E 		.ascii	"signed char\000"
 3795      65642063 
 3795      68617200 
 3796              	.LASF7:
 3797 0266 6C6F6E67 		.ascii	"long long unsigned int\000"
 3797      206C6F6E 
 3797      6720756E 
 3797      7369676E 
 3797      65642069 
 3798              	.LASF8:
 3799 027d 756E7369 		.ascii	"unsigned int\000"
 3799      676E6564 
 3799      20696E74 
 3799      00
 3800              	.LASF47:
 3801 028a 4368616E 		.ascii	"Channel_1_Data\000"
 3801      6E656C5F 
 3801      315F4461 
 3801      746100
 3802              	.LASF60:
 3803 0299 70726561 		.ascii	"preamp_trig\000"
 3803      6D705F74 
 3803      72696700 
 3804              	.LASF22:
 3805 02a5 646D6163 		.ascii	"dmac_tdmem\000"
 3805      5F74646D 
 3805      656D00
 3806              	.LASF50:
 3807 02b0 63436861 		.ascii	"cCharsReceived\000"
 3807      72735265 
 3807      63656976 
 3807      656400
 3808              	.LASF23:
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 88


 3809 02bf 73746174 		.ascii	"status\000"
 3809      757300
 3810              	.LASF67:
 3811 02c6 44696769 		.ascii	"Digital_Input_Status_Last\000"
 3811      74616C5F 
 3811      496E7075 
 3811      745F5374 
 3811      61747573 
 3812              	.LASF17:
 3813 02e0 63686172 		.ascii	"char\000"
 3813      00
 3814              	.LASF34:
 3815 02e5 6D61696E 		.ascii	"main\000"
 3815      00
 3816              	.LASF10:
 3817 02ea 696E7433 		.ascii	"int32_t\000"
 3817      325F7400 
 3818              	.LASF65:
 3819 02f2 77617665 		.ascii	"wave_offset\000"
 3819      5F6F6666 
 3819      73657400 
 3820              	.LASF3:
 3821 02fe 73686F72 		.ascii	"short unsigned int\000"
 3821      7420756E 
 3821      7369676E 
 3821      65642069 
 3821      6E7400
 3822              	.LASF11:
 3823 0311 75696E74 		.ascii	"uint8\000"
 3823      3800
 3824              	.LASF52:
 3825 0317 69526561 		.ascii	"iRead\000"
 3825      6400
 3826              	.LASF68:
 3827 031d 44696769 		.ascii	"Digital_AutoUpdate\000"
 3827      74616C5F 
 3827      4175746F 
 3827      55706461 
 3827      746500
 3828              	.LASF13:
 3829 0330 75696E74 		.ascii	"uint32\000"
 3829      333200
 3830              	.LASF70:
 3831 0337 6D61696E 		.ascii	"main.c\000"
 3831      2E6300
 3832              	.LASF18:
 3833 033e 72656738 		.ascii	"reg8\000"
 3833      00
 3834              	.LASF5:
 3835 0343 6C6F6E67 		.ascii	"long unsigned int\000"
 3835      20756E73 
 3835      69676E65 
 3835      6420696E 
 3835      7400
 3836              	.LASF14:
 3837 0355 696E7433 		.ascii	"int32\000"
 3837      3200
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 89


 3838              	.LASF16:
 3839 035b 646F7562 		.ascii	"double\000"
 3839      6C6500
 3840              	.LASF38:
 3841 0362 63684861 		.ascii	"chHandle\000"
 3841      6E646C65 
 3841      00
 3842              	.LASF9:
 3843 036b 5F5F696E 		.ascii	"__int32_t\000"
 3843      7433325F 
 3843      7400
 3844              	.LASF21:
 3845 0375 73697A65 		.ascii	"sizetype\000"
 3845      74797065 
 3845      00
 3846              	.LASF55:
 3847 037e 737A436F 		.ascii	"szCommand\000"
 3847      6D6D616E 
 3847      6400
 3848              	.LASF57:
 3849 0388 70726561 		.ascii	"preamp_a\000"
 3849      6D705F61 
 3849      00
 3850              	.LASF58:
 3851 0391 70726561 		.ascii	"preamp_b\000"
 3851      6D705F62 
 3851      00
 3852              	.LASF51:
 3853 039a 737A436F 		.ascii	"szCommandsBuffer\000"
 3853      6D6D616E 
 3853      64734275 
 3853      66666572 
 3853      00
 3854              	.LASF37:
 3855 03ab 50757453 		.ascii	"PutString\000"
 3855      7472696E 
 3855      6700
 3856              	.LASF36:
 3857 03b5 52656365 		.ascii	"ReceivedBytes\000"
 3857      69766564 
 3857      42797465 
 3857      7300
 3858              	.LASF42:
 3859 03c3 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3859      52784275 
 3859      66666572 
 3859      00
 3860              	.LASF66:
 3861 03d0 4E6F6973 		.ascii	"Noise_Adjusted\000"
 3861      655F4164 
 3861      6A757374 
 3861      656400
 3862              	.LASF48:
 3863 03df 4368616E 		.ascii	"Channel_2_Data\000"
 3863      6E656C5F 
 3863      325F4461 
 3863      746100
ARM GAS  C:\Users\LANDRY~1\AppData\Local\Temp\ccRRNQIc.s 			page 90


 3864              	.LASF44:
 3865 03ee 444D415F 		.ascii	"DMA_Channel_1_TD\000"
 3865      4368616E 
 3865      6E656C5F 
 3865      315F5444 
 3865      00
 3866              	.LASF26:
 3867 03ff 62766172 		.ascii	"bvar\000"
 3867      00
 3868              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
