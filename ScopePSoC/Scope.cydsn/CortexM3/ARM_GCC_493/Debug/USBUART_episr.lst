ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"USBUART_episr.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.USBUART_EP_1_ISR,"ax",%progbits
  19              		.align	2
  20              		.global	USBUART_EP_1_ISR
  21              		.thumb
  22              		.thumb_func
  23              		.type	USBUART_EP_1_ISR, %function
  24              	USBUART_EP_1_ISR:
  25              	.LFB0:
  26              		.file 1 "Generated_Source\\PSoC5\\USBUART_episr.c"
   1:Generated_Source\PSoC5/USBUART_episr.c **** /***************************************************************************//**
   2:Generated_Source\PSoC5/USBUART_episr.c **** * \file USBUART_episr.c
   3:Generated_Source\PSoC5/USBUART_episr.c **** * \version 3.10
   4:Generated_Source\PSoC5/USBUART_episr.c **** *
   5:Generated_Source\PSoC5/USBUART_episr.c **** * \brief
   6:Generated_Source\PSoC5/USBUART_episr.c **** *  This file contains the Data endpoint Interrupt Service Routines.
   7:Generated_Source\PSoC5/USBUART_episr.c **** *
   8:Generated_Source\PSoC5/USBUART_episr.c **** ********************************************************************************
   9:Generated_Source\PSoC5/USBUART_episr.c **** * \copyright
  10:Generated_Source\PSoC5/USBUART_episr.c **** * Copyright 2008-2016, Cypress Semiconductor Corporation.  All rights reserved.
  11:Generated_Source\PSoC5/USBUART_episr.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:Generated_Source\PSoC5/USBUART_episr.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:Generated_Source\PSoC5/USBUART_episr.c **** * the software package with which this file was provided.
  14:Generated_Source\PSoC5/USBUART_episr.c **** *******************************************************************************/
  15:Generated_Source\PSoC5/USBUART_episr.c **** 
  16:Generated_Source\PSoC5/USBUART_episr.c **** #include "USBUART_pvt.h"
  17:Generated_Source\PSoC5/USBUART_episr.c **** #include "USBUART_cydmac.h"
  18:Generated_Source\PSoC5/USBUART_episr.c **** 
  19:Generated_Source\PSoC5/USBUART_episr.c **** 
  20:Generated_Source\PSoC5/USBUART_episr.c **** 
  21:Generated_Source\PSoC5/USBUART_episr.c **** /***************************************
  22:Generated_Source\PSoC5/USBUART_episr.c **** * Custom Declarations
  23:Generated_Source\PSoC5/USBUART_episr.c **** ***************************************/
  24:Generated_Source\PSoC5/USBUART_episr.c **** /* `#START CUSTOM_DECLARATIONS` Place your declaration here */
  25:Generated_Source\PSoC5/USBUART_episr.c **** 
  26:Generated_Source\PSoC5/USBUART_episr.c **** /* `#END` */
  27:Generated_Source\PSoC5/USBUART_episr.c **** 
  28:Generated_Source\PSoC5/USBUART_episr.c **** 
  29:Generated_Source\PSoC5/USBUART_episr.c **** #if (USBUART_EP1_ISR_ACTIVE)
  30:Generated_Source\PSoC5/USBUART_episr.c ****     /******************************************************************************
  31:Generated_Source\PSoC5/USBUART_episr.c ****     * Function Name: USBUART_EP_1_ISR
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 2


  32:Generated_Source\PSoC5/USBUART_episr.c ****     ***************************************************************************//**
  33:Generated_Source\PSoC5/USBUART_episr.c ****     *
  34:Generated_Source\PSoC5/USBUART_episr.c ****     *  Endpoint 1 Interrupt Service Routine
  35:Generated_Source\PSoC5/USBUART_episr.c ****     *
  36:Generated_Source\PSoC5/USBUART_episr.c ****     ******************************************************************************/
  37:Generated_Source\PSoC5/USBUART_episr.c ****     CY_ISR(USBUART_EP_1_ISR)
  38:Generated_Source\PSoC5/USBUART_episr.c ****     {
  27              		.loc 1 38 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  39:Generated_Source\PSoC5/USBUART_episr.c **** 
  40:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_EP_1_ISR_ENTRY_CALLBACK
  41:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_EP_1_ISR_EntryCallback();
  42:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_1_ISR_ENTRY_CALLBACK) */
  43:Generated_Source\PSoC5/USBUART_episr.c **** 
  44:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#START EP1_USER_CODE` Place your code here */
  45:Generated_Source\PSoC5/USBUART_episr.c **** 
  46:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#END` */
  47:Generated_Source\PSoC5/USBUART_episr.c **** 
  48:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC3 && defined(USBUART_ENABLE_MIDI_STREAMING) && \
  49:Generated_Source\PSoC5/USBUART_episr.c ****         !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
  50:Generated_Source\PSoC5/USBUART_episr.c ****         {
  51:Generated_Source\PSoC5/USBUART_episr.c ****             uint8 intEn = EA;
  52:Generated_Source\PSoC5/USBUART_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
  53:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC3 && USBUART_ISR_SERVICE_MIDI_OUT) */
  54:Generated_Source\PSoC5/USBUART_episr.c ****     
  55:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_ClearSieEpInterruptSource(USBUART_SIE_INT_EP1_INTR);
  37              		.loc 1 55 0
  38 0004 0D4B     		ldr	r3, .L3
  39 0006 0122     		movs	r2, #1
  40 0008 1A70     		strb	r2, [r3]
  56:Generated_Source\PSoC5/USBUART_episr.c ****             
  57:Generated_Source\PSoC5/USBUART_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
  58:Generated_Source\PSoC5/USBUART_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
  59:Generated_Source\PSoC5/USBUART_episr.c ****         * OUT endpoint: data is ready to be read from endpoint buffer. 
  60:Generated_Source\PSoC5/USBUART_episr.c ****         */
  61:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO)
  62:Generated_Source\PSoC5/USBUART_episr.c ****         if (0u != (USBUART_EP[USBUART_EP1].addr & USBUART_DIR_IN))
  63:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO) */
  64:Generated_Source\PSoC5/USBUART_episr.c ****         {
  65:Generated_Source\PSoC5/USBUART_episr.c ****             /* Read CR0 register to clear SIE lock. */
  66:Generated_Source\PSoC5/USBUART_episr.c ****             (void) USBUART_SIE_EP_BASE.sieEp[USBUART_EP1].epCr0;
  41              		.loc 1 66 0
  42 000a 0D4B     		ldr	r3, .L3+4
  43 000c 9B7C     		ldrb	r3, [r3, #18]
  67:Generated_Source\PSoC5/USBUART_episr.c ****             
  68:Generated_Source\PSoC5/USBUART_episr.c ****             /* Toggle all endpoint types except ISOC. */
  69:Generated_Source\PSoC5/USBUART_episr.c ****             if (USBUART_GET_EP_TYPE(USBUART_EP1) != USBUART_EP_TYPE_ISOC)
  44              		.loc 1 69 0
  45 000e 0D4B     		ldr	r3, .L3+8
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 3


  46 0010 1B7B     		ldrb	r3, [r3, #12]
  47 0012 DBB2     		uxtb	r3, r3
  48 0014 03F00303 		and	r3, r3, #3
  49 0018 012B     		cmp	r3, #1
  50 001a 08D0     		beq	.L2
  70:Generated_Source\PSoC5/USBUART_episr.c ****             {
  71:Generated_Source\PSoC5/USBUART_episr.c ****                 USBUART_EP[USBUART_EP1].epToggle ^= USBUART_EPX_CNT_DATA_TOGGLE;
  51              		.loc 1 71 0
  52 001c 094B     		ldr	r3, .L3+8
  53 001e DB7B     		ldrb	r3, [r3, #15]
  54 0020 DBB2     		uxtb	r3, r3
  55 0022 83F07F03 		eor	r3, r3, #127
  56 0026 DB43     		mvns	r3, r3
  57 0028 DAB2     		uxtb	r2, r3
  58 002a 064B     		ldr	r3, .L3+8
  59 002c DA73     		strb	r2, [r3, #15]
  60              	.L2:
  72:Generated_Source\PSoC5/USBUART_episr.c ****             }
  73:Generated_Source\PSoC5/USBUART_episr.c **** 
  74:Generated_Source\PSoC5/USBUART_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
  75:Generated_Source\PSoC5/USBUART_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
  76:Generated_Source\PSoC5/USBUART_episr.c ****             * Because last chunk of data is being copied.
  77:Generated_Source\PSoC5/USBUART_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
  78:Generated_Source\PSoC5/USBUART_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
  79:Generated_Source\PSoC5/USBUART_episr.c ****             */
  80:Generated_Source\PSoC5/USBUART_episr.c ****             USBUART_EP[USBUART_EP1].apiEpState = USBUART_EVENT_PENDING;
  61              		.loc 1 80 0
  62 002e 054B     		ldr	r3, .L3+8
  63 0030 0122     		movs	r2, #1
  64 0032 5A73     		strb	r2, [r3, #13]
  81:Generated_Source\PSoC5/USBUART_episr.c ****         }
  82:Generated_Source\PSoC5/USBUART_episr.c **** 
  83:Generated_Source\PSoC5/USBUART_episr.c ****     #if (!(CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO))
  84:Generated_Source\PSoC5/USBUART_episr.c ****         #if (defined(USBUART_ENABLE_MIDI_STREAMING) && \
  85:Generated_Source\PSoC5/USBUART_episr.c ****             !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
  86:Generated_Source\PSoC5/USBUART_episr.c ****             if (USBUART_midi_out_ep == USBUART_EP1)
  87:Generated_Source\PSoC5/USBUART_episr.c ****             {
  88:Generated_Source\PSoC5/USBUART_episr.c ****                 USBUART_MIDI_OUT_Service();
  89:Generated_Source\PSoC5/USBUART_episr.c ****             }
  90:Generated_Source\PSoC5/USBUART_episr.c ****         #endif /* (USBUART_ISR_SERVICE_MIDI_OUT) */
  91:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (!(CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO)) */
  92:Generated_Source\PSoC5/USBUART_episr.c ****     
  93:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#START EP1_END_USER_CODE` Place your code here */
  94:Generated_Source\PSoC5/USBUART_episr.c **** 
  95:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#END` */
  96:Generated_Source\PSoC5/USBUART_episr.c **** 
  97:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_EP_1_ISR_EXIT_CALLBACK
  98:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_EP_1_ISR_ExitCallback();
  99:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_1_ISR_EXIT_CALLBACK) */
 100:Generated_Source\PSoC5/USBUART_episr.c **** 
 101:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC3 && defined(USBUART_ENABLE_MIDI_STREAMING) && \
 102:Generated_Source\PSoC5/USBUART_episr.c ****         !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 103:Generated_Source\PSoC5/USBUART_episr.c ****         
 104:Generated_Source\PSoC5/USBUART_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 105:Generated_Source\PSoC5/USBUART_episr.c ****         }
 106:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC3 && USBUART_ISR_SERVICE_MIDI_OUT) */
 107:Generated_Source\PSoC5/USBUART_episr.c ****     }
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 4


  65              		.loc 1 107 0
  66 0034 BD46     		mov	sp, r7
  67              		.cfi_def_cfa_register 13
  68              		@ sp needed
  69 0036 5DF8047B 		ldr	r7, [sp], #4
  70              		.cfi_restore 7
  71              		.cfi_def_cfa_offset 0
  72 003a 7047     		bx	lr
  73              	.L4:
  74              		.align	2
  75              	.L3:
  76 003c 0B600040 		.word	1073766411
  77 0040 FC5F0040 		.word	1073766396
  78 0044 00000000 		.word	USBUART_EP
  79              		.cfi_endproc
  80              	.LFE0:
  81              		.size	USBUART_EP_1_ISR, .-USBUART_EP_1_ISR
  82              		.section	.text.USBUART_EP_2_ISR,"ax",%progbits
  83              		.align	2
  84              		.global	USBUART_EP_2_ISR
  85              		.thumb
  86              		.thumb_func
  87              		.type	USBUART_EP_2_ISR, %function
  88              	USBUART_EP_2_ISR:
  89              	.LFB1:
 108:Generated_Source\PSoC5/USBUART_episr.c **** 
 109:Generated_Source\PSoC5/USBUART_episr.c **** #endif /* (USBUART_EP1_ISR_ACTIVE) */
 110:Generated_Source\PSoC5/USBUART_episr.c **** 
 111:Generated_Source\PSoC5/USBUART_episr.c **** 
 112:Generated_Source\PSoC5/USBUART_episr.c **** #if (USBUART_EP2_ISR_ACTIVE)
 113:Generated_Source\PSoC5/USBUART_episr.c ****     /*******************************************************************************
 114:Generated_Source\PSoC5/USBUART_episr.c ****     * Function Name: USBUART_EP_2_ISR
 115:Generated_Source\PSoC5/USBUART_episr.c ****     ****************************************************************************//**
 116:Generated_Source\PSoC5/USBUART_episr.c ****     *
 117:Generated_Source\PSoC5/USBUART_episr.c ****     *  Endpoint 2 Interrupt Service Routine.
 118:Generated_Source\PSoC5/USBUART_episr.c ****     *
 119:Generated_Source\PSoC5/USBUART_episr.c ****     *******************************************************************************/
 120:Generated_Source\PSoC5/USBUART_episr.c ****     CY_ISR(USBUART_EP_2_ISR)
 121:Generated_Source\PSoC5/USBUART_episr.c ****     {
  90              		.loc 1 121 0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 1, uses_anonymous_args = 0
  94              		@ link register save eliminated.
  95 0000 80B4     		push	{r7}
  96              		.cfi_def_cfa_offset 4
  97              		.cfi_offset 7, -4
  98 0002 00AF     		add	r7, sp, #0
  99              		.cfi_def_cfa_register 7
 122:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_EP_2_ISR_ENTRY_CALLBACK
 123:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_EP_2_ISR_EntryCallback();
 124:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_2_ISR_ENTRY_CALLBACK) */
 125:Generated_Source\PSoC5/USBUART_episr.c **** 
 126:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#START EP2_USER_CODE` Place your code here */
 127:Generated_Source\PSoC5/USBUART_episr.c **** 
 128:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#END` */
 129:Generated_Source\PSoC5/USBUART_episr.c **** 
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 5


 130:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC3 && defined(USBUART_ENABLE_MIDI_STREAMING) && \
 131:Generated_Source\PSoC5/USBUART_episr.c ****         !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 132:Generated_Source\PSoC5/USBUART_episr.c ****         {
 133:Generated_Source\PSoC5/USBUART_episr.c ****             uint8 intEn = EA;
 134:Generated_Source\PSoC5/USBUART_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 135:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC3 && USBUART_ISR_SERVICE_MIDI_OUT) */
 136:Generated_Source\PSoC5/USBUART_episr.c **** 
 137:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_ClearSieEpInterruptSource(USBUART_SIE_INT_EP2_INTR);
 100              		.loc 1 137 0
 101 0004 0E4B     		ldr	r3, .L7
 102 0006 0222     		movs	r2, #2
 103 0008 1A70     		strb	r2, [r3]
 138:Generated_Source\PSoC5/USBUART_episr.c **** 
 139:Generated_Source\PSoC5/USBUART_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 140:Generated_Source\PSoC5/USBUART_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 141:Generated_Source\PSoC5/USBUART_episr.c ****         * OUT endpoint: data is ready to be read from endpoint buffer. 
 142:Generated_Source\PSoC5/USBUART_episr.c ****         */
 143:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO)
 144:Generated_Source\PSoC5/USBUART_episr.c ****         if (0u != (USBUART_EP[USBUART_EP2].addr & USBUART_DIR_IN))
 145:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO) */
 146:Generated_Source\PSoC5/USBUART_episr.c ****         {            
 147:Generated_Source\PSoC5/USBUART_episr.c ****             /* Read CR0 register to clear SIE lock. */
 148:Generated_Source\PSoC5/USBUART_episr.c ****             (void) USBUART_SIE_EP_BASE.sieEp[USBUART_EP2].epCr0;
 104              		.loc 1 148 0
 105 000a 0E4B     		ldr	r3, .L7+4
 106 000c 93F82230 		ldrb	r3, [r3, #34]
 149:Generated_Source\PSoC5/USBUART_episr.c ****             
 150:Generated_Source\PSoC5/USBUART_episr.c ****             /* Toggle all endpoint types except ISOC. */
 151:Generated_Source\PSoC5/USBUART_episr.c ****             if (USBUART_GET_EP_TYPE(USBUART_EP2) != USBUART_EP_TYPE_ISOC)
 107              		.loc 1 151 0
 108 0010 0D4B     		ldr	r3, .L7+8
 109 0012 1B7E     		ldrb	r3, [r3, #24]
 110 0014 DBB2     		uxtb	r3, r3
 111 0016 03F00303 		and	r3, r3, #3
 112 001a 012B     		cmp	r3, #1
 113 001c 08D0     		beq	.L6
 152:Generated_Source\PSoC5/USBUART_episr.c ****             {
 153:Generated_Source\PSoC5/USBUART_episr.c ****                 USBUART_EP[USBUART_EP2].epToggle ^= USBUART_EPX_CNT_DATA_TOGGLE;
 114              		.loc 1 153 0
 115 001e 0A4B     		ldr	r3, .L7+8
 116 0020 DB7E     		ldrb	r3, [r3, #27]
 117 0022 DBB2     		uxtb	r3, r3
 118 0024 83F07F03 		eor	r3, r3, #127
 119 0028 DB43     		mvns	r3, r3
 120 002a DAB2     		uxtb	r2, r3
 121 002c 064B     		ldr	r3, .L7+8
 122 002e DA76     		strb	r2, [r3, #27]
 123              	.L6:
 154:Generated_Source\PSoC5/USBUART_episr.c ****             }
 155:Generated_Source\PSoC5/USBUART_episr.c **** 
 156:Generated_Source\PSoC5/USBUART_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 157:Generated_Source\PSoC5/USBUART_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 158:Generated_Source\PSoC5/USBUART_episr.c ****             * Because last chunk of data is being copied.
 159:Generated_Source\PSoC5/USBUART_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 160:Generated_Source\PSoC5/USBUART_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 161:Generated_Source\PSoC5/USBUART_episr.c ****             */
 162:Generated_Source\PSoC5/USBUART_episr.c ****             USBUART_EP[USBUART_EP2].apiEpState = USBUART_EVENT_PENDING;
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 6


 124              		.loc 1 162 0
 125 0030 054B     		ldr	r3, .L7+8
 126 0032 0122     		movs	r2, #1
 127 0034 5A76     		strb	r2, [r3, #25]
 163:Generated_Source\PSoC5/USBUART_episr.c ****         }
 164:Generated_Source\PSoC5/USBUART_episr.c **** 
 165:Generated_Source\PSoC5/USBUART_episr.c ****     #if (!(CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO))
 166:Generated_Source\PSoC5/USBUART_episr.c ****         #if (defined(USBUART_ENABLE_MIDI_STREAMING) && \
 167:Generated_Source\PSoC5/USBUART_episr.c ****             !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 168:Generated_Source\PSoC5/USBUART_episr.c ****             if (USBUART_midi_out_ep == USBUART_EP2)
 169:Generated_Source\PSoC5/USBUART_episr.c ****             {
 170:Generated_Source\PSoC5/USBUART_episr.c ****                 USBUART_MIDI_OUT_Service();
 171:Generated_Source\PSoC5/USBUART_episr.c ****             }
 172:Generated_Source\PSoC5/USBUART_episr.c ****         #endif /* (USBUART_ISR_SERVICE_MIDI_OUT) */
 173:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (!(CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO)) */        
 174:Generated_Source\PSoC5/USBUART_episr.c ****     
 175:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#START EP2_END_USER_CODE` Place your code here */
 176:Generated_Source\PSoC5/USBUART_episr.c **** 
 177:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#END` */
 178:Generated_Source\PSoC5/USBUART_episr.c **** 
 179:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_EP_2_ISR_EXIT_CALLBACK
 180:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_EP_2_ISR_ExitCallback();
 181:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_2_ISR_EXIT_CALLBACK) */
 182:Generated_Source\PSoC5/USBUART_episr.c **** 
 183:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC3 && defined(USBUART_ENABLE_MIDI_STREAMING) && \
 184:Generated_Source\PSoC5/USBUART_episr.c ****         !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 185:Generated_Source\PSoC5/USBUART_episr.c ****         
 186:Generated_Source\PSoC5/USBUART_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 187:Generated_Source\PSoC5/USBUART_episr.c ****         }
 188:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC3 && USBUART_ISR_SERVICE_MIDI_OUT) */
 189:Generated_Source\PSoC5/USBUART_episr.c ****     }
 128              		.loc 1 189 0
 129 0036 BD46     		mov	sp, r7
 130              		.cfi_def_cfa_register 13
 131              		@ sp needed
 132 0038 5DF8047B 		ldr	r7, [sp], #4
 133              		.cfi_restore 7
 134              		.cfi_def_cfa_offset 0
 135 003c 7047     		bx	lr
 136              	.L8:
 137 003e 00BF     		.align	2
 138              	.L7:
 139 0040 0B600040 		.word	1073766411
 140 0044 FC5F0040 		.word	1073766396
 141 0048 00000000 		.word	USBUART_EP
 142              		.cfi_endproc
 143              	.LFE1:
 144              		.size	USBUART_EP_2_ISR, .-USBUART_EP_2_ISR
 145              		.section	.text.USBUART_EP_3_ISR,"ax",%progbits
 146              		.align	2
 147              		.global	USBUART_EP_3_ISR
 148              		.thumb
 149              		.thumb_func
 150              		.type	USBUART_EP_3_ISR, %function
 151              	USBUART_EP_3_ISR:
 152              	.LFB2:
 190:Generated_Source\PSoC5/USBUART_episr.c **** #endif /* (USBUART_EP2_ISR_ACTIVE) */
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 7


 191:Generated_Source\PSoC5/USBUART_episr.c **** 
 192:Generated_Source\PSoC5/USBUART_episr.c **** 
 193:Generated_Source\PSoC5/USBUART_episr.c **** #if (USBUART_EP3_ISR_ACTIVE)
 194:Generated_Source\PSoC5/USBUART_episr.c ****     /*******************************************************************************
 195:Generated_Source\PSoC5/USBUART_episr.c ****     * Function Name: USBUART_EP_3_ISR
 196:Generated_Source\PSoC5/USBUART_episr.c ****     ****************************************************************************//**
 197:Generated_Source\PSoC5/USBUART_episr.c ****     *
 198:Generated_Source\PSoC5/USBUART_episr.c ****     *  Endpoint 3 Interrupt Service Routine.
 199:Generated_Source\PSoC5/USBUART_episr.c ****     *
 200:Generated_Source\PSoC5/USBUART_episr.c ****     *******************************************************************************/
 201:Generated_Source\PSoC5/USBUART_episr.c ****     CY_ISR(USBUART_EP_3_ISR)
 202:Generated_Source\PSoC5/USBUART_episr.c ****     {
 153              		.loc 1 202 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 1, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 158 0000 80B4     		push	{r7}
 159              		.cfi_def_cfa_offset 4
 160              		.cfi_offset 7, -4
 161 0002 00AF     		add	r7, sp, #0
 162              		.cfi_def_cfa_register 7
 203:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_EP_3_ISR_ENTRY_CALLBACK
 204:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_EP_3_ISR_EntryCallback();
 205:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_3_ISR_ENTRY_CALLBACK) */
 206:Generated_Source\PSoC5/USBUART_episr.c **** 
 207:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#START EP3_USER_CODE` Place your code here */
 208:Generated_Source\PSoC5/USBUART_episr.c **** 
 209:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#END` */
 210:Generated_Source\PSoC5/USBUART_episr.c **** 
 211:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC3 && defined(USBUART_ENABLE_MIDI_STREAMING) && \
 212:Generated_Source\PSoC5/USBUART_episr.c ****         !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 213:Generated_Source\PSoC5/USBUART_episr.c ****         {
 214:Generated_Source\PSoC5/USBUART_episr.c ****             uint8 intEn = EA;
 215:Generated_Source\PSoC5/USBUART_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 216:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC3 && USBUART_ISR_SERVICE_MIDI_OUT) */
 217:Generated_Source\PSoC5/USBUART_episr.c **** 
 218:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_ClearSieEpInterruptSource(USBUART_SIE_INT_EP3_INTR);    
 163              		.loc 1 218 0
 164 0004 104B     		ldr	r3, .L11
 165 0006 0422     		movs	r2, #4
 166 0008 1A70     		strb	r2, [r3]
 219:Generated_Source\PSoC5/USBUART_episr.c **** 
 220:Generated_Source\PSoC5/USBUART_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 221:Generated_Source\PSoC5/USBUART_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 222:Generated_Source\PSoC5/USBUART_episr.c ****         * OUT endpoint: data is ready to be read from endpoint buffer. 
 223:Generated_Source\PSoC5/USBUART_episr.c ****         */
 224:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO)
 225:Generated_Source\PSoC5/USBUART_episr.c ****         if (0u != (USBUART_EP[USBUART_EP3].addr & USBUART_DIR_IN))
 226:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_MANAGEMENT_DMA_AUTO) */
 227:Generated_Source\PSoC5/USBUART_episr.c ****         {            
 228:Generated_Source\PSoC5/USBUART_episr.c ****             /* Read CR0 register to clear SIE lock. */
 229:Generated_Source\PSoC5/USBUART_episr.c ****             (void) USBUART_SIE_EP_BASE.sieEp[USBUART_EP3].epCr0;
 167              		.loc 1 229 0
 168 000a 104B     		ldr	r3, .L11+4
 169 000c 93F83230 		ldrb	r3, [r3, #50]
 230:Generated_Source\PSoC5/USBUART_episr.c **** 
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 8


 231:Generated_Source\PSoC5/USBUART_episr.c ****             /* Toggle all endpoint types except ISOC. */
 232:Generated_Source\PSoC5/USBUART_episr.c ****             if (USBUART_GET_EP_TYPE(USBUART_EP3) != USBUART_EP_TYPE_ISOC)
 170              		.loc 1 232 0
 171 0010 0F4B     		ldr	r3, .L11+8
 172 0012 93F82430 		ldrb	r3, [r3, #36]
 173 0016 DBB2     		uxtb	r3, r3
 174 0018 03F00303 		and	r3, r3, #3
 175 001c 012B     		cmp	r3, #1
 176 001e 0AD0     		beq	.L10
 233:Generated_Source\PSoC5/USBUART_episr.c ****             {
 234:Generated_Source\PSoC5/USBUART_episr.c ****                 USBUART_EP[USBUART_EP3].epToggle ^= USBUART_EPX_CNT_DATA_TOGGLE;
 177              		.loc 1 234 0
 178 0020 0B4B     		ldr	r3, .L11+8
 179 0022 93F82730 		ldrb	r3, [r3, #39]
 180 0026 DBB2     		uxtb	r3, r3
 181 0028 83F07F03 		eor	r3, r3, #127
 182 002c DB43     		mvns	r3, r3
 183 002e DAB2     		uxtb	r2, r3
 184 0030 074B     		ldr	r3, .L11+8
 185 0032 83F82720 		strb	r2, [r3, #39]
 186              	.L10:
 235:Generated_Source\PSoC5/USBUART_episr.c ****             }
 236:Generated_Source\PSoC5/USBUART_episr.c **** 
 237:Generated_Source\PSoC5/USBUART_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 238:Generated_Source\PSoC5/USBUART_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 239:Generated_Source\PSoC5/USBUART_episr.c ****             * Because last chunk of data is being copied.
 240:Generated_Source\PSoC5/USBUART_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 241:Generated_Source\PSoC5/USBUART_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 242:Generated_Source\PSoC5/USBUART_episr.c ****             */
 243:Generated_Source\PSoC5/USBUART_episr.c ****             USBUART_EP[USBUART_EP3].apiEpState = USBUART_EVENT_PENDING;
 187              		.loc 1 243 0
 188 0036 064B     		ldr	r3, .L11+8
 189 0038 0122     		movs	r2, #1
 190 003a 83F82520 		strb	r2, [r3, #37]
 244:Generated_Source\PSoC5/USBUART_episr.c ****         }
 245:Generated_Source\PSoC5/USBUART_episr.c **** 
 246:Generated_Source\PSoC5/USBUART_episr.c ****     #if (!(CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO))
 247:Generated_Source\PSoC5/USBUART_episr.c ****         #if (defined(USBUART_ENABLE_MIDI_STREAMING) && \
 248:Generated_Source\PSoC5/USBUART_episr.c ****             !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 249:Generated_Source\PSoC5/USBUART_episr.c ****             if (USBUART_midi_out_ep == USBUART_EP3)
 250:Generated_Source\PSoC5/USBUART_episr.c ****             {
 251:Generated_Source\PSoC5/USBUART_episr.c ****                 USBUART_MIDI_OUT_Service();
 252:Generated_Source\PSoC5/USBUART_episr.c ****             }
 253:Generated_Source\PSoC5/USBUART_episr.c ****         #endif /* (USBUART_ISR_SERVICE_MIDI_OUT) */
 254:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (!(CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO)) */        
 255:Generated_Source\PSoC5/USBUART_episr.c **** 
 256:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#START EP3_END_USER_CODE` Place your code here */
 257:Generated_Source\PSoC5/USBUART_episr.c **** 
 258:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#END` */
 259:Generated_Source\PSoC5/USBUART_episr.c **** 
 260:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_EP_3_ISR_EXIT_CALLBACK
 261:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_EP_3_ISR_ExitCallback();
 262:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_3_ISR_EXIT_CALLBACK) */
 263:Generated_Source\PSoC5/USBUART_episr.c **** 
 264:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC3 && defined(USBUART_ENABLE_MIDI_STREAMING) && \
 265:Generated_Source\PSoC5/USBUART_episr.c ****         !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 266:Generated_Source\PSoC5/USBUART_episr.c ****         
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 9


 267:Generated_Source\PSoC5/USBUART_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 268:Generated_Source\PSoC5/USBUART_episr.c ****         }
 269:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC3 && USBUART_ISR_SERVICE_MIDI_OUT) */
 270:Generated_Source\PSoC5/USBUART_episr.c ****     }
 191              		.loc 1 270 0
 192 003e BD46     		mov	sp, r7
 193              		.cfi_def_cfa_register 13
 194              		@ sp needed
 195 0040 5DF8047B 		ldr	r7, [sp], #4
 196              		.cfi_restore 7
 197              		.cfi_def_cfa_offset 0
 198 0044 7047     		bx	lr
 199              	.L12:
 200 0046 00BF     		.align	2
 201              	.L11:
 202 0048 0B600040 		.word	1073766411
 203 004c FC5F0040 		.word	1073766396
 204 0050 00000000 		.word	USBUART_EP
 205              		.cfi_endproc
 206              	.LFE2:
 207              		.size	USBUART_EP_3_ISR, .-USBUART_EP_3_ISR
 208              		.section	.text.USBUART_SOF_ISR,"ax",%progbits
 209              		.align	2
 210              		.global	USBUART_SOF_ISR
 211              		.thumb
 212              		.thumb_func
 213              		.type	USBUART_SOF_ISR, %function
 214              	USBUART_SOF_ISR:
 215              	.LFB3:
 271:Generated_Source\PSoC5/USBUART_episr.c **** #endif /* (USBUART_EP3_ISR_ACTIVE) */
 272:Generated_Source\PSoC5/USBUART_episr.c **** 
 273:Generated_Source\PSoC5/USBUART_episr.c **** 
 274:Generated_Source\PSoC5/USBUART_episr.c **** #if (USBUART_EP4_ISR_ACTIVE)
 275:Generated_Source\PSoC5/USBUART_episr.c ****     /*******************************************************************************
 276:Generated_Source\PSoC5/USBUART_episr.c ****     * Function Name: USBUART_EP_4_ISR
 277:Generated_Source\PSoC5/USBUART_episr.c ****     ****************************************************************************//**
 278:Generated_Source\PSoC5/USBUART_episr.c ****     *
 279:Generated_Source\PSoC5/USBUART_episr.c ****     *  Endpoint 4 Interrupt Service Routine.
 280:Generated_Source\PSoC5/USBUART_episr.c ****     *
 281:Generated_Source\PSoC5/USBUART_episr.c ****     *******************************************************************************/
 282:Generated_Source\PSoC5/USBUART_episr.c ****     CY_ISR(USBUART_EP_4_ISR)
 283:Generated_Source\PSoC5/USBUART_episr.c ****     {
 284:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_EP_4_ISR_ENTRY_CALLBACK
 285:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_EP_4_ISR_EntryCallback();
 286:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_4_ISR_ENTRY_CALLBACK) */
 287:Generated_Source\PSoC5/USBUART_episr.c **** 
 288:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#START EP4_USER_CODE` Place your code here */
 289:Generated_Source\PSoC5/USBUART_episr.c **** 
 290:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#END` */
 291:Generated_Source\PSoC5/USBUART_episr.c **** 
 292:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC3 && defined(USBUART_ENABLE_MIDI_STREAMING) && \
 293:Generated_Source\PSoC5/USBUART_episr.c ****         !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 294:Generated_Source\PSoC5/USBUART_episr.c ****         {
 295:Generated_Source\PSoC5/USBUART_episr.c ****             uint8 intEn = EA;
 296:Generated_Source\PSoC5/USBUART_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 297:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC3 && USBUART_ISR_SERVICE_MIDI_OUT) */
 298:Generated_Source\PSoC5/USBUART_episr.c **** 
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 10


 299:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_ClearSieEpInterruptSource(USBUART_SIE_INT_EP4_INTR);
 300:Generated_Source\PSoC5/USBUART_episr.c ****         
 301:Generated_Source\PSoC5/USBUART_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 302:Generated_Source\PSoC5/USBUART_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 303:Generated_Source\PSoC5/USBUART_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 304:Generated_Source\PSoC5/USBUART_episr.c ****         */
 305:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO)
 306:Generated_Source\PSoC5/USBUART_episr.c ****         if (0u != (USBUART_EP[USBUART_EP4].addr & USBUART_DIR_IN))
 307:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_MANAGEMENT_DMA_AUTO) */
 308:Generated_Source\PSoC5/USBUART_episr.c ****         {
 309:Generated_Source\PSoC5/USBUART_episr.c ****             /* Read CR0 register to clear SIE lock. */
 310:Generated_Source\PSoC5/USBUART_episr.c ****             (void) USBUART_SIE_EP_BASE.sieEp[USBUART_EP4].epCr0;
 311:Generated_Source\PSoC5/USBUART_episr.c **** 
 312:Generated_Source\PSoC5/USBUART_episr.c ****             /* Toggle all endpoint types except ISOC. */
 313:Generated_Source\PSoC5/USBUART_episr.c ****             if (USBUART_GET_EP_TYPE(USBUART_EP4) != USBUART_EP_TYPE_ISOC)
 314:Generated_Source\PSoC5/USBUART_episr.c ****             {
 315:Generated_Source\PSoC5/USBUART_episr.c ****                 USBUART_EP[USBUART_EP4].epToggle ^= USBUART_EPX_CNT_DATA_TOGGLE;
 316:Generated_Source\PSoC5/USBUART_episr.c ****             }
 317:Generated_Source\PSoC5/USBUART_episr.c **** 
 318:Generated_Source\PSoC5/USBUART_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 319:Generated_Source\PSoC5/USBUART_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 320:Generated_Source\PSoC5/USBUART_episr.c ****             * Because last chunk of data is being copied.
 321:Generated_Source\PSoC5/USBUART_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 322:Generated_Source\PSoC5/USBUART_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 323:Generated_Source\PSoC5/USBUART_episr.c ****             */
 324:Generated_Source\PSoC5/USBUART_episr.c ****             USBUART_EP[USBUART_EP4].apiEpState = USBUART_EVENT_PENDING;
 325:Generated_Source\PSoC5/USBUART_episr.c ****         }
 326:Generated_Source\PSoC5/USBUART_episr.c **** 
 327:Generated_Source\PSoC5/USBUART_episr.c ****     #if (!(CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO))
 328:Generated_Source\PSoC5/USBUART_episr.c ****         #if (defined(USBUART_ENABLE_MIDI_STREAMING) && \
 329:Generated_Source\PSoC5/USBUART_episr.c ****             !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 330:Generated_Source\PSoC5/USBUART_episr.c ****             if(USBUART_midi_out_ep == USBUART_EP4)
 331:Generated_Source\PSoC5/USBUART_episr.c ****             {
 332:Generated_Source\PSoC5/USBUART_episr.c ****                 USBUART_MIDI_OUT_Service();
 333:Generated_Source\PSoC5/USBUART_episr.c ****             }
 334:Generated_Source\PSoC5/USBUART_episr.c ****         #endif /* (USBUART_ISR_SERVICE_MIDI_OUT) */
 335:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (!(CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO)) */        
 336:Generated_Source\PSoC5/USBUART_episr.c **** 
 337:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#START EP4_END_USER_CODE` Place your code here */
 338:Generated_Source\PSoC5/USBUART_episr.c **** 
 339:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#END` */
 340:Generated_Source\PSoC5/USBUART_episr.c **** 
 341:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_EP_4_ISR_EXIT_CALLBACK
 342:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_EP_4_ISR_ExitCallback();
 343:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_4_ISR_EXIT_CALLBACK) */
 344:Generated_Source\PSoC5/USBUART_episr.c **** 
 345:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC3 && defined(USBUART_ENABLE_MIDI_STREAMING) && \
 346:Generated_Source\PSoC5/USBUART_episr.c ****         !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 347:Generated_Source\PSoC5/USBUART_episr.c ****         
 348:Generated_Source\PSoC5/USBUART_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 349:Generated_Source\PSoC5/USBUART_episr.c ****         }
 350:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC3 && USBUART_ISR_SERVICE_MIDI_OUT) */
 351:Generated_Source\PSoC5/USBUART_episr.c ****     }
 352:Generated_Source\PSoC5/USBUART_episr.c **** #endif /* (USBUART_EP4_ISR_ACTIVE) */
 353:Generated_Source\PSoC5/USBUART_episr.c **** 
 354:Generated_Source\PSoC5/USBUART_episr.c **** 
 355:Generated_Source\PSoC5/USBUART_episr.c **** #if (USBUART_EP5_ISR_ACTIVE)
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 11


 356:Generated_Source\PSoC5/USBUART_episr.c ****     /*******************************************************************************
 357:Generated_Source\PSoC5/USBUART_episr.c ****     * Function Name: USBUART_EP_5_ISR
 358:Generated_Source\PSoC5/USBUART_episr.c ****     ****************************************************************************//**
 359:Generated_Source\PSoC5/USBUART_episr.c ****     *
 360:Generated_Source\PSoC5/USBUART_episr.c ****     *  Endpoint 5 Interrupt Service Routine
 361:Generated_Source\PSoC5/USBUART_episr.c ****     *
 362:Generated_Source\PSoC5/USBUART_episr.c ****     *
 363:Generated_Source\PSoC5/USBUART_episr.c ****     *******************************************************************************/
 364:Generated_Source\PSoC5/USBUART_episr.c ****     CY_ISR(USBUART_EP_5_ISR)
 365:Generated_Source\PSoC5/USBUART_episr.c ****     {
 366:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_EP_5_ISR_ENTRY_CALLBACK
 367:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_EP_5_ISR_EntryCallback();
 368:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_5_ISR_ENTRY_CALLBACK) */
 369:Generated_Source\PSoC5/USBUART_episr.c **** 
 370:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#START EP5_USER_CODE` Place your code here */
 371:Generated_Source\PSoC5/USBUART_episr.c **** 
 372:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#END` */
 373:Generated_Source\PSoC5/USBUART_episr.c **** 
 374:Generated_Source\PSoC5/USBUART_episr.c ****     #if (defined(USBUART_ENABLE_MIDI_STREAMING) && !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && \
 375:Generated_Source\PSoC5/USBUART_episr.c ****                  USBUART_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
 376:Generated_Source\PSoC5/USBUART_episr.c ****         {
 377:Generated_Source\PSoC5/USBUART_episr.c ****             uint8 intEn = EA;
 378:Generated_Source\PSoC5/USBUART_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 379:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC3 && USBUART_ISR_SERVICE_MIDI_OUT) */
 380:Generated_Source\PSoC5/USBUART_episr.c **** 
 381:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_ClearSieEpInterruptSource(USBUART_SIE_INT_EP5_INTR);
 382:Generated_Source\PSoC5/USBUART_episr.c ****     
 383:Generated_Source\PSoC5/USBUART_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 384:Generated_Source\PSoC5/USBUART_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 385:Generated_Source\PSoC5/USBUART_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 386:Generated_Source\PSoC5/USBUART_episr.c ****         */
 387:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO)
 388:Generated_Source\PSoC5/USBUART_episr.c ****         if (0u != (USBUART_EP[USBUART_EP5].addr & USBUART_DIR_IN))
 389:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_MANAGEMENT_DMA_AUTO) */
 390:Generated_Source\PSoC5/USBUART_episr.c ****         {            
 391:Generated_Source\PSoC5/USBUART_episr.c ****             /* Read CR0 register to clear SIE lock. */
 392:Generated_Source\PSoC5/USBUART_episr.c ****             (void) USBUART_SIE_EP_BASE.sieEp[USBUART_EP5].epCr0;
 393:Generated_Source\PSoC5/USBUART_episr.c **** 
 394:Generated_Source\PSoC5/USBUART_episr.c ****             /* Toggle all endpoint types except ISOC. */
 395:Generated_Source\PSoC5/USBUART_episr.c ****             if (USBUART_GET_EP_TYPE(USBUART_EP5) != USBUART_EP_TYPE_ISOC)
 396:Generated_Source\PSoC5/USBUART_episr.c ****             {
 397:Generated_Source\PSoC5/USBUART_episr.c ****                 USBUART_EP[USBUART_EP5].epToggle ^= USBUART_EPX_CNT_DATA_TOGGLE;
 398:Generated_Source\PSoC5/USBUART_episr.c ****             }
 399:Generated_Source\PSoC5/USBUART_episr.c **** 
 400:Generated_Source\PSoC5/USBUART_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 401:Generated_Source\PSoC5/USBUART_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 402:Generated_Source\PSoC5/USBUART_episr.c ****             * Because last chunk of data is being copied.
 403:Generated_Source\PSoC5/USBUART_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 404:Generated_Source\PSoC5/USBUART_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 405:Generated_Source\PSoC5/USBUART_episr.c ****             */
 406:Generated_Source\PSoC5/USBUART_episr.c ****             USBUART_EP[USBUART_EP5].apiEpState = USBUART_EVENT_PENDING;
 407:Generated_Source\PSoC5/USBUART_episr.c ****         }
 408:Generated_Source\PSoC5/USBUART_episr.c **** 
 409:Generated_Source\PSoC5/USBUART_episr.c ****     #if (!(CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO))        
 410:Generated_Source\PSoC5/USBUART_episr.c ****         #if (defined(USBUART_ENABLE_MIDI_STREAMING) && \
 411:Generated_Source\PSoC5/USBUART_episr.c ****             !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 412:Generated_Source\PSoC5/USBUART_episr.c ****             if (USBUART_midi_out_ep == USBUART_EP5)
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 12


 413:Generated_Source\PSoC5/USBUART_episr.c ****             {
 414:Generated_Source\PSoC5/USBUART_episr.c ****                 USBUART_MIDI_OUT_Service();
 415:Generated_Source\PSoC5/USBUART_episr.c ****             }
 416:Generated_Source\PSoC5/USBUART_episr.c ****         #endif /* (USBUART_ISR_SERVICE_MIDI_OUT) */
 417:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (!(CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO)) */
 418:Generated_Source\PSoC5/USBUART_episr.c **** 
 419:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#START EP5_END_USER_CODE` Place your code here */
 420:Generated_Source\PSoC5/USBUART_episr.c **** 
 421:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#END` */
 422:Generated_Source\PSoC5/USBUART_episr.c **** 
 423:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_EP_5_ISR_EXIT_CALLBACK
 424:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_EP_5_ISR_ExitCallback();
 425:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_5_ISR_EXIT_CALLBACK) */
 426:Generated_Source\PSoC5/USBUART_episr.c **** 
 427:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC3 && defined(USBUART_ENABLE_MIDI_STREAMING) && \
 428:Generated_Source\PSoC5/USBUART_episr.c ****         !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 429:Generated_Source\PSoC5/USBUART_episr.c ****         
 430:Generated_Source\PSoC5/USBUART_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 431:Generated_Source\PSoC5/USBUART_episr.c ****         }
 432:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC3 && USBUART_ISR_SERVICE_MIDI_OUT) */
 433:Generated_Source\PSoC5/USBUART_episr.c ****     }
 434:Generated_Source\PSoC5/USBUART_episr.c **** #endif /* (USBUART_EP5_ISR_ACTIVE) */
 435:Generated_Source\PSoC5/USBUART_episr.c **** 
 436:Generated_Source\PSoC5/USBUART_episr.c **** 
 437:Generated_Source\PSoC5/USBUART_episr.c **** #if (USBUART_EP6_ISR_ACTIVE)
 438:Generated_Source\PSoC5/USBUART_episr.c ****     /*******************************************************************************
 439:Generated_Source\PSoC5/USBUART_episr.c ****     * Function Name: USBUART_EP_6_ISR
 440:Generated_Source\PSoC5/USBUART_episr.c ****     ****************************************************************************//**
 441:Generated_Source\PSoC5/USBUART_episr.c ****     *
 442:Generated_Source\PSoC5/USBUART_episr.c ****     *  Endpoint 6 Interrupt Service Routine.
 443:Generated_Source\PSoC5/USBUART_episr.c ****     *
 444:Generated_Source\PSoC5/USBUART_episr.c ****     *
 445:Generated_Source\PSoC5/USBUART_episr.c ****     *******************************************************************************/
 446:Generated_Source\PSoC5/USBUART_episr.c ****     CY_ISR(USBUART_EP_6_ISR)
 447:Generated_Source\PSoC5/USBUART_episr.c ****     {
 448:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_EP_6_ISR_ENTRY_CALLBACK
 449:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_EP_6_ISR_EntryCallback();
 450:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_6_ISR_ENTRY_CALLBACK) */
 451:Generated_Source\PSoC5/USBUART_episr.c **** 
 452:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#START EP6_USER_CODE` Place your code here */
 453:Generated_Source\PSoC5/USBUART_episr.c **** 
 454:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#END` */
 455:Generated_Source\PSoC5/USBUART_episr.c **** 
 456:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC3 && defined(USBUART_ENABLE_MIDI_STREAMING) && \
 457:Generated_Source\PSoC5/USBUART_episr.c ****         !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 458:Generated_Source\PSoC5/USBUART_episr.c ****         {
 459:Generated_Source\PSoC5/USBUART_episr.c ****             uint8 intEn = EA;
 460:Generated_Source\PSoC5/USBUART_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 461:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC3 && USBUART_ISR_SERVICE_MIDI_OUT) */
 462:Generated_Source\PSoC5/USBUART_episr.c **** 
 463:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_ClearSieEpInterruptSource(USBUART_SIE_INT_EP6_INTR);
 464:Generated_Source\PSoC5/USBUART_episr.c ****         
 465:Generated_Source\PSoC5/USBUART_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 466:Generated_Source\PSoC5/USBUART_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 467:Generated_Source\PSoC5/USBUART_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 468:Generated_Source\PSoC5/USBUART_episr.c ****         */
 469:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO)
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 13


 470:Generated_Source\PSoC5/USBUART_episr.c ****         if (0u != (USBUART_EP[USBUART_EP6].addr & USBUART_DIR_IN))
 471:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_MANAGEMENT_DMA_AUTO) */
 472:Generated_Source\PSoC5/USBUART_episr.c ****         {
 473:Generated_Source\PSoC5/USBUART_episr.c ****             /* Read CR0 register to clear SIE lock. */
 474:Generated_Source\PSoC5/USBUART_episr.c ****             (void) USBUART_SIE_EP_BASE.sieEp[USBUART_EP6].epCr0;
 475:Generated_Source\PSoC5/USBUART_episr.c **** 
 476:Generated_Source\PSoC5/USBUART_episr.c ****             /* Toggle all endpoint types except ISOC. */
 477:Generated_Source\PSoC5/USBUART_episr.c ****             if (USBUART_GET_EP_TYPE(USBUART_EP6) != USBUART_EP_TYPE_ISOC)
 478:Generated_Source\PSoC5/USBUART_episr.c ****             {
 479:Generated_Source\PSoC5/USBUART_episr.c ****                 USBUART_EP[USBUART_EP6].epToggle ^= USBUART_EPX_CNT_DATA_TOGGLE;
 480:Generated_Source\PSoC5/USBUART_episr.c ****             }
 481:Generated_Source\PSoC5/USBUART_episr.c ****             
 482:Generated_Source\PSoC5/USBUART_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 483:Generated_Source\PSoC5/USBUART_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 484:Generated_Source\PSoC5/USBUART_episr.c ****             * Because last chunk of data is being copied.
 485:Generated_Source\PSoC5/USBUART_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 486:Generated_Source\PSoC5/USBUART_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 487:Generated_Source\PSoC5/USBUART_episr.c ****             */
 488:Generated_Source\PSoC5/USBUART_episr.c ****             USBUART_EP[USBUART_EP6].apiEpState = USBUART_EVENT_PENDING;
 489:Generated_Source\PSoC5/USBUART_episr.c ****         }
 490:Generated_Source\PSoC5/USBUART_episr.c **** 
 491:Generated_Source\PSoC5/USBUART_episr.c ****     #if (!(CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO))
 492:Generated_Source\PSoC5/USBUART_episr.c ****         #if (defined(USBUART_ENABLE_MIDI_STREAMING) && \
 493:Generated_Source\PSoC5/USBUART_episr.c ****             !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 494:Generated_Source\PSoC5/USBUART_episr.c ****             if (USBUART_midi_out_ep == USBUART_EP6)
 495:Generated_Source\PSoC5/USBUART_episr.c ****             {
 496:Generated_Source\PSoC5/USBUART_episr.c ****                 USBUART_MIDI_OUT_Service();
 497:Generated_Source\PSoC5/USBUART_episr.c ****             }
 498:Generated_Source\PSoC5/USBUART_episr.c ****         #endif /* (USBUART_ISR_SERVICE_MIDI_OUT) */
 499:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (!(CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO)) */
 500:Generated_Source\PSoC5/USBUART_episr.c **** 
 501:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#START EP6_END_USER_CODE` Place your code here */
 502:Generated_Source\PSoC5/USBUART_episr.c **** 
 503:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#END` */
 504:Generated_Source\PSoC5/USBUART_episr.c **** 
 505:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_EP_6_ISR_EXIT_CALLBACK
 506:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_EP_6_ISR_ExitCallback();
 507:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_6_ISR_EXIT_CALLBACK) */
 508:Generated_Source\PSoC5/USBUART_episr.c **** 
 509:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC3 && defined(USBUART_ENABLE_MIDI_STREAMING) && \
 510:Generated_Source\PSoC5/USBUART_episr.c ****         !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 511:Generated_Source\PSoC5/USBUART_episr.c ****         
 512:Generated_Source\PSoC5/USBUART_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 513:Generated_Source\PSoC5/USBUART_episr.c ****         }
 514:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC3 && USBUART_ISR_SERVICE_MIDI_OUT) */
 515:Generated_Source\PSoC5/USBUART_episr.c ****     }
 516:Generated_Source\PSoC5/USBUART_episr.c **** #endif /* (USBUART_EP6_ISR_ACTIVE) */
 517:Generated_Source\PSoC5/USBUART_episr.c **** 
 518:Generated_Source\PSoC5/USBUART_episr.c **** 
 519:Generated_Source\PSoC5/USBUART_episr.c **** #if (USBUART_EP7_ISR_ACTIVE)
 520:Generated_Source\PSoC5/USBUART_episr.c ****     /*******************************************************************************
 521:Generated_Source\PSoC5/USBUART_episr.c ****     * Function Name: USBUART_EP_7_ISR
 522:Generated_Source\PSoC5/USBUART_episr.c ****     ****************************************************************************//**
 523:Generated_Source\PSoC5/USBUART_episr.c ****     *
 524:Generated_Source\PSoC5/USBUART_episr.c ****     *  Endpoint 7 Interrupt Service Routine.
 525:Generated_Source\PSoC5/USBUART_episr.c ****     *
 526:Generated_Source\PSoC5/USBUART_episr.c ****     *
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 14


 527:Generated_Source\PSoC5/USBUART_episr.c ****     *******************************************************************************/
 528:Generated_Source\PSoC5/USBUART_episr.c ****     CY_ISR(USBUART_EP_7_ISR)
 529:Generated_Source\PSoC5/USBUART_episr.c ****     {
 530:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_EP_7_ISR_ENTRY_CALLBACK
 531:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_EP_7_ISR_EntryCallback();
 532:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_7_ISR_ENTRY_CALLBACK) */
 533:Generated_Source\PSoC5/USBUART_episr.c **** 
 534:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#START EP7_USER_CODE` Place your code here */
 535:Generated_Source\PSoC5/USBUART_episr.c **** 
 536:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#END` */
 537:Generated_Source\PSoC5/USBUART_episr.c **** 
 538:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC3 && defined(USBUART_ENABLE_MIDI_STREAMING) && \
 539:Generated_Source\PSoC5/USBUART_episr.c ****         !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 540:Generated_Source\PSoC5/USBUART_episr.c ****         {
 541:Generated_Source\PSoC5/USBUART_episr.c ****             uint8 intEn = EA;
 542:Generated_Source\PSoC5/USBUART_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 543:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC3 && USBUART_ISR_SERVICE_MIDI_OUT) */
 544:Generated_Source\PSoC5/USBUART_episr.c ****     
 545:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_ClearSieEpInterruptSource(USBUART_SIE_INT_EP7_INTR);
 546:Generated_Source\PSoC5/USBUART_episr.c ****         
 547:Generated_Source\PSoC5/USBUART_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 548:Generated_Source\PSoC5/USBUART_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 549:Generated_Source\PSoC5/USBUART_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 550:Generated_Source\PSoC5/USBUART_episr.c ****         */
 551:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO)
 552:Generated_Source\PSoC5/USBUART_episr.c ****         if (0u != (USBUART_EP[USBUART_EP7].addr & USBUART_DIR_IN))
 553:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_MANAGEMENT_DMA_AUTO) */
 554:Generated_Source\PSoC5/USBUART_episr.c ****         {           
 555:Generated_Source\PSoC5/USBUART_episr.c ****             /* Read CR0 register to clear SIE lock. */
 556:Generated_Source\PSoC5/USBUART_episr.c ****             (void) USBUART_SIE_EP_BASE.sieEp[USBUART_EP7].epCr0;
 557:Generated_Source\PSoC5/USBUART_episr.c **** 
 558:Generated_Source\PSoC5/USBUART_episr.c ****             /* Toggle all endpoint types except ISOC. */
 559:Generated_Source\PSoC5/USBUART_episr.c ****             if (USBUART_GET_EP_TYPE(USBUART_EP7) != USBUART_EP_TYPE_ISOC)
 560:Generated_Source\PSoC5/USBUART_episr.c ****             {
 561:Generated_Source\PSoC5/USBUART_episr.c ****                 USBUART_EP[USBUART_EP7].epToggle ^= USBUART_EPX_CNT_DATA_TOGGLE;
 562:Generated_Source\PSoC5/USBUART_episr.c ****             }
 563:Generated_Source\PSoC5/USBUART_episr.c ****             
 564:Generated_Source\PSoC5/USBUART_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 565:Generated_Source\PSoC5/USBUART_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 566:Generated_Source\PSoC5/USBUART_episr.c ****             * Because last chunk of data is being copied.
 567:Generated_Source\PSoC5/USBUART_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 568:Generated_Source\PSoC5/USBUART_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 569:Generated_Source\PSoC5/USBUART_episr.c ****             */
 570:Generated_Source\PSoC5/USBUART_episr.c ****             USBUART_EP[USBUART_EP7].apiEpState = USBUART_EVENT_PENDING;
 571:Generated_Source\PSoC5/USBUART_episr.c ****         }
 572:Generated_Source\PSoC5/USBUART_episr.c **** 
 573:Generated_Source\PSoC5/USBUART_episr.c **** 
 574:Generated_Source\PSoC5/USBUART_episr.c ****     #if (!(CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO))
 575:Generated_Source\PSoC5/USBUART_episr.c ****         #if (defined(USBUART_ENABLE_MIDI_STREAMING) && \
 576:Generated_Source\PSoC5/USBUART_episr.c ****             !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 577:Generated_Source\PSoC5/USBUART_episr.c ****             if(USBUART_midi_out_ep == USBUART_EP7)
 578:Generated_Source\PSoC5/USBUART_episr.c ****             {
 579:Generated_Source\PSoC5/USBUART_episr.c ****                 USBUART_MIDI_OUT_Service();
 580:Generated_Source\PSoC5/USBUART_episr.c ****             }
 581:Generated_Source\PSoC5/USBUART_episr.c ****         #endif /* (USBUART_ISR_SERVICE_MIDI_OUT) */
 582:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (!(CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO)) */
 583:Generated_Source\PSoC5/USBUART_episr.c **** 
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 15


 584:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#START EP7_END_USER_CODE` Place your code here */
 585:Generated_Source\PSoC5/USBUART_episr.c **** 
 586:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#END` */
 587:Generated_Source\PSoC5/USBUART_episr.c **** 
 588:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_EP_7_ISR_EXIT_CALLBACK
 589:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_EP_7_ISR_ExitCallback();
 590:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_7_ISR_EXIT_CALLBACK) */
 591:Generated_Source\PSoC5/USBUART_episr.c **** 
 592:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC3 && defined(USBUART_ENABLE_MIDI_STREAMING) && \
 593:Generated_Source\PSoC5/USBUART_episr.c ****         !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 594:Generated_Source\PSoC5/USBUART_episr.c ****         
 595:Generated_Source\PSoC5/USBUART_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 596:Generated_Source\PSoC5/USBUART_episr.c ****         }
 597:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC3 && USBUART_ISR_SERVICE_MIDI_OUT) */
 598:Generated_Source\PSoC5/USBUART_episr.c ****     }
 599:Generated_Source\PSoC5/USBUART_episr.c **** #endif /* (USBUART_EP7_ISR_ACTIVE) */
 600:Generated_Source\PSoC5/USBUART_episr.c **** 
 601:Generated_Source\PSoC5/USBUART_episr.c **** 
 602:Generated_Source\PSoC5/USBUART_episr.c **** #if (USBUART_EP8_ISR_ACTIVE)
 603:Generated_Source\PSoC5/USBUART_episr.c ****     /*******************************************************************************
 604:Generated_Source\PSoC5/USBUART_episr.c ****     * Function Name: USBUART_EP_8_ISR
 605:Generated_Source\PSoC5/USBUART_episr.c ****     ****************************************************************************//**
 606:Generated_Source\PSoC5/USBUART_episr.c ****     *
 607:Generated_Source\PSoC5/USBUART_episr.c ****     *  Endpoint 8 Interrupt Service Routine
 608:Generated_Source\PSoC5/USBUART_episr.c ****     *
 609:Generated_Source\PSoC5/USBUART_episr.c ****     *
 610:Generated_Source\PSoC5/USBUART_episr.c ****     *******************************************************************************/
 611:Generated_Source\PSoC5/USBUART_episr.c ****     CY_ISR(USBUART_EP_8_ISR)
 612:Generated_Source\PSoC5/USBUART_episr.c ****     {
 613:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_EP_8_ISR_ENTRY_CALLBACK
 614:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_EP_8_ISR_EntryCallback();
 615:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_8_ISR_ENTRY_CALLBACK) */
 616:Generated_Source\PSoC5/USBUART_episr.c **** 
 617:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#START EP8_USER_CODE` Place your code here */
 618:Generated_Source\PSoC5/USBUART_episr.c **** 
 619:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#END` */
 620:Generated_Source\PSoC5/USBUART_episr.c **** 
 621:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC3 && defined(USBUART_ENABLE_MIDI_STREAMING) && \
 622:Generated_Source\PSoC5/USBUART_episr.c ****         !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 623:Generated_Source\PSoC5/USBUART_episr.c ****         {
 624:Generated_Source\PSoC5/USBUART_episr.c ****             uint8 intEn = EA;
 625:Generated_Source\PSoC5/USBUART_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 626:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC3 && USBUART_ISR_SERVICE_MIDI_OUT) */
 627:Generated_Source\PSoC5/USBUART_episr.c **** 
 628:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_ClearSieEpInterruptSource(USBUART_SIE_INT_EP8_INTR);
 629:Generated_Source\PSoC5/USBUART_episr.c ****         
 630:Generated_Source\PSoC5/USBUART_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 631:Generated_Source\PSoC5/USBUART_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 632:Generated_Source\PSoC5/USBUART_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 633:Generated_Source\PSoC5/USBUART_episr.c ****         */
 634:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO)
 635:Generated_Source\PSoC5/USBUART_episr.c ****         if (0u != (USBUART_EP[USBUART_EP8].addr & USBUART_DIR_IN))
 636:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_MANAGEMENT_DMA_AUTO) */
 637:Generated_Source\PSoC5/USBUART_episr.c ****         {
 638:Generated_Source\PSoC5/USBUART_episr.c ****             /* Read CR0 register to clear SIE lock. */
 639:Generated_Source\PSoC5/USBUART_episr.c ****             (void) USBUART_SIE_EP_BASE.sieEp[USBUART_EP8].epCr0;
 640:Generated_Source\PSoC5/USBUART_episr.c **** 
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 16


 641:Generated_Source\PSoC5/USBUART_episr.c ****             /* Toggle all endpoint types except ISOC. */
 642:Generated_Source\PSoC5/USBUART_episr.c ****             if (USBUART_GET_EP_TYPE(USBUART_EP8) != USBUART_EP_TYPE_ISOC)
 643:Generated_Source\PSoC5/USBUART_episr.c ****             {
 644:Generated_Source\PSoC5/USBUART_episr.c ****                 USBUART_EP[USBUART_EP8].epToggle ^= USBUART_EPX_CNT_DATA_TOGGLE;
 645:Generated_Source\PSoC5/USBUART_episr.c ****             }
 646:Generated_Source\PSoC5/USBUART_episr.c **** 
 647:Generated_Source\PSoC5/USBUART_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 648:Generated_Source\PSoC5/USBUART_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 649:Generated_Source\PSoC5/USBUART_episr.c ****             * Because last chunk of data is being copied.
 650:Generated_Source\PSoC5/USBUART_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 651:Generated_Source\PSoC5/USBUART_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 652:Generated_Source\PSoC5/USBUART_episr.c ****             */
 653:Generated_Source\PSoC5/USBUART_episr.c ****             USBUART_EP[USBUART_EP8].apiEpState = USBUART_EVENT_PENDING;
 654:Generated_Source\PSoC5/USBUART_episr.c ****         }
 655:Generated_Source\PSoC5/USBUART_episr.c **** 
 656:Generated_Source\PSoC5/USBUART_episr.c ****     #if (!(CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO))
 657:Generated_Source\PSoC5/USBUART_episr.c ****         #if (defined(USBUART_ENABLE_MIDI_STREAMING) && \
 658:Generated_Source\PSoC5/USBUART_episr.c ****             !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 659:Generated_Source\PSoC5/USBUART_episr.c ****             if (USBUART_midi_out_ep == USBUART_EP8)
 660:Generated_Source\PSoC5/USBUART_episr.c ****             {
 661:Generated_Source\PSoC5/USBUART_episr.c ****                 USBUART_MIDI_OUT_Service();
 662:Generated_Source\PSoC5/USBUART_episr.c ****             }
 663:Generated_Source\PSoC5/USBUART_episr.c ****         #endif /* (USBUART_ISR_SERVICE_MIDI_OUT) */
 664:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (!(CY_PSOC4 && USBUART_EP_MANAGEMENT_DMA_AUTO)) */
 665:Generated_Source\PSoC5/USBUART_episr.c **** 
 666:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#START EP8_END_USER_CODE` Place your code here */
 667:Generated_Source\PSoC5/USBUART_episr.c **** 
 668:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#END` */
 669:Generated_Source\PSoC5/USBUART_episr.c **** 
 670:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_EP_8_ISR_EXIT_CALLBACK
 671:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_EP_8_ISR_ExitCallback();
 672:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_EP_8_ISR_EXIT_CALLBACK) */
 673:Generated_Source\PSoC5/USBUART_episr.c **** 
 674:Generated_Source\PSoC5/USBUART_episr.c ****     #if (CY_PSOC3 && defined(USBUART_ENABLE_MIDI_STREAMING) && \
 675:Generated_Source\PSoC5/USBUART_episr.c ****         !defined(USBUART_MAIN_SERVICE_MIDI_OUT) && USBUART_ISR_SERVICE_MIDI_OUT)
 676:Generated_Source\PSoC5/USBUART_episr.c ****         
 677:Generated_Source\PSoC5/USBUART_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 678:Generated_Source\PSoC5/USBUART_episr.c ****         }
 679:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (CY_PSOC3 && USBUART_ISR_SERVICE_MIDI_OUT) */
 680:Generated_Source\PSoC5/USBUART_episr.c ****     }
 681:Generated_Source\PSoC5/USBUART_episr.c **** #endif /* (USBUART_EP8_ISR_ACTIVE) */
 682:Generated_Source\PSoC5/USBUART_episr.c **** 
 683:Generated_Source\PSoC5/USBUART_episr.c **** 
 684:Generated_Source\PSoC5/USBUART_episr.c **** #if (USBUART_SOF_ISR_ACTIVE)
 685:Generated_Source\PSoC5/USBUART_episr.c ****     /*******************************************************************************
 686:Generated_Source\PSoC5/USBUART_episr.c ****     * Function Name: USBUART_SOF_ISR
 687:Generated_Source\PSoC5/USBUART_episr.c ****     ****************************************************************************//**
 688:Generated_Source\PSoC5/USBUART_episr.c ****     *
 689:Generated_Source\PSoC5/USBUART_episr.c ****     *  Start of Frame Interrupt Service Routine.
 690:Generated_Source\PSoC5/USBUART_episr.c ****     *
 691:Generated_Source\PSoC5/USBUART_episr.c ****     *
 692:Generated_Source\PSoC5/USBUART_episr.c ****     *******************************************************************************/
 693:Generated_Source\PSoC5/USBUART_episr.c ****     CY_ISR(USBUART_SOF_ISR)
 694:Generated_Source\PSoC5/USBUART_episr.c ****     {
 216              		.loc 1 694 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 17


 219              		@ frame_needed = 1, uses_anonymous_args = 0
 220              		@ link register save eliminated.
 221 0000 80B4     		push	{r7}
 222              		.cfi_def_cfa_offset 4
 223              		.cfi_offset 7, -4
 224 0002 00AF     		add	r7, sp, #0
 225              		.cfi_def_cfa_register 7
 695:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_SOF_ISR_ENTRY_CALLBACK
 696:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_SOF_ISR_EntryCallback();
 697:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_SOF_ISR_ENTRY_CALLBACK) */
 698:Generated_Source\PSoC5/USBUART_episr.c **** 
 699:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#START SOF_USER_CODE` Place your code here */
 700:Generated_Source\PSoC5/USBUART_episr.c **** 
 701:Generated_Source\PSoC5/USBUART_episr.c ****         /* `#END` */
 702:Generated_Source\PSoC5/USBUART_episr.c **** 
 703:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_ClearSieInterruptSource(USBUART_INTR_SIE_SOF_INTR);
 704:Generated_Source\PSoC5/USBUART_episr.c **** 
 705:Generated_Source\PSoC5/USBUART_episr.c ****     #ifdef USBUART_SOF_ISR_EXIT_CALLBACK
 706:Generated_Source\PSoC5/USBUART_episr.c ****         USBUART_SOF_ISR_ExitCallback();
 707:Generated_Source\PSoC5/USBUART_episr.c ****     #endif /* (USBUART_SOF_ISR_EXIT_CALLBACK) */
 708:Generated_Source\PSoC5/USBUART_episr.c ****     }
 226              		.loc 1 708 0
 227 0004 BD46     		mov	sp, r7
 228              		.cfi_def_cfa_register 13
 229              		@ sp needed
 230 0006 5DF8047B 		ldr	r7, [sp], #4
 231              		.cfi_restore 7
 232              		.cfi_def_cfa_offset 0
 233 000a 7047     		bx	lr
 234              		.cfi_endproc
 235              	.LFE3:
 236              		.size	USBUART_SOF_ISR, .-USBUART_SOF_ISR
 237              		.section	.text.USBUART_BUS_RESET_ISR,"ax",%progbits
 238              		.align	2
 239              		.global	USBUART_BUS_RESET_ISR
 240              		.thumb
 241              		.thumb_func
 242              		.type	USBUART_BUS_RESET_ISR, %function
 243              	USBUART_BUS_RESET_ISR:
 244              	.LFB4:
 709:Generated_Source\PSoC5/USBUART_episr.c **** #endif /* (USBUART_SOF_ISR_ACTIVE) */
 710:Generated_Source\PSoC5/USBUART_episr.c **** 
 711:Generated_Source\PSoC5/USBUART_episr.c **** 
 712:Generated_Source\PSoC5/USBUART_episr.c **** #if (USBUART_BUS_RESET_ISR_ACTIVE)
 713:Generated_Source\PSoC5/USBUART_episr.c **** /*******************************************************************************
 714:Generated_Source\PSoC5/USBUART_episr.c **** * Function Name: USBUART_BUS_RESET_ISR
 715:Generated_Source\PSoC5/USBUART_episr.c **** ****************************************************************************//**
 716:Generated_Source\PSoC5/USBUART_episr.c **** *
 717:Generated_Source\PSoC5/USBUART_episr.c **** *  USB Bus Reset Interrupt Service Routine.  Calls _Start with the same
 718:Generated_Source\PSoC5/USBUART_episr.c **** *  parameters as the last USER call to _Start
 719:Generated_Source\PSoC5/USBUART_episr.c **** *
 720:Generated_Source\PSoC5/USBUART_episr.c **** *
 721:Generated_Source\PSoC5/USBUART_episr.c **** *******************************************************************************/
 722:Generated_Source\PSoC5/USBUART_episr.c **** CY_ISR(USBUART_BUS_RESET_ISR)
 723:Generated_Source\PSoC5/USBUART_episr.c **** {
 245              		.loc 1 723 0
 246              		.cfi_startproc
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 18


 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 1, uses_anonymous_args = 0
 249 0000 80B5     		push	{r7, lr}
 250              		.cfi_def_cfa_offset 8
 251              		.cfi_offset 7, -8
 252              		.cfi_offset 14, -4
 253 0002 00AF     		add	r7, sp, #0
 254              		.cfi_def_cfa_register 7
 724:Generated_Source\PSoC5/USBUART_episr.c **** #ifdef USBUART_BUS_RESET_ISR_ENTRY_CALLBACK
 725:Generated_Source\PSoC5/USBUART_episr.c ****     USBUART_BUS_RESET_ISR_EntryCallback();
 726:Generated_Source\PSoC5/USBUART_episr.c **** #endif /* (USBUART_BUS_RESET_ISR_ENTRY_CALLBACK) */
 727:Generated_Source\PSoC5/USBUART_episr.c **** 
 728:Generated_Source\PSoC5/USBUART_episr.c ****     /* `#START BUS_RESET_USER_CODE` Place your code here */
 729:Generated_Source\PSoC5/USBUART_episr.c **** 
 730:Generated_Source\PSoC5/USBUART_episr.c ****     /* `#END` */
 731:Generated_Source\PSoC5/USBUART_episr.c **** 
 732:Generated_Source\PSoC5/USBUART_episr.c ****     USBUART_ClearSieInterruptSource(USBUART_INTR_SIE_BUS_RESET_INTR);
 733:Generated_Source\PSoC5/USBUART_episr.c **** 
 734:Generated_Source\PSoC5/USBUART_episr.c ****     USBUART_ReInitComponent();
 255              		.loc 1 734 0
 256 0004 FFF7FEFF 		bl	USBUART_ReInitComponent
 735:Generated_Source\PSoC5/USBUART_episr.c **** 
 736:Generated_Source\PSoC5/USBUART_episr.c **** #ifdef USBUART_BUS_RESET_ISR_EXIT_CALLBACK
 737:Generated_Source\PSoC5/USBUART_episr.c ****     USBUART_BUS_RESET_ISR_ExitCallback();
 738:Generated_Source\PSoC5/USBUART_episr.c **** #endif /* (USBUART_BUS_RESET_ISR_EXIT_CALLBACK) */
 739:Generated_Source\PSoC5/USBUART_episr.c **** }
 257              		.loc 1 739 0
 258 0008 80BD     		pop	{r7, pc}
 259              		.cfi_endproc
 260              	.LFE4:
 261              		.size	USBUART_BUS_RESET_ISR, .-USBUART_BUS_RESET_ISR
 262 000a 00BF     		.text
 263              	.Letext0:
 264              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 265              		.file 3 "Generated_Source\\PSoC5\\USBUART.h"
 266              		.file 4 "Generated_Source\\PSoC5\\USBUART_pvt.h"
 267              		.section	.debug_info,"",%progbits
 268              	.Ldebug_info0:
 269 0000 2B020000 		.4byte	0x22b
 270 0004 0400     		.2byte	0x4
 271 0006 00000000 		.4byte	.Ldebug_abbrev0
 272 000a 04       		.byte	0x4
 273 000b 01       		.uleb128 0x1
 274 000c F7000000 		.4byte	.LASF37
 275 0010 01       		.byte	0x1
 276 0011 D0000000 		.4byte	.LASF38
 277 0015 93010000 		.4byte	.LASF39
 278 0019 00000000 		.4byte	.Ldebug_ranges0+0
 279 001d 00000000 		.4byte	0
 280 0021 00000000 		.4byte	.Ldebug_line0
 281 0025 02       		.uleb128 0x2
 282 0026 01       		.byte	0x1
 283 0027 06       		.byte	0x6
 284 0028 B0020000 		.4byte	.LASF0
 285 002c 02       		.uleb128 0x2
 286 002d 01       		.byte	0x1
 287 002e 08       		.byte	0x8
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 19


 288 002f C2000000 		.4byte	.LASF1
 289 0033 02       		.uleb128 0x2
 290 0034 02       		.byte	0x2
 291 0035 05       		.byte	0x5
 292 0036 60020000 		.4byte	.LASF2
 293 003a 02       		.uleb128 0x2
 294 003b 02       		.byte	0x2
 295 003c 07       		.byte	0x7
 296 003d 33000000 		.4byte	.LASF3
 297 0041 02       		.uleb128 0x2
 298 0042 04       		.byte	0x4
 299 0043 05       		.byte	0x5
 300 0044 90020000 		.4byte	.LASF4
 301 0048 02       		.uleb128 0x2
 302 0049 04       		.byte	0x4
 303 004a 07       		.byte	0x7
 304 004b 8E000000 		.4byte	.LASF5
 305 004f 02       		.uleb128 0x2
 306 0050 08       		.byte	0x8
 307 0051 05       		.byte	0x5
 308 0052 42020000 		.4byte	.LASF6
 309 0056 02       		.uleb128 0x2
 310 0057 08       		.byte	0x8
 311 0058 07       		.byte	0x7
 312 0059 11020000 		.4byte	.LASF7
 313 005d 03       		.uleb128 0x3
 314 005e 04       		.byte	0x4
 315 005f 05       		.byte	0x5
 316 0060 696E7400 		.ascii	"int\000"
 317 0064 02       		.uleb128 0x2
 318 0065 04       		.byte	0x4
 319 0066 07       		.byte	0x7
 320 0067 04020000 		.4byte	.LASF8
 321 006b 04       		.uleb128 0x4
 322 006c 80020000 		.4byte	.LASF9
 323 0070 02       		.byte	0x2
 324 0071 9201     		.2byte	0x192
 325 0073 2C000000 		.4byte	0x2c
 326 0077 04       		.uleb128 0x4
 327 0078 F2010000 		.4byte	.LASF10
 328 007c 02       		.byte	0x2
 329 007d 9301     		.2byte	0x193
 330 007f 3A000000 		.4byte	0x3a
 331 0083 02       		.uleb128 0x2
 332 0084 04       		.byte	0x4
 333 0085 04       		.byte	0x4
 334 0086 2D000000 		.4byte	.LASF11
 335 008a 02       		.uleb128 0x2
 336 008b 08       		.byte	0x8
 337 008c 04       		.byte	0x4
 338 008d 85010000 		.4byte	.LASF12
 339 0091 02       		.uleb128 0x2
 340 0092 01       		.byte	0x1
 341 0093 08       		.byte	0x8
 342 0094 50020000 		.4byte	.LASF13
 343 0098 04       		.uleb128 0x4
 344 0099 89000000 		.4byte	.LASF14
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 20


 345 009d 02       		.byte	0x2
 346 009e 3C02     		.2byte	0x23c
 347 00a0 A4000000 		.4byte	0xa4
 348 00a4 05       		.uleb128 0x5
 349 00a5 6B000000 		.4byte	0x6b
 350 00a9 02       		.uleb128 0x2
 351 00aa 04       		.byte	0x4
 352 00ab 07       		.byte	0x7
 353 00ac 32020000 		.4byte	.LASF15
 354 00b0 06       		.uleb128 0x6
 355 00b1 0C       		.byte	0xc
 356 00b2 03       		.byte	0x3
 357 00b3 8E       		.byte	0x8e
 358 00b4 25010000 		.4byte	0x125
 359 00b8 07       		.uleb128 0x7
 360 00b9 8C010000 		.4byte	.LASF16
 361 00bd 03       		.byte	0x3
 362 00be 90       		.byte	0x90
 363 00bf 6B000000 		.4byte	0x6b
 364 00c3 00       		.byte	0
 365 00c4 07       		.uleb128 0x7
 366 00c5 F9010000 		.4byte	.LASF17
 367 00c9 03       		.byte	0x3
 368 00ca 91       		.byte	0x91
 369 00cb 6B000000 		.4byte	0x6b
 370 00cf 01       		.byte	0x1
 371 00d0 07       		.uleb128 0x7
 372 00d1 28020000 		.4byte	.LASF18
 373 00d5 03       		.byte	0x3
 374 00d6 92       		.byte	0x92
 375 00d7 6B000000 		.4byte	0x6b
 376 00db 02       		.byte	0x2
 377 00dc 07       		.uleb128 0x7
 378 00dd 75000000 		.4byte	.LASF19
 379 00e1 03       		.byte	0x3
 380 00e2 93       		.byte	0x93
 381 00e3 6B000000 		.4byte	0x6b
 382 00e7 03       		.byte	0x3
 383 00e8 07       		.uleb128 0x7
 384 00e9 A0000000 		.4byte	.LASF20
 385 00ed 03       		.byte	0x3
 386 00ee 94       		.byte	0x94
 387 00ef 6B000000 		.4byte	0x6b
 388 00f3 04       		.byte	0x4
 389 00f4 07       		.uleb128 0x7
 390 00f5 3B020000 		.4byte	.LASF21
 391 00f9 03       		.byte	0x3
 392 00fa 95       		.byte	0x95
 393 00fb 6B000000 		.4byte	0x6b
 394 00ff 05       		.byte	0x5
 395 0100 07       		.uleb128 0x7
 396 0101 E7010000 		.4byte	.LASF22
 397 0105 03       		.byte	0x3
 398 0106 96       		.byte	0x96
 399 0107 77000000 		.4byte	0x77
 400 010b 06       		.byte	0x6
 401 010c 07       		.uleb128 0x7
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 21


 402 010d 55020000 		.4byte	.LASF23
 403 0111 03       		.byte	0x3
 404 0112 97       		.byte	0x97
 405 0113 77000000 		.4byte	0x77
 406 0117 08       		.byte	0x8
 407 0118 07       		.uleb128 0x7
 408 0119 86020000 		.4byte	.LASF24
 409 011d 03       		.byte	0x3
 410 011e 98       		.byte	0x98
 411 011f 6B000000 		.4byte	0x6b
 412 0123 0A       		.byte	0xa
 413 0124 00       		.byte	0
 414 0125 08       		.uleb128 0x8
 415 0126 99020000 		.4byte	.LASF25
 416 012a 03       		.byte	0x3
 417 012b 99       		.byte	0x99
 418 012c B0000000 		.4byte	0xb0
 419 0130 06       		.uleb128 0x6
 420 0131 10       		.byte	0x10
 421 0132 03       		.byte	0x3
 422 0133 D5       		.byte	0xd5
 423 0134 69010000 		.4byte	0x169
 424 0138 07       		.uleb128 0x7
 425 0139 67000000 		.4byte	.LASF26
 426 013d 03       		.byte	0x3
 427 013e D7       		.byte	0xd7
 428 013f 6B000000 		.4byte	0x6b
 429 0143 00       		.byte	0
 430 0144 07       		.uleb128 0x7
 431 0145 6E000000 		.4byte	.LASF27
 432 0149 03       		.byte	0x3
 433 014a D8       		.byte	0xd8
 434 014b 6B000000 		.4byte	0x6b
 435 014f 01       		.byte	0x1
 436 0150 07       		.uleb128 0x7
 437 0151 27000000 		.4byte	.LASF28
 438 0155 03       		.byte	0x3
 439 0156 D9       		.byte	0xd9
 440 0157 6B000000 		.4byte	0x6b
 441 015b 02       		.byte	0x2
 442 015c 09       		.uleb128 0x9
 443 015d 67617000 		.ascii	"gap\000"
 444 0161 03       		.byte	0x3
 445 0162 DA       		.byte	0xda
 446 0163 69010000 		.4byte	0x169
 447 0167 03       		.byte	0x3
 448 0168 00       		.byte	0
 449 0169 0A       		.uleb128 0xa
 450 016a 6B000000 		.4byte	0x6b
 451 016e 79010000 		.4byte	0x179
 452 0172 0B       		.uleb128 0xb
 453 0173 A9000000 		.4byte	0xa9
 454 0177 0C       		.byte	0xc
 455 0178 00       		.byte	0
 456 0179 08       		.uleb128 0x8
 457 017a 11000000 		.4byte	.LASF29
 458 017e 03       		.byte	0x3
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 22


 459 017f DB       		.byte	0xdb
 460 0180 30010000 		.4byte	0x130
 461 0184 0C       		.uleb128 0xc
 462 0185 90       		.byte	0x90
 463 0186 03       		.byte	0x3
 464 0187 0F01     		.2byte	0x10f
 465 0189 9B010000 		.4byte	0x19b
 466 018d 0D       		.uleb128 0xd
 467 018e A5000000 		.4byte	.LASF30
 468 0192 03       		.byte	0x3
 469 0193 1101     		.2byte	0x111
 470 0195 9B010000 		.4byte	0x19b
 471 0199 00       		.byte	0
 472 019a 00       		.byte	0
 473 019b 0A       		.uleb128 0xa
 474 019c 79010000 		.4byte	0x179
 475 01a0 AB010000 		.4byte	0x1ab
 476 01a4 0B       		.uleb128 0xb
 477 01a5 A9000000 		.4byte	0xa9
 478 01a9 08       		.byte	0x8
 479 01aa 00       		.byte	0
 480 01ab 04       		.uleb128 0x4
 481 01ac AB000000 		.4byte	.LASF31
 482 01b0 03       		.byte	0x3
 483 01b1 1201     		.2byte	0x112
 484 01b3 84010000 		.4byte	0x184
 485 01b7 0E       		.uleb128 0xe
 486 01b8 BC020000 		.4byte	.LASF32
 487 01bc 01       		.byte	0x1
 488 01bd 25       		.byte	0x25
 489 01be 00000000 		.4byte	.LFB0
 490 01c2 48000000 		.4byte	.LFE0-.LFB0
 491 01c6 01       		.uleb128 0x1
 492 01c7 9C       		.byte	0x9c
 493 01c8 0E       		.uleb128 0xe
 494 01c9 46000000 		.4byte	.LASF33
 495 01cd 01       		.byte	0x1
 496 01ce 78       		.byte	0x78
 497 01cf 00000000 		.4byte	.LFB1
 498 01d3 4C000000 		.4byte	.LFE1-.LFB1
 499 01d7 01       		.uleb128 0x1
 500 01d8 9C       		.byte	0x9c
 501 01d9 0E       		.uleb128 0xe
 502 01da 00000000 		.4byte	.LASF34
 503 01de 01       		.byte	0x1
 504 01df C9       		.byte	0xc9
 505 01e0 00000000 		.4byte	.LFB2
 506 01e4 54000000 		.4byte	.LFE2-.LFB2
 507 01e8 01       		.uleb128 0x1
 508 01e9 9C       		.byte	0x9c
 509 01ea 0F       		.uleb128 0xf
 510 01eb 57000000 		.4byte	.LASF35
 511 01ef 01       		.byte	0x1
 512 01f0 B502     		.2byte	0x2b5
 513 01f2 00000000 		.4byte	.LFB3
 514 01f6 0C000000 		.4byte	.LFE3-.LFB3
 515 01fa 01       		.uleb128 0x1
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 23


 516 01fb 9C       		.byte	0x9c
 517 01fc 10       		.uleb128 0x10
 518 01fd 6A020000 		.4byte	.LASF36
 519 0201 01       		.byte	0x1
 520 0202 D202     		.2byte	0x2d2
 521 0204 00000000 		.4byte	.LFB4
 522 0208 0A000000 		.4byte	.LFE4-.LFB4
 523 020c 01       		.uleb128 0x1
 524 020d 9C       		.byte	0x9c
 525 020e 0A       		.uleb128 0xa
 526 020f 25010000 		.4byte	0x125
 527 0213 1E020000 		.4byte	0x21e
 528 0217 0B       		.uleb128 0xb
 529 0218 A9000000 		.4byte	0xa9
 530 021c 08       		.byte	0x8
 531 021d 00       		.byte	0
 532 021e 11       		.uleb128 0x11
 533 021f 7E000000 		.4byte	.LASF40
 534 0223 04       		.byte	0x4
 535 0224 79       		.byte	0x79
 536 0225 29020000 		.4byte	0x229
 537 0229 05       		.uleb128 0x5
 538 022a 0E020000 		.4byte	0x20e
 539 022e 00       		.byte	0
 540              		.section	.debug_abbrev,"",%progbits
 541              	.Ldebug_abbrev0:
 542 0000 01       		.uleb128 0x1
 543 0001 11       		.uleb128 0x11
 544 0002 01       		.byte	0x1
 545 0003 25       		.uleb128 0x25
 546 0004 0E       		.uleb128 0xe
 547 0005 13       		.uleb128 0x13
 548 0006 0B       		.uleb128 0xb
 549 0007 03       		.uleb128 0x3
 550 0008 0E       		.uleb128 0xe
 551 0009 1B       		.uleb128 0x1b
 552 000a 0E       		.uleb128 0xe
 553 000b 55       		.uleb128 0x55
 554 000c 17       		.uleb128 0x17
 555 000d 11       		.uleb128 0x11
 556 000e 01       		.uleb128 0x1
 557 000f 10       		.uleb128 0x10
 558 0010 17       		.uleb128 0x17
 559 0011 00       		.byte	0
 560 0012 00       		.byte	0
 561 0013 02       		.uleb128 0x2
 562 0014 24       		.uleb128 0x24
 563 0015 00       		.byte	0
 564 0016 0B       		.uleb128 0xb
 565 0017 0B       		.uleb128 0xb
 566 0018 3E       		.uleb128 0x3e
 567 0019 0B       		.uleb128 0xb
 568 001a 03       		.uleb128 0x3
 569 001b 0E       		.uleb128 0xe
 570 001c 00       		.byte	0
 571 001d 00       		.byte	0
 572 001e 03       		.uleb128 0x3
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 24


 573 001f 24       		.uleb128 0x24
 574 0020 00       		.byte	0
 575 0021 0B       		.uleb128 0xb
 576 0022 0B       		.uleb128 0xb
 577 0023 3E       		.uleb128 0x3e
 578 0024 0B       		.uleb128 0xb
 579 0025 03       		.uleb128 0x3
 580 0026 08       		.uleb128 0x8
 581 0027 00       		.byte	0
 582 0028 00       		.byte	0
 583 0029 04       		.uleb128 0x4
 584 002a 16       		.uleb128 0x16
 585 002b 00       		.byte	0
 586 002c 03       		.uleb128 0x3
 587 002d 0E       		.uleb128 0xe
 588 002e 3A       		.uleb128 0x3a
 589 002f 0B       		.uleb128 0xb
 590 0030 3B       		.uleb128 0x3b
 591 0031 05       		.uleb128 0x5
 592 0032 49       		.uleb128 0x49
 593 0033 13       		.uleb128 0x13
 594 0034 00       		.byte	0
 595 0035 00       		.byte	0
 596 0036 05       		.uleb128 0x5
 597 0037 35       		.uleb128 0x35
 598 0038 00       		.byte	0
 599 0039 49       		.uleb128 0x49
 600 003a 13       		.uleb128 0x13
 601 003b 00       		.byte	0
 602 003c 00       		.byte	0
 603 003d 06       		.uleb128 0x6
 604 003e 13       		.uleb128 0x13
 605 003f 01       		.byte	0x1
 606 0040 0B       		.uleb128 0xb
 607 0041 0B       		.uleb128 0xb
 608 0042 3A       		.uleb128 0x3a
 609 0043 0B       		.uleb128 0xb
 610 0044 3B       		.uleb128 0x3b
 611 0045 0B       		.uleb128 0xb
 612 0046 01       		.uleb128 0x1
 613 0047 13       		.uleb128 0x13
 614 0048 00       		.byte	0
 615 0049 00       		.byte	0
 616 004a 07       		.uleb128 0x7
 617 004b 0D       		.uleb128 0xd
 618 004c 00       		.byte	0
 619 004d 03       		.uleb128 0x3
 620 004e 0E       		.uleb128 0xe
 621 004f 3A       		.uleb128 0x3a
 622 0050 0B       		.uleb128 0xb
 623 0051 3B       		.uleb128 0x3b
 624 0052 0B       		.uleb128 0xb
 625 0053 49       		.uleb128 0x49
 626 0054 13       		.uleb128 0x13
 627 0055 38       		.uleb128 0x38
 628 0056 0B       		.uleb128 0xb
 629 0057 00       		.byte	0
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 25


 630 0058 00       		.byte	0
 631 0059 08       		.uleb128 0x8
 632 005a 16       		.uleb128 0x16
 633 005b 00       		.byte	0
 634 005c 03       		.uleb128 0x3
 635 005d 0E       		.uleb128 0xe
 636 005e 3A       		.uleb128 0x3a
 637 005f 0B       		.uleb128 0xb
 638 0060 3B       		.uleb128 0x3b
 639 0061 0B       		.uleb128 0xb
 640 0062 49       		.uleb128 0x49
 641 0063 13       		.uleb128 0x13
 642 0064 00       		.byte	0
 643 0065 00       		.byte	0
 644 0066 09       		.uleb128 0x9
 645 0067 0D       		.uleb128 0xd
 646 0068 00       		.byte	0
 647 0069 03       		.uleb128 0x3
 648 006a 08       		.uleb128 0x8
 649 006b 3A       		.uleb128 0x3a
 650 006c 0B       		.uleb128 0xb
 651 006d 3B       		.uleb128 0x3b
 652 006e 0B       		.uleb128 0xb
 653 006f 49       		.uleb128 0x49
 654 0070 13       		.uleb128 0x13
 655 0071 38       		.uleb128 0x38
 656 0072 0B       		.uleb128 0xb
 657 0073 00       		.byte	0
 658 0074 00       		.byte	0
 659 0075 0A       		.uleb128 0xa
 660 0076 01       		.uleb128 0x1
 661 0077 01       		.byte	0x1
 662 0078 49       		.uleb128 0x49
 663 0079 13       		.uleb128 0x13
 664 007a 01       		.uleb128 0x1
 665 007b 13       		.uleb128 0x13
 666 007c 00       		.byte	0
 667 007d 00       		.byte	0
 668 007e 0B       		.uleb128 0xb
 669 007f 21       		.uleb128 0x21
 670 0080 00       		.byte	0
 671 0081 49       		.uleb128 0x49
 672 0082 13       		.uleb128 0x13
 673 0083 2F       		.uleb128 0x2f
 674 0084 0B       		.uleb128 0xb
 675 0085 00       		.byte	0
 676 0086 00       		.byte	0
 677 0087 0C       		.uleb128 0xc
 678 0088 13       		.uleb128 0x13
 679 0089 01       		.byte	0x1
 680 008a 0B       		.uleb128 0xb
 681 008b 0B       		.uleb128 0xb
 682 008c 3A       		.uleb128 0x3a
 683 008d 0B       		.uleb128 0xb
 684 008e 3B       		.uleb128 0x3b
 685 008f 05       		.uleb128 0x5
 686 0090 01       		.uleb128 0x1
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 26


 687 0091 13       		.uleb128 0x13
 688 0092 00       		.byte	0
 689 0093 00       		.byte	0
 690 0094 0D       		.uleb128 0xd
 691 0095 0D       		.uleb128 0xd
 692 0096 00       		.byte	0
 693 0097 03       		.uleb128 0x3
 694 0098 0E       		.uleb128 0xe
 695 0099 3A       		.uleb128 0x3a
 696 009a 0B       		.uleb128 0xb
 697 009b 3B       		.uleb128 0x3b
 698 009c 05       		.uleb128 0x5
 699 009d 49       		.uleb128 0x49
 700 009e 13       		.uleb128 0x13
 701 009f 38       		.uleb128 0x38
 702 00a0 0B       		.uleb128 0xb
 703 00a1 00       		.byte	0
 704 00a2 00       		.byte	0
 705 00a3 0E       		.uleb128 0xe
 706 00a4 2E       		.uleb128 0x2e
 707 00a5 00       		.byte	0
 708 00a6 3F       		.uleb128 0x3f
 709 00a7 19       		.uleb128 0x19
 710 00a8 03       		.uleb128 0x3
 711 00a9 0E       		.uleb128 0xe
 712 00aa 3A       		.uleb128 0x3a
 713 00ab 0B       		.uleb128 0xb
 714 00ac 3B       		.uleb128 0x3b
 715 00ad 0B       		.uleb128 0xb
 716 00ae 27       		.uleb128 0x27
 717 00af 19       		.uleb128 0x19
 718 00b0 11       		.uleb128 0x11
 719 00b1 01       		.uleb128 0x1
 720 00b2 12       		.uleb128 0x12
 721 00b3 06       		.uleb128 0x6
 722 00b4 40       		.uleb128 0x40
 723 00b5 18       		.uleb128 0x18
 724 00b6 9742     		.uleb128 0x2117
 725 00b8 19       		.uleb128 0x19
 726 00b9 00       		.byte	0
 727 00ba 00       		.byte	0
 728 00bb 0F       		.uleb128 0xf
 729 00bc 2E       		.uleb128 0x2e
 730 00bd 00       		.byte	0
 731 00be 3F       		.uleb128 0x3f
 732 00bf 19       		.uleb128 0x19
 733 00c0 03       		.uleb128 0x3
 734 00c1 0E       		.uleb128 0xe
 735 00c2 3A       		.uleb128 0x3a
 736 00c3 0B       		.uleb128 0xb
 737 00c4 3B       		.uleb128 0x3b
 738 00c5 05       		.uleb128 0x5
 739 00c6 27       		.uleb128 0x27
 740 00c7 19       		.uleb128 0x19
 741 00c8 11       		.uleb128 0x11
 742 00c9 01       		.uleb128 0x1
 743 00ca 12       		.uleb128 0x12
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 27


 744 00cb 06       		.uleb128 0x6
 745 00cc 40       		.uleb128 0x40
 746 00cd 18       		.uleb128 0x18
 747 00ce 9742     		.uleb128 0x2117
 748 00d0 19       		.uleb128 0x19
 749 00d1 00       		.byte	0
 750 00d2 00       		.byte	0
 751 00d3 10       		.uleb128 0x10
 752 00d4 2E       		.uleb128 0x2e
 753 00d5 00       		.byte	0
 754 00d6 3F       		.uleb128 0x3f
 755 00d7 19       		.uleb128 0x19
 756 00d8 03       		.uleb128 0x3
 757 00d9 0E       		.uleb128 0xe
 758 00da 3A       		.uleb128 0x3a
 759 00db 0B       		.uleb128 0xb
 760 00dc 3B       		.uleb128 0x3b
 761 00dd 05       		.uleb128 0x5
 762 00de 27       		.uleb128 0x27
 763 00df 19       		.uleb128 0x19
 764 00e0 11       		.uleb128 0x11
 765 00e1 01       		.uleb128 0x1
 766 00e2 12       		.uleb128 0x12
 767 00e3 06       		.uleb128 0x6
 768 00e4 40       		.uleb128 0x40
 769 00e5 18       		.uleb128 0x18
 770 00e6 9642     		.uleb128 0x2116
 771 00e8 19       		.uleb128 0x19
 772 00e9 00       		.byte	0
 773 00ea 00       		.byte	0
 774 00eb 11       		.uleb128 0x11
 775 00ec 34       		.uleb128 0x34
 776 00ed 00       		.byte	0
 777 00ee 03       		.uleb128 0x3
 778 00ef 0E       		.uleb128 0xe
 779 00f0 3A       		.uleb128 0x3a
 780 00f1 0B       		.uleb128 0xb
 781 00f2 3B       		.uleb128 0x3b
 782 00f3 0B       		.uleb128 0xb
 783 00f4 49       		.uleb128 0x49
 784 00f5 13       		.uleb128 0x13
 785 00f6 3F       		.uleb128 0x3f
 786 00f7 19       		.uleb128 0x19
 787 00f8 3C       		.uleb128 0x3c
 788 00f9 19       		.uleb128 0x19
 789 00fa 00       		.byte	0
 790 00fb 00       		.byte	0
 791 00fc 00       		.byte	0
 792              		.section	.debug_aranges,"",%progbits
 793 0000 3C000000 		.4byte	0x3c
 794 0004 0200     		.2byte	0x2
 795 0006 00000000 		.4byte	.Ldebug_info0
 796 000a 04       		.byte	0x4
 797 000b 00       		.byte	0
 798 000c 0000     		.2byte	0
 799 000e 0000     		.2byte	0
 800 0010 00000000 		.4byte	.LFB0
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 28


 801 0014 48000000 		.4byte	.LFE0-.LFB0
 802 0018 00000000 		.4byte	.LFB1
 803 001c 4C000000 		.4byte	.LFE1-.LFB1
 804 0020 00000000 		.4byte	.LFB2
 805 0024 54000000 		.4byte	.LFE2-.LFB2
 806 0028 00000000 		.4byte	.LFB3
 807 002c 0C000000 		.4byte	.LFE3-.LFB3
 808 0030 00000000 		.4byte	.LFB4
 809 0034 0A000000 		.4byte	.LFE4-.LFB4
 810 0038 00000000 		.4byte	0
 811 003c 00000000 		.4byte	0
 812              		.section	.debug_ranges,"",%progbits
 813              	.Ldebug_ranges0:
 814 0000 00000000 		.4byte	.LFB0
 815 0004 48000000 		.4byte	.LFE0
 816 0008 00000000 		.4byte	.LFB1
 817 000c 4C000000 		.4byte	.LFE1
 818 0010 00000000 		.4byte	.LFB2
 819 0014 54000000 		.4byte	.LFE2
 820 0018 00000000 		.4byte	.LFB3
 821 001c 0C000000 		.4byte	.LFE3
 822 0020 00000000 		.4byte	.LFB4
 823 0024 0A000000 		.4byte	.LFE4
 824 0028 00000000 		.4byte	0
 825 002c 00000000 		.4byte	0
 826              		.section	.debug_line,"",%progbits
 827              	.Ldebug_line0:
 828 0000 EE000000 		.section	.debug_str,"MS",%progbits,1
 828      02006800 
 828      00000201 
 828      FB0E0D00 
 828      01010101 
 829              	.LASF34:
 830 0000 55534255 		.ascii	"USBUART_EP_3_ISR\000"
 830      4152545F 
 830      45505F33 
 830      5F495352 
 830      00
 831              	.LASF29:
 832 0011 55534255 		.ascii	"USBUART_sie_ep_struct\000"
 832      4152545F 
 832      7369655F 
 832      65705F73 
 832      74727563 
 833              	.LASF28:
 834 0027 65704372 		.ascii	"epCr0\000"
 834      3000
 835              	.LASF11:
 836 002d 666C6F61 		.ascii	"float\000"
 836      7400
 837              	.LASF3:
 838 0033 73686F72 		.ascii	"short unsigned int\000"
 838      7420756E 
 838      7369676E 
 838      65642069 
 838      6E7400
 839              	.LASF33:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 29


 840 0046 55534255 		.ascii	"USBUART_EP_2_ISR\000"
 840      4152545F 
 840      45505F32 
 840      5F495352 
 840      00
 841              	.LASF35:
 842 0057 55534255 		.ascii	"USBUART_SOF_ISR\000"
 842      4152545F 
 842      534F465F 
 842      49535200 
 843              	.LASF26:
 844 0067 6570436E 		.ascii	"epCnt0\000"
 844      743000
 845              	.LASF27:
 846 006e 6570436E 		.ascii	"epCnt1\000"
 846      743100
 847              	.LASF19:
 848 0075 6570546F 		.ascii	"epToggle\000"
 848      67676C65 
 848      00
 849              	.LASF40:
 850 007e 55534255 		.ascii	"USBUART_EP\000"
 850      4152545F 
 850      455000
 851              	.LASF14:
 852 0089 72656738 		.ascii	"reg8\000"
 852      00
 853              	.LASF5:
 854 008e 6C6F6E67 		.ascii	"long unsigned int\000"
 854      20756E73 
 854      69676E65 
 854      6420696E 
 854      7400
 855              	.LASF20:
 856 00a0 61646472 		.ascii	"addr\000"
 856      00
 857              	.LASF30:
 858 00a5 73696545 		.ascii	"sieEp\000"
 858      7000
 859              	.LASF31:
 860 00ab 55534255 		.ascii	"USBUART_sie_eps_struct\000"
 860      4152545F 
 860      7369655F 
 860      6570735F 
 860      73747275 
 861              	.LASF1:
 862 00c2 756E7369 		.ascii	"unsigned char\000"
 862      676E6564 
 862      20636861 
 862      7200
 863              	.LASF38:
 864 00d0 47656E65 		.ascii	"Generated_Source\\PSoC5\\USBUART_episr.c\000"
 864      72617465 
 864      645F536F 
 864      75726365 
 864      5C50536F 
 865              	.LASF37:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 30


 866 00f7 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 866      4320342E 
 866      392E3320 
 866      32303135 
 866      30333033 
 867 012a 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 867      20726576 
 867      6973696F 
 867      6E203232 
 867      31323230 
 868 015d 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 868      66756E63 
 868      74696F6E 
 868      2D736563 
 868      74696F6E 
 869              	.LASF12:
 870 0185 646F7562 		.ascii	"double\000"
 870      6C6500
 871              	.LASF16:
 872 018c 61747472 		.ascii	"attrib\000"
 872      696200
 873              	.LASF39:
 874 0193 433A5C53 		.ascii	"C:\\SVN\\apps\\trunk\\Cypress Academy\\PSoC-121-Ana"
 874      564E5C61 
 874      7070735C 
 874      7472756E 
 874      6B5C4379 
 875 01c1 6C6F675C 		.ascii	"log\\Scope\\KEES_Scope\\PSoC\\Scope.cydsn\000"
 875      53636F70 
 875      655C4B45 
 875      45535F53 
 875      636F7065 
 876              	.LASF22:
 877 01e7 62756666 		.ascii	"buffOffset\000"
 877      4F666673 
 877      657400
 878              	.LASF10:
 879 01f2 75696E74 		.ascii	"uint16\000"
 879      313600
 880              	.LASF17:
 881 01f9 61706945 		.ascii	"apiEpState\000"
 881      70537461 
 881      746500
 882              	.LASF8:
 883 0204 756E7369 		.ascii	"unsigned int\000"
 883      676E6564 
 883      20696E74 
 883      00
 884              	.LASF7:
 885 0211 6C6F6E67 		.ascii	"long long unsigned int\000"
 885      206C6F6E 
 885      6720756E 
 885      7369676E 
 885      65642069 
 886              	.LASF18:
 887 0228 68774570 		.ascii	"hwEpState\000"
 887      53746174 
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 31


 887      6500
 888              	.LASF15:
 889 0232 73697A65 		.ascii	"sizetype\000"
 889      74797065 
 889      00
 890              	.LASF21:
 891 023b 65704D6F 		.ascii	"epMode\000"
 891      646500
 892              	.LASF6:
 893 0242 6C6F6E67 		.ascii	"long long int\000"
 893      206C6F6E 
 893      6720696E 
 893      7400
 894              	.LASF13:
 895 0250 63686172 		.ascii	"char\000"
 895      00
 896              	.LASF23:
 897 0255 62756666 		.ascii	"bufferSize\000"
 897      65725369 
 897      7A6500
 898              	.LASF2:
 899 0260 73686F72 		.ascii	"short int\000"
 899      7420696E 
 899      7400
 900              	.LASF36:
 901 026a 55534255 		.ascii	"USBUART_BUS_RESET_ISR\000"
 901      4152545F 
 901      4255535F 
 901      52455345 
 901      545F4953 
 902              	.LASF9:
 903 0280 75696E74 		.ascii	"uint8\000"
 903      3800
 904              	.LASF24:
 905 0286 696E7465 		.ascii	"interface\000"
 905      72666163 
 905      6500
 906              	.LASF4:
 907 0290 6C6F6E67 		.ascii	"long int\000"
 907      20696E74 
 907      00
 908              	.LASF25:
 909 0299 545F5553 		.ascii	"T_USBUART_EP_CTL_BLOCK\000"
 909      42554152 
 909      545F4550 
 909      5F43544C 
 909      5F424C4F 
 910              	.LASF0:
 911 02b0 7369676E 		.ascii	"signed char\000"
 911      65642063 
 911      68617200 
 912              	.LASF32:
 913 02bc 55534255 		.ascii	"USBUART_EP_1_ISR\000"
 913      4152545F 
 913      45505F31 
 913      5F495352 
 913      00
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccqVnE1r.s 			page 32


 914              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
