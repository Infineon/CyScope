ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"PWM_Clock.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.PWM_Clock_Start,"ax",%progbits
  19              		.align	2
  20              		.global	PWM_Clock_Start
  21              		.thumb
  22              		.thumb_func
  23              		.type	PWM_Clock_Start, %function
  24              	PWM_Clock_Start:
  25              	.LFB0:
  26              		.file 1 "Generated_Source\\PSoC5\\PWM_Clock.c"
   1:Generated_Source\PSoC5/PWM_Clock.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/PWM_Clock.c **** * File Name: PWM_Clock.c
   3:Generated_Source\PSoC5/PWM_Clock.c **** * Version 2.20
   4:Generated_Source\PSoC5/PWM_Clock.c **** *
   5:Generated_Source\PSoC5/PWM_Clock.c **** *  Description:
   6:Generated_Source\PSoC5/PWM_Clock.c **** *   This file provides the source code to the API for the clock component.
   7:Generated_Source\PSoC5/PWM_Clock.c **** *
   8:Generated_Source\PSoC5/PWM_Clock.c **** *  Note:
   9:Generated_Source\PSoC5/PWM_Clock.c **** *
  10:Generated_Source\PSoC5/PWM_Clock.c **** ********************************************************************************
  11:Generated_Source\PSoC5/PWM_Clock.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  12:Generated_Source\PSoC5/PWM_Clock.c **** * You may use this file only in accordance with the license, terms, conditions, 
  13:Generated_Source\PSoC5/PWM_Clock.c **** * disclaimers, and limitations in the end user license agreement accompanying 
  14:Generated_Source\PSoC5/PWM_Clock.c **** * the software package with which this file was provided.
  15:Generated_Source\PSoC5/PWM_Clock.c **** *******************************************************************************/
  16:Generated_Source\PSoC5/PWM_Clock.c **** 
  17:Generated_Source\PSoC5/PWM_Clock.c **** #include <cydevice_trm.h>
  18:Generated_Source\PSoC5/PWM_Clock.c **** #include "PWM_Clock.h"
  19:Generated_Source\PSoC5/PWM_Clock.c **** 
  20:Generated_Source\PSoC5/PWM_Clock.c **** /* Clock Distribution registers. */
  21:Generated_Source\PSoC5/PWM_Clock.c **** #define CLK_DIST_LD              (* (reg8 *) CYREG_CLKDIST_LD)
  22:Generated_Source\PSoC5/PWM_Clock.c **** #define CLK_DIST_BCFG2           (* (reg8 *) CYREG_CLKDIST_BCFG2)
  23:Generated_Source\PSoC5/PWM_Clock.c **** #define BCFG2_MASK               (0x80u)
  24:Generated_Source\PSoC5/PWM_Clock.c **** #define CLK_DIST_DMASK           (* (reg8 *) CYREG_CLKDIST_DMASK)
  25:Generated_Source\PSoC5/PWM_Clock.c **** #define CLK_DIST_AMASK           (* (reg8 *) CYREG_CLKDIST_AMASK)
  26:Generated_Source\PSoC5/PWM_Clock.c **** 
  27:Generated_Source\PSoC5/PWM_Clock.c **** #define HAS_CLKDIST_LD_DISABLE   (CY_PSOC3 || CY_PSOC5LP)
  28:Generated_Source\PSoC5/PWM_Clock.c **** 
  29:Generated_Source\PSoC5/PWM_Clock.c **** 
  30:Generated_Source\PSoC5/PWM_Clock.c **** /*******************************************************************************
  31:Generated_Source\PSoC5/PWM_Clock.c **** * Function Name: PWM_Clock_Start
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 2


  32:Generated_Source\PSoC5/PWM_Clock.c **** ********************************************************************************
  33:Generated_Source\PSoC5/PWM_Clock.c **** *
  34:Generated_Source\PSoC5/PWM_Clock.c **** * Summary:
  35:Generated_Source\PSoC5/PWM_Clock.c **** *  Starts the clock. Note that on startup, clocks may be already running if the
  36:Generated_Source\PSoC5/PWM_Clock.c **** *  "Start on Reset" option is enabled in the DWR.
  37:Generated_Source\PSoC5/PWM_Clock.c **** *
  38:Generated_Source\PSoC5/PWM_Clock.c **** * Parameters:
  39:Generated_Source\PSoC5/PWM_Clock.c **** *  None
  40:Generated_Source\PSoC5/PWM_Clock.c **** *
  41:Generated_Source\PSoC5/PWM_Clock.c **** * Returns:
  42:Generated_Source\PSoC5/PWM_Clock.c **** *  None
  43:Generated_Source\PSoC5/PWM_Clock.c **** *
  44:Generated_Source\PSoC5/PWM_Clock.c **** *******************************************************************************/
  45:Generated_Source\PSoC5/PWM_Clock.c **** void PWM_Clock_Start(void) 
  46:Generated_Source\PSoC5/PWM_Clock.c **** {
  27              		.loc 1 46 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  47:Generated_Source\PSoC5/PWM_Clock.c ****     /* Set the bit to enable the clock. */
  48:Generated_Source\PSoC5/PWM_Clock.c ****     PWM_Clock_CLKEN |= PWM_Clock_CLKEN_MASK;
  37              		.loc 1 48 0
  38 0004 094A     		ldr	r2, .L2
  39 0006 094B     		ldr	r3, .L2
  40 0008 1B78     		ldrb	r3, [r3]
  41 000a DBB2     		uxtb	r3, r3
  42 000c 43F00403 		orr	r3, r3, #4
  43 0010 DBB2     		uxtb	r3, r3
  44 0012 1370     		strb	r3, [r2]
  49:Generated_Source\PSoC5/PWM_Clock.c **** 	PWM_Clock_CLKSTBY |= PWM_Clock_CLKSTBY_MASK;
  45              		.loc 1 49 0
  46 0014 064A     		ldr	r2, .L2+4
  47 0016 064B     		ldr	r3, .L2+4
  48 0018 1B78     		ldrb	r3, [r3]
  49 001a DBB2     		uxtb	r3, r3
  50 001c 43F00403 		orr	r3, r3, #4
  51 0020 DBB2     		uxtb	r3, r3
  52 0022 1370     		strb	r3, [r2]
  50:Generated_Source\PSoC5/PWM_Clock.c **** }
  53              		.loc 1 50 0
  54 0024 BD46     		mov	sp, r7
  55              		.cfi_def_cfa_register 13
  56              		@ sp needed
  57 0026 5DF8047B 		ldr	r7, [sp], #4
  58              		.cfi_restore 7
  59              		.cfi_def_cfa_offset 0
  60 002a 7047     		bx	lr
  61              	.L3:
  62              		.align	2
  63              	.L2:
  64 002c A2430040 		.word	1073759138
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 3


  65 0030 B2430040 		.word	1073759154
  66              		.cfi_endproc
  67              	.LFE0:
  68              		.size	PWM_Clock_Start, .-PWM_Clock_Start
  69              		.section	.text.PWM_Clock_Stop,"ax",%progbits
  70              		.align	2
  71              		.global	PWM_Clock_Stop
  72              		.thumb
  73              		.thumb_func
  74              		.type	PWM_Clock_Stop, %function
  75              	PWM_Clock_Stop:
  76              	.LFB1:
  51:Generated_Source\PSoC5/PWM_Clock.c **** 
  52:Generated_Source\PSoC5/PWM_Clock.c **** 
  53:Generated_Source\PSoC5/PWM_Clock.c **** /*******************************************************************************
  54:Generated_Source\PSoC5/PWM_Clock.c **** * Function Name: PWM_Clock_Stop
  55:Generated_Source\PSoC5/PWM_Clock.c **** ********************************************************************************
  56:Generated_Source\PSoC5/PWM_Clock.c **** *
  57:Generated_Source\PSoC5/PWM_Clock.c **** * Summary:
  58:Generated_Source\PSoC5/PWM_Clock.c **** *  Stops the clock and returns immediately. This API does not require the
  59:Generated_Source\PSoC5/PWM_Clock.c **** *  source clock to be running but may return before the hardware is actually
  60:Generated_Source\PSoC5/PWM_Clock.c **** *  disabled. If the settings of the clock are changed after calling this
  61:Generated_Source\PSoC5/PWM_Clock.c **** *  function, the clock may glitch when it is started. To avoid the clock
  62:Generated_Source\PSoC5/PWM_Clock.c **** *  glitch, use the StopBlock function.
  63:Generated_Source\PSoC5/PWM_Clock.c **** *
  64:Generated_Source\PSoC5/PWM_Clock.c **** * Parameters:
  65:Generated_Source\PSoC5/PWM_Clock.c **** *  None
  66:Generated_Source\PSoC5/PWM_Clock.c **** *
  67:Generated_Source\PSoC5/PWM_Clock.c **** * Returns:
  68:Generated_Source\PSoC5/PWM_Clock.c **** *  None
  69:Generated_Source\PSoC5/PWM_Clock.c **** *
  70:Generated_Source\PSoC5/PWM_Clock.c **** *******************************************************************************/
  71:Generated_Source\PSoC5/PWM_Clock.c **** void PWM_Clock_Stop(void) 
  72:Generated_Source\PSoC5/PWM_Clock.c **** {
  77              		.loc 1 72 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82 0000 80B4     		push	{r7}
  83              		.cfi_def_cfa_offset 4
  84              		.cfi_offset 7, -4
  85 0002 00AF     		add	r7, sp, #0
  86              		.cfi_def_cfa_register 7
  73:Generated_Source\PSoC5/PWM_Clock.c ****     /* Clear the bit to disable the clock. */
  74:Generated_Source\PSoC5/PWM_Clock.c ****     PWM_Clock_CLKEN &= (uint8)(~PWM_Clock_CLKEN_MASK);
  87              		.loc 1 74 0
  88 0004 094A     		ldr	r2, .L5
  89 0006 094B     		ldr	r3, .L5
  90 0008 1B78     		ldrb	r3, [r3]
  91 000a DBB2     		uxtb	r3, r3
  92 000c 23F00403 		bic	r3, r3, #4
  93 0010 DBB2     		uxtb	r3, r3
  94 0012 1370     		strb	r3, [r2]
  75:Generated_Source\PSoC5/PWM_Clock.c **** 	PWM_Clock_CLKSTBY &= (uint8)(~PWM_Clock_CLKSTBY_MASK);
  95              		.loc 1 75 0
  96 0014 064A     		ldr	r2, .L5+4
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 4


  97 0016 064B     		ldr	r3, .L5+4
  98 0018 1B78     		ldrb	r3, [r3]
  99 001a DBB2     		uxtb	r3, r3
 100 001c 23F00403 		bic	r3, r3, #4
 101 0020 DBB2     		uxtb	r3, r3
 102 0022 1370     		strb	r3, [r2]
  76:Generated_Source\PSoC5/PWM_Clock.c **** }
 103              		.loc 1 76 0
 104 0024 BD46     		mov	sp, r7
 105              		.cfi_def_cfa_register 13
 106              		@ sp needed
 107 0026 5DF8047B 		ldr	r7, [sp], #4
 108              		.cfi_restore 7
 109              		.cfi_def_cfa_offset 0
 110 002a 7047     		bx	lr
 111              	.L6:
 112              		.align	2
 113              	.L5:
 114 002c A2430040 		.word	1073759138
 115 0030 B2430040 		.word	1073759154
 116              		.cfi_endproc
 117              	.LFE1:
 118              		.size	PWM_Clock_Stop, .-PWM_Clock_Stop
 119              		.section	.text.PWM_Clock_StopBlock,"ax",%progbits
 120              		.align	2
 121              		.global	PWM_Clock_StopBlock
 122              		.thumb
 123              		.thumb_func
 124              		.type	PWM_Clock_StopBlock, %function
 125              	PWM_Clock_StopBlock:
 126              	.LFB2:
  77:Generated_Source\PSoC5/PWM_Clock.c **** 
  78:Generated_Source\PSoC5/PWM_Clock.c **** 
  79:Generated_Source\PSoC5/PWM_Clock.c **** #if(CY_PSOC3 || CY_PSOC5LP)
  80:Generated_Source\PSoC5/PWM_Clock.c **** 
  81:Generated_Source\PSoC5/PWM_Clock.c **** 
  82:Generated_Source\PSoC5/PWM_Clock.c **** /*******************************************************************************
  83:Generated_Source\PSoC5/PWM_Clock.c **** * Function Name: PWM_Clock_StopBlock
  84:Generated_Source\PSoC5/PWM_Clock.c **** ********************************************************************************
  85:Generated_Source\PSoC5/PWM_Clock.c **** *
  86:Generated_Source\PSoC5/PWM_Clock.c **** * Summary:
  87:Generated_Source\PSoC5/PWM_Clock.c **** *  Stops the clock and waits for the hardware to actually be disabled before
  88:Generated_Source\PSoC5/PWM_Clock.c **** *  returning. This ensures that the clock is never truncated (high part of the
  89:Generated_Source\PSoC5/PWM_Clock.c **** *  cycle will terminate before the clock is disabled and the API returns).
  90:Generated_Source\PSoC5/PWM_Clock.c **** *  Note that the source clock must be running or this API will never return as
  91:Generated_Source\PSoC5/PWM_Clock.c **** *  a stopped clock cannot be disabled.
  92:Generated_Source\PSoC5/PWM_Clock.c **** *
  93:Generated_Source\PSoC5/PWM_Clock.c **** * Parameters:
  94:Generated_Source\PSoC5/PWM_Clock.c **** *  None
  95:Generated_Source\PSoC5/PWM_Clock.c **** *
  96:Generated_Source\PSoC5/PWM_Clock.c **** * Returns:
  97:Generated_Source\PSoC5/PWM_Clock.c **** *  None
  98:Generated_Source\PSoC5/PWM_Clock.c **** *
  99:Generated_Source\PSoC5/PWM_Clock.c **** *******************************************************************************/
 100:Generated_Source\PSoC5/PWM_Clock.c **** void PWM_Clock_StopBlock(void) 
 101:Generated_Source\PSoC5/PWM_Clock.c **** {
 127              		.loc 1 101 0
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 5


 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 8
 130              		@ frame_needed = 1, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132 0000 80B4     		push	{r7}
 133              		.cfi_def_cfa_offset 4
 134              		.cfi_offset 7, -4
 135 0002 83B0     		sub	sp, sp, #12
 136              		.cfi_def_cfa_offset 16
 137 0004 00AF     		add	r7, sp, #0
 138              		.cfi_def_cfa_register 7
 102:Generated_Source\PSoC5/PWM_Clock.c ****     if ((PWM_Clock_CLKEN & PWM_Clock_CLKEN_MASK) != 0u)
 139              		.loc 1 102 0
 140 0006 224B     		ldr	r3, .L10
 141 0008 1B78     		ldrb	r3, [r3]
 142 000a DBB2     		uxtb	r3, r3
 143 000c 03F00403 		and	r3, r3, #4
 144 0010 002B     		cmp	r3, #0
 145 0012 37D0     		beq	.L7
 146              	.LBB2:
 103:Generated_Source\PSoC5/PWM_Clock.c ****     {
 104:Generated_Source\PSoC5/PWM_Clock.c **** #if HAS_CLKDIST_LD_DISABLE
 105:Generated_Source\PSoC5/PWM_Clock.c ****         uint16 oldDivider;
 106:Generated_Source\PSoC5/PWM_Clock.c **** 
 107:Generated_Source\PSoC5/PWM_Clock.c ****         CLK_DIST_LD = 0u;
 147              		.loc 1 107 0
 148 0014 1F4B     		ldr	r3, .L10+4
 149 0016 0022     		movs	r2, #0
 150 0018 1A70     		strb	r2, [r3]
 108:Generated_Source\PSoC5/PWM_Clock.c **** 
 109:Generated_Source\PSoC5/PWM_Clock.c ****         /* Clear all the mask bits except ours. */
 110:Generated_Source\PSoC5/PWM_Clock.c **** #if defined(PWM_Clock__CFG3)
 111:Generated_Source\PSoC5/PWM_Clock.c ****         CLK_DIST_AMASK = PWM_Clock_CLKEN_MASK;
 112:Generated_Source\PSoC5/PWM_Clock.c ****         CLK_DIST_DMASK = 0x00u;
 113:Generated_Source\PSoC5/PWM_Clock.c **** #else
 114:Generated_Source\PSoC5/PWM_Clock.c ****         CLK_DIST_DMASK = PWM_Clock_CLKEN_MASK;
 151              		.loc 1 114 0
 152 001a 1F4B     		ldr	r3, .L10+8
 153 001c 0422     		movs	r2, #4
 154 001e 1A70     		strb	r2, [r3]
 115:Generated_Source\PSoC5/PWM_Clock.c ****         CLK_DIST_AMASK = 0x00u;
 155              		.loc 1 115 0
 156 0020 1E4B     		ldr	r3, .L10+12
 157 0022 0022     		movs	r2, #0
 158 0024 1A70     		strb	r2, [r3]
 116:Generated_Source\PSoC5/PWM_Clock.c **** #endif /* PWM_Clock__CFG3 */
 117:Generated_Source\PSoC5/PWM_Clock.c **** 
 118:Generated_Source\PSoC5/PWM_Clock.c ****         /* Clear mask of bus clock. */
 119:Generated_Source\PSoC5/PWM_Clock.c ****         CLK_DIST_BCFG2 &= (uint8)(~BCFG2_MASK);
 159              		.loc 1 119 0
 160 0026 1E4A     		ldr	r2, .L10+16
 161 0028 1D4B     		ldr	r3, .L10+16
 162 002a 1B78     		ldrb	r3, [r3]
 163 002c DBB2     		uxtb	r3, r3
 164 002e 03F07F03 		and	r3, r3, #127
 165 0032 DBB2     		uxtb	r3, r3
 166 0034 1370     		strb	r3, [r2]
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 6


 120:Generated_Source\PSoC5/PWM_Clock.c **** 
 121:Generated_Source\PSoC5/PWM_Clock.c ****         oldDivider = CY_GET_REG16(PWM_Clock_DIV_PTR);
 167              		.loc 1 121 0
 168 0036 1B4B     		ldr	r3, .L10+20
 169 0038 1B88     		ldrh	r3, [r3]	@ movhi
 170 003a FB80     		strh	r3, [r7, #6]	@ movhi
 122:Generated_Source\PSoC5/PWM_Clock.c ****         CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 171              		.loc 1 122 0
 172 003c 1A4A     		ldr	r2, .L10+24
 173 003e FB88     		ldrh	r3, [r7, #6]	@ movhi
 174 0040 1380     		strh	r3, [r2]	@ movhi
 123:Generated_Source\PSoC5/PWM_Clock.c ****         CLK_DIST_LD = CYCLK_LD_DISABLE | CYCLK_LD_SYNC_EN | CYCLK_LD_LOAD;
 175              		.loc 1 123 0
 176 0042 144B     		ldr	r3, .L10+4
 177 0044 0722     		movs	r2, #7
 178 0046 1A70     		strb	r2, [r3]
 124:Generated_Source\PSoC5/PWM_Clock.c **** 
 125:Generated_Source\PSoC5/PWM_Clock.c ****         /* Wait for clock to be disabled */
 126:Generated_Source\PSoC5/PWM_Clock.c ****         while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 179              		.loc 1 126 0
 180 0048 00BF     		nop
 181              	.L9:
 182              		.loc 1 126 0 is_stmt 0 discriminator 1
 183 004a 124B     		ldr	r3, .L10+4
 184 004c 1B78     		ldrb	r3, [r3]
 185 004e DBB2     		uxtb	r3, r3
 186 0050 03F00103 		and	r3, r3, #1
 187 0054 002B     		cmp	r3, #0
 188 0056 F8D1     		bne	.L9
 127:Generated_Source\PSoC5/PWM_Clock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 128:Generated_Source\PSoC5/PWM_Clock.c **** 
 129:Generated_Source\PSoC5/PWM_Clock.c ****         /* Clear the bit to disable the clock. */
 130:Generated_Source\PSoC5/PWM_Clock.c ****         PWM_Clock_CLKEN &= (uint8)(~PWM_Clock_CLKEN_MASK);
 189              		.loc 1 130 0 is_stmt 1
 190 0058 0D4A     		ldr	r2, .L10
 191 005a 0D4B     		ldr	r3, .L10
 192 005c 1B78     		ldrb	r3, [r3]
 193 005e DBB2     		uxtb	r3, r3
 194 0060 23F00403 		bic	r3, r3, #4
 195 0064 DBB2     		uxtb	r3, r3
 196 0066 1370     		strb	r3, [r2]
 131:Generated_Source\PSoC5/PWM_Clock.c ****         PWM_Clock_CLKSTBY &= (uint8)(~PWM_Clock_CLKSTBY_MASK);
 197              		.loc 1 131 0
 198 0068 104A     		ldr	r2, .L10+28
 199 006a 104B     		ldr	r3, .L10+28
 200 006c 1B78     		ldrb	r3, [r3]
 201 006e DBB2     		uxtb	r3, r3
 202 0070 23F00403 		bic	r3, r3, #4
 203 0074 DBB2     		uxtb	r3, r3
 204 0076 1370     		strb	r3, [r2]
 132:Generated_Source\PSoC5/PWM_Clock.c **** 
 133:Generated_Source\PSoC5/PWM_Clock.c **** #if HAS_CLKDIST_LD_DISABLE
 134:Generated_Source\PSoC5/PWM_Clock.c ****         /* Clear the disable bit */
 135:Generated_Source\PSoC5/PWM_Clock.c ****         CLK_DIST_LD = 0x00u;
 205              		.loc 1 135 0
 206 0078 064B     		ldr	r3, .L10+4
 207 007a 0022     		movs	r2, #0
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 7


 208 007c 1A70     		strb	r2, [r3]
 136:Generated_Source\PSoC5/PWM_Clock.c ****         CY_SET_REG16(PWM_Clock_DIV_PTR, oldDivider);
 209              		.loc 1 136 0
 210 007e 094A     		ldr	r2, .L10+20
 211 0080 FB88     		ldrh	r3, [r7, #6]	@ movhi
 212 0082 1380     		strh	r3, [r2]	@ movhi
 213              	.L7:
 214              	.LBE2:
 137:Generated_Source\PSoC5/PWM_Clock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 138:Generated_Source\PSoC5/PWM_Clock.c ****     }
 139:Generated_Source\PSoC5/PWM_Clock.c **** }
 215              		.loc 1 139 0
 216 0084 0C37     		adds	r7, r7, #12
 217              		.cfi_def_cfa_offset 4
 218 0086 BD46     		mov	sp, r7
 219              		.cfi_def_cfa_register 13
 220              		@ sp needed
 221 0088 5DF8047B 		ldr	r7, [sp], #4
 222              		.cfi_restore 7
 223              		.cfi_def_cfa_offset 0
 224 008c 7047     		bx	lr
 225              	.L11:
 226 008e 00BF     		.align	2
 227              	.L10:
 228 0090 A2430040 		.word	1073759138
 229 0094 01400040 		.word	1073758209
 230 0098 10400040 		.word	1073758224
 231 009c 14400040 		.word	1073758228
 232 00a0 08400040 		.word	1073758216
 233 00a4 88400040 		.word	1073758344
 234 00a8 02400040 		.word	1073758210
 235 00ac B2430040 		.word	1073759154
 236              		.cfi_endproc
 237              	.LFE2:
 238              		.size	PWM_Clock_StopBlock, .-PWM_Clock_StopBlock
 239              		.section	.text.PWM_Clock_StandbyPower,"ax",%progbits
 240              		.align	2
 241              		.global	PWM_Clock_StandbyPower
 242              		.thumb
 243              		.thumb_func
 244              		.type	PWM_Clock_StandbyPower, %function
 245              	PWM_Clock_StandbyPower:
 246              	.LFB3:
 140:Generated_Source\PSoC5/PWM_Clock.c **** #endif /* (CY_PSOC3 || CY_PSOC5LP) */
 141:Generated_Source\PSoC5/PWM_Clock.c **** 
 142:Generated_Source\PSoC5/PWM_Clock.c **** 
 143:Generated_Source\PSoC5/PWM_Clock.c **** /*******************************************************************************
 144:Generated_Source\PSoC5/PWM_Clock.c **** * Function Name: PWM_Clock_StandbyPower
 145:Generated_Source\PSoC5/PWM_Clock.c **** ********************************************************************************
 146:Generated_Source\PSoC5/PWM_Clock.c **** *
 147:Generated_Source\PSoC5/PWM_Clock.c **** * Summary:
 148:Generated_Source\PSoC5/PWM_Clock.c **** *  Sets whether the clock is active in standby mode.
 149:Generated_Source\PSoC5/PWM_Clock.c **** *
 150:Generated_Source\PSoC5/PWM_Clock.c **** * Parameters:
 151:Generated_Source\PSoC5/PWM_Clock.c **** *  state:  0 to disable clock during standby, nonzero to enable.
 152:Generated_Source\PSoC5/PWM_Clock.c **** *
 153:Generated_Source\PSoC5/PWM_Clock.c **** * Returns:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 8


 154:Generated_Source\PSoC5/PWM_Clock.c **** *  None
 155:Generated_Source\PSoC5/PWM_Clock.c **** *
 156:Generated_Source\PSoC5/PWM_Clock.c **** *******************************************************************************/
 157:Generated_Source\PSoC5/PWM_Clock.c **** void PWM_Clock_StandbyPower(uint8 state) 
 158:Generated_Source\PSoC5/PWM_Clock.c **** {
 247              		.loc 1 158 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 8
 250              		@ frame_needed = 1, uses_anonymous_args = 0
 251              		@ link register save eliminated.
 252 0000 80B4     		push	{r7}
 253              		.cfi_def_cfa_offset 4
 254              		.cfi_offset 7, -4
 255 0002 83B0     		sub	sp, sp, #12
 256              		.cfi_def_cfa_offset 16
 257 0004 00AF     		add	r7, sp, #0
 258              		.cfi_def_cfa_register 7
 259 0006 0346     		mov	r3, r0
 260 0008 FB71     		strb	r3, [r7, #7]
 159:Generated_Source\PSoC5/PWM_Clock.c ****     if(state == 0u)
 261              		.loc 1 159 0
 262 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 263 000c 002B     		cmp	r3, #0
 264 000e 08D1     		bne	.L13
 160:Generated_Source\PSoC5/PWM_Clock.c ****     {
 161:Generated_Source\PSoC5/PWM_Clock.c ****         PWM_Clock_CLKSTBY &= (uint8)(~PWM_Clock_CLKSTBY_MASK);
 265              		.loc 1 161 0
 266 0010 0A4A     		ldr	r2, .L15
 267 0012 0A4B     		ldr	r3, .L15
 268 0014 1B78     		ldrb	r3, [r3]
 269 0016 DBB2     		uxtb	r3, r3
 270 0018 23F00403 		bic	r3, r3, #4
 271 001c DBB2     		uxtb	r3, r3
 272 001e 1370     		strb	r3, [r2]
 273 0020 07E0     		b	.L12
 274              	.L13:
 162:Generated_Source\PSoC5/PWM_Clock.c ****     }
 163:Generated_Source\PSoC5/PWM_Clock.c ****     else
 164:Generated_Source\PSoC5/PWM_Clock.c ****     {
 165:Generated_Source\PSoC5/PWM_Clock.c ****         PWM_Clock_CLKSTBY |= PWM_Clock_CLKSTBY_MASK;
 275              		.loc 1 165 0
 276 0022 064A     		ldr	r2, .L15
 277 0024 054B     		ldr	r3, .L15
 278 0026 1B78     		ldrb	r3, [r3]
 279 0028 DBB2     		uxtb	r3, r3
 280 002a 43F00403 		orr	r3, r3, #4
 281 002e DBB2     		uxtb	r3, r3
 282 0030 1370     		strb	r3, [r2]
 283              	.L12:
 166:Generated_Source\PSoC5/PWM_Clock.c ****     }
 167:Generated_Source\PSoC5/PWM_Clock.c **** }
 284              		.loc 1 167 0
 285 0032 0C37     		adds	r7, r7, #12
 286              		.cfi_def_cfa_offset 4
 287 0034 BD46     		mov	sp, r7
 288              		.cfi_def_cfa_register 13
 289              		@ sp needed
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 9


 290 0036 5DF8047B 		ldr	r7, [sp], #4
 291              		.cfi_restore 7
 292              		.cfi_def_cfa_offset 0
 293 003a 7047     		bx	lr
 294              	.L16:
 295              		.align	2
 296              	.L15:
 297 003c B2430040 		.word	1073759154
 298              		.cfi_endproc
 299              	.LFE3:
 300              		.size	PWM_Clock_StandbyPower, .-PWM_Clock_StandbyPower
 301              		.section	.text.PWM_Clock_SetDividerRegister,"ax",%progbits
 302              		.align	2
 303              		.global	PWM_Clock_SetDividerRegister
 304              		.thumb
 305              		.thumb_func
 306              		.type	PWM_Clock_SetDividerRegister, %function
 307              	PWM_Clock_SetDividerRegister:
 308              	.LFB4:
 168:Generated_Source\PSoC5/PWM_Clock.c **** 
 169:Generated_Source\PSoC5/PWM_Clock.c **** 
 170:Generated_Source\PSoC5/PWM_Clock.c **** /*******************************************************************************
 171:Generated_Source\PSoC5/PWM_Clock.c **** * Function Name: PWM_Clock_SetDividerRegister
 172:Generated_Source\PSoC5/PWM_Clock.c **** ********************************************************************************
 173:Generated_Source\PSoC5/PWM_Clock.c **** *
 174:Generated_Source\PSoC5/PWM_Clock.c **** * Summary:
 175:Generated_Source\PSoC5/PWM_Clock.c **** *  Modifies the clock divider and, thus, the frequency. When the clock divider
 176:Generated_Source\PSoC5/PWM_Clock.c **** *  register is set to zero or changed from zero, the clock will be temporarily
 177:Generated_Source\PSoC5/PWM_Clock.c **** *  disabled in order to change the SSS mode bit. If the clock is enabled when
 178:Generated_Source\PSoC5/PWM_Clock.c **** *  SetDividerRegister is called, then the source clock must be running.
 179:Generated_Source\PSoC5/PWM_Clock.c **** *
 180:Generated_Source\PSoC5/PWM_Clock.c **** * Parameters:
 181:Generated_Source\PSoC5/PWM_Clock.c **** *  clkDivider:  Divider register value (0-65,535). This value is NOT the
 182:Generated_Source\PSoC5/PWM_Clock.c **** *    divider; the clock hardware divides by clkDivider plus one. For example,
 183:Generated_Source\PSoC5/PWM_Clock.c **** *    to divide the clock by 2, this parameter should be set to 1.
 184:Generated_Source\PSoC5/PWM_Clock.c **** *  restart:  If nonzero, restarts the clock divider: the current clock cycle
 185:Generated_Source\PSoC5/PWM_Clock.c **** *   will be truncated and the new divide value will take effect immediately. If
 186:Generated_Source\PSoC5/PWM_Clock.c **** *   zero, the new divide value will take effect at the end of the current clock
 187:Generated_Source\PSoC5/PWM_Clock.c **** *   cycle.
 188:Generated_Source\PSoC5/PWM_Clock.c **** *
 189:Generated_Source\PSoC5/PWM_Clock.c **** * Returns:
 190:Generated_Source\PSoC5/PWM_Clock.c **** *  None
 191:Generated_Source\PSoC5/PWM_Clock.c **** *
 192:Generated_Source\PSoC5/PWM_Clock.c **** *******************************************************************************/
 193:Generated_Source\PSoC5/PWM_Clock.c **** void PWM_Clock_SetDividerRegister(uint16 clkDivider, uint8 restart)
 194:Generated_Source\PSoC5/PWM_Clock.c ****                                 
 195:Generated_Source\PSoC5/PWM_Clock.c **** {
 309              		.loc 1 195 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 16
 312              		@ frame_needed = 1, uses_anonymous_args = 0
 313 0000 80B5     		push	{r7, lr}
 314              		.cfi_def_cfa_offset 8
 315              		.cfi_offset 7, -8
 316              		.cfi_offset 14, -4
 317 0002 84B0     		sub	sp, sp, #16
 318              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 10


 319 0004 00AF     		add	r7, sp, #0
 320              		.cfi_def_cfa_register 7
 321 0006 0346     		mov	r3, r0
 322 0008 0A46     		mov	r2, r1
 323 000a FB80     		strh	r3, [r7, #6]	@ movhi
 324 000c 1346     		mov	r3, r2
 325 000e 7B71     		strb	r3, [r7, #5]
 196:Generated_Source\PSoC5/PWM_Clock.c ****     uint8 enabled;
 197:Generated_Source\PSoC5/PWM_Clock.c **** 
 198:Generated_Source\PSoC5/PWM_Clock.c ****     uint8 currSrc = PWM_Clock_GetSourceRegister();
 326              		.loc 1 198 0
 327 0010 FFF7FEFF 		bl	PWM_Clock_GetSourceRegister
 328 0014 0346     		mov	r3, r0
 329 0016 FB73     		strb	r3, [r7, #15]
 199:Generated_Source\PSoC5/PWM_Clock.c ****     uint16 oldDivider = PWM_Clock_GetDividerRegister();
 330              		.loc 1 199 0
 331 0018 FFF7FEFF 		bl	PWM_Clock_GetDividerRegister
 332 001c 0346     		mov	r3, r0
 333 001e BB81     		strh	r3, [r7, #12]	@ movhi
 200:Generated_Source\PSoC5/PWM_Clock.c **** 
 201:Generated_Source\PSoC5/PWM_Clock.c ****     if (clkDivider != oldDivider)
 334              		.loc 1 201 0
 335 0020 FA88     		ldrh	r2, [r7, #6]
 336 0022 BB89     		ldrh	r3, [r7, #12]
 337 0024 9A42     		cmp	r2, r3
 338 0026 00F08780 		beq	.L17
 202:Generated_Source\PSoC5/PWM_Clock.c ****     {
 203:Generated_Source\PSoC5/PWM_Clock.c ****         enabled = PWM_Clock_CLKEN & PWM_Clock_CLKEN_MASK;
 339              		.loc 1 203 0
 340 002a 454B     		ldr	r3, .L30
 341 002c 1B78     		ldrb	r3, [r3]
 342 002e DBB2     		uxtb	r3, r3
 343 0030 03F00403 		and	r3, r3, #4
 344 0034 FB72     		strb	r3, [r7, #11]
 204:Generated_Source\PSoC5/PWM_Clock.c **** 
 205:Generated_Source\PSoC5/PWM_Clock.c ****         if ((currSrc == (uint8)CYCLK_SRC_SEL_CLK_SYNC_D) && ((oldDivider == 0u) || (clkDivider == 0
 345              		.loc 1 205 0
 346 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 347 0038 002B     		cmp	r3, #0
 348 003a 20D1     		bne	.L19
 349              		.loc 1 205 0 is_stmt 0 discriminator 1
 350 003c BB89     		ldrh	r3, [r7, #12]
 351 003e 002B     		cmp	r3, #0
 352 0040 02D0     		beq	.L20
 353              		.loc 1 205 0 discriminator 2
 354 0042 FB88     		ldrh	r3, [r7, #6]
 355 0044 002B     		cmp	r3, #0
 356 0046 1AD1     		bne	.L19
 357              	.L20:
 206:Generated_Source\PSoC5/PWM_Clock.c ****         {
 207:Generated_Source\PSoC5/PWM_Clock.c ****             /* Moving to/from SSS requires correct ordering to prevent halting the clock    */
 208:Generated_Source\PSoC5/PWM_Clock.c ****             if (oldDivider == 0u)
 358              		.loc 1 208 0 is_stmt 1
 359 0048 BB89     		ldrh	r3, [r7, #12]
 360 004a 002B     		cmp	r3, #0
 361 004c 0BD1     		bne	.L21
 209:Generated_Source\PSoC5/PWM_Clock.c ****             {
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 11


 210:Generated_Source\PSoC5/PWM_Clock.c ****                 /* Moving away from SSS, set the divider first so when SSS is cleared we    */
 211:Generated_Source\PSoC5/PWM_Clock.c ****                 /* don't halt the clock.  Using the shadow load isn't required as the       */
 212:Generated_Source\PSoC5/PWM_Clock.c ****                 /* divider is ignored while SSS is set.                                     */
 213:Generated_Source\PSoC5/PWM_Clock.c ****                 CY_SET_REG16(PWM_Clock_DIV_PTR, clkDivider);
 362              		.loc 1 213 0
 363 004e 3D4A     		ldr	r2, .L30+4
 364 0050 FB88     		ldrh	r3, [r7, #6]	@ movhi
 365 0052 1380     		strh	r3, [r2]	@ movhi
 214:Generated_Source\PSoC5/PWM_Clock.c ****                 PWM_Clock_MOD_SRC &= (uint8)(~CYCLK_SSS);
 366              		.loc 1 214 0
 367 0054 3C4A     		ldr	r2, .L30+8
 368 0056 3C4B     		ldr	r3, .L30+8
 369 0058 1B78     		ldrb	r3, [r3]
 370 005a DBB2     		uxtb	r3, r3
 371 005c 23F04003 		bic	r3, r3, #64
 372 0060 DBB2     		uxtb	r3, r3
 373 0062 1370     		strb	r3, [r2]
 208:Generated_Source\PSoC5/PWM_Clock.c ****             {
 374              		.loc 1 208 0
 375 0064 68E0     		b	.L17
 376              	.L21:
 215:Generated_Source\PSoC5/PWM_Clock.c ****             }
 216:Generated_Source\PSoC5/PWM_Clock.c ****             else
 217:Generated_Source\PSoC5/PWM_Clock.c ****             {
 218:Generated_Source\PSoC5/PWM_Clock.c ****                 /* Moving to SSS, set SSS which then ignores the divider and we can set     */
 219:Generated_Source\PSoC5/PWM_Clock.c ****                 /* it without bothering with the shadow load.                               */
 220:Generated_Source\PSoC5/PWM_Clock.c ****                 PWM_Clock_MOD_SRC |= CYCLK_SSS;
 377              		.loc 1 220 0
 378 0066 384A     		ldr	r2, .L30+8
 379 0068 374B     		ldr	r3, .L30+8
 380 006a 1B78     		ldrb	r3, [r3]
 381 006c DBB2     		uxtb	r3, r3
 382 006e 43F04003 		orr	r3, r3, #64
 383 0072 DBB2     		uxtb	r3, r3
 384 0074 1370     		strb	r3, [r2]
 221:Generated_Source\PSoC5/PWM_Clock.c ****                 CY_SET_REG16(PWM_Clock_DIV_PTR, clkDivider);
 385              		.loc 1 221 0
 386 0076 334A     		ldr	r2, .L30+4
 387 0078 FB88     		ldrh	r3, [r7, #6]	@ movhi
 388 007a 1380     		strh	r3, [r2]	@ movhi
 208:Generated_Source\PSoC5/PWM_Clock.c ****             {
 389              		.loc 1 208 0
 390 007c 5CE0     		b	.L17
 391              	.L19:
 222:Generated_Source\PSoC5/PWM_Clock.c ****             }
 223:Generated_Source\PSoC5/PWM_Clock.c ****         }
 224:Generated_Source\PSoC5/PWM_Clock.c ****         else
 225:Generated_Source\PSoC5/PWM_Clock.c ****         {
 226:Generated_Source\PSoC5/PWM_Clock.c **** 			
 227:Generated_Source\PSoC5/PWM_Clock.c ****             if (enabled != 0u)
 392              		.loc 1 227 0
 393 007e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 394 0080 002B     		cmp	r3, #0
 395 0082 33D0     		beq	.L23
 228:Generated_Source\PSoC5/PWM_Clock.c ****             {
 229:Generated_Source\PSoC5/PWM_Clock.c ****                 CLK_DIST_LD = 0x00u;
 396              		.loc 1 229 0
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 12


 397 0084 314B     		ldr	r3, .L30+12
 398 0086 0022     		movs	r2, #0
 399 0088 1A70     		strb	r2, [r3]
 230:Generated_Source\PSoC5/PWM_Clock.c **** 
 231:Generated_Source\PSoC5/PWM_Clock.c ****                 /* Clear all the mask bits except ours. */
 232:Generated_Source\PSoC5/PWM_Clock.c **** #if defined(PWM_Clock__CFG3)
 233:Generated_Source\PSoC5/PWM_Clock.c ****                 CLK_DIST_AMASK = PWM_Clock_CLKEN_MASK;
 234:Generated_Source\PSoC5/PWM_Clock.c ****                 CLK_DIST_DMASK = 0x00u;
 235:Generated_Source\PSoC5/PWM_Clock.c **** #else
 236:Generated_Source\PSoC5/PWM_Clock.c ****                 CLK_DIST_DMASK = PWM_Clock_CLKEN_MASK;
 400              		.loc 1 236 0
 401 008a 314B     		ldr	r3, .L30+16
 402 008c 0422     		movs	r2, #4
 403 008e 1A70     		strb	r2, [r3]
 237:Generated_Source\PSoC5/PWM_Clock.c ****                 CLK_DIST_AMASK = 0x00u;
 404              		.loc 1 237 0
 405 0090 304B     		ldr	r3, .L30+20
 406 0092 0022     		movs	r2, #0
 407 0094 1A70     		strb	r2, [r3]
 238:Generated_Source\PSoC5/PWM_Clock.c **** #endif /* PWM_Clock__CFG3 */
 239:Generated_Source\PSoC5/PWM_Clock.c ****                 /* Clear mask of bus clock. */
 240:Generated_Source\PSoC5/PWM_Clock.c ****                 CLK_DIST_BCFG2 &= (uint8)(~BCFG2_MASK);
 408              		.loc 1 240 0
 409 0096 304A     		ldr	r2, .L30+24
 410 0098 2F4B     		ldr	r3, .L30+24
 411 009a 1B78     		ldrb	r3, [r3]
 412 009c DBB2     		uxtb	r3, r3
 413 009e 03F07F03 		and	r3, r3, #127
 414 00a2 DBB2     		uxtb	r3, r3
 415 00a4 1370     		strb	r3, [r2]
 241:Generated_Source\PSoC5/PWM_Clock.c **** 
 242:Generated_Source\PSoC5/PWM_Clock.c ****                 /* If clock is currently enabled, disable it if async or going from N-to-1*/
 243:Generated_Source\PSoC5/PWM_Clock.c ****                 if (((PWM_Clock_MOD_SRC & CYCLK_SYNC) == 0u) || (clkDivider == 0u))
 416              		.loc 1 243 0
 417 00a6 284B     		ldr	r3, .L30+8
 418 00a8 1B78     		ldrb	r3, [r3]
 419 00aa DBB2     		uxtb	r3, r3
 420 00ac 03F00803 		and	r3, r3, #8
 421 00b0 002B     		cmp	r3, #0
 422 00b2 02D0     		beq	.L24
 423              		.loc 1 243 0 is_stmt 0 discriminator 1
 424 00b4 FB88     		ldrh	r3, [r7, #6]
 425 00b6 002B     		cmp	r3, #0
 426 00b8 18D1     		bne	.L23
 427              	.L24:
 244:Generated_Source\PSoC5/PWM_Clock.c ****                 {
 245:Generated_Source\PSoC5/PWM_Clock.c **** #if HAS_CLKDIST_LD_DISABLE
 246:Generated_Source\PSoC5/PWM_Clock.c ****                     CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 428              		.loc 1 246 0 is_stmt 1
 429 00ba 284A     		ldr	r2, .L30+28
 430 00bc BB89     		ldrh	r3, [r7, #12]	@ movhi
 431 00be 1380     		strh	r3, [r2]	@ movhi
 247:Generated_Source\PSoC5/PWM_Clock.c ****                     CLK_DIST_LD = CYCLK_LD_DISABLE|CYCLK_LD_SYNC_EN|CYCLK_LD_LOAD;
 432              		.loc 1 247 0
 433 00c0 224B     		ldr	r3, .L30+12
 434 00c2 0722     		movs	r2, #7
 435 00c4 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 13


 248:Generated_Source\PSoC5/PWM_Clock.c **** 
 249:Generated_Source\PSoC5/PWM_Clock.c ****                     /* Wait for clock to be disabled */
 250:Generated_Source\PSoC5/PWM_Clock.c ****                     while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 436              		.loc 1 250 0
 437 00c6 00BF     		nop
 438              	.L25:
 439              		.loc 1 250 0 is_stmt 0 discriminator 1
 440 00c8 204B     		ldr	r3, .L30+12
 441 00ca 1B78     		ldrb	r3, [r3]
 442 00cc DBB2     		uxtb	r3, r3
 443 00ce 03F00103 		and	r3, r3, #1
 444 00d2 002B     		cmp	r3, #0
 445 00d4 F8D1     		bne	.L25
 251:Generated_Source\PSoC5/PWM_Clock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 252:Generated_Source\PSoC5/PWM_Clock.c **** 
 253:Generated_Source\PSoC5/PWM_Clock.c ****                     PWM_Clock_CLKEN &= (uint8)(~PWM_Clock_CLKEN_MASK);
 446              		.loc 1 253 0 is_stmt 1
 447 00d6 1A4A     		ldr	r2, .L30
 448 00d8 194B     		ldr	r3, .L30
 449 00da 1B78     		ldrb	r3, [r3]
 450 00dc DBB2     		uxtb	r3, r3
 451 00de 23F00403 		bic	r3, r3, #4
 452 00e2 DBB2     		uxtb	r3, r3
 453 00e4 1370     		strb	r3, [r2]
 254:Generated_Source\PSoC5/PWM_Clock.c **** 
 255:Generated_Source\PSoC5/PWM_Clock.c **** #if HAS_CLKDIST_LD_DISABLE
 256:Generated_Source\PSoC5/PWM_Clock.c ****                     /* Clear the disable bit */
 257:Generated_Source\PSoC5/PWM_Clock.c ****                     CLK_DIST_LD = 0x00u;
 454              		.loc 1 257 0
 455 00e6 194B     		ldr	r3, .L30+12
 456 00e8 0022     		movs	r2, #0
 457 00ea 1A70     		strb	r2, [r3]
 458              	.L23:
 258:Generated_Source\PSoC5/PWM_Clock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 259:Generated_Source\PSoC5/PWM_Clock.c ****                 }
 260:Generated_Source\PSoC5/PWM_Clock.c ****             }
 261:Generated_Source\PSoC5/PWM_Clock.c **** 
 262:Generated_Source\PSoC5/PWM_Clock.c ****             /* Load divide value. */
 263:Generated_Source\PSoC5/PWM_Clock.c ****             if ((PWM_Clock_CLKEN & PWM_Clock_CLKEN_MASK) != 0u)
 459              		.loc 1 263 0
 460 00ec 144B     		ldr	r3, .L30
 461 00ee 1B78     		ldrb	r3, [r3]
 462 00f0 DBB2     		uxtb	r3, r3
 463 00f2 03F00403 		and	r3, r3, #4
 464 00f6 002B     		cmp	r3, #0
 465 00f8 13D0     		beq	.L26
 264:Generated_Source\PSoC5/PWM_Clock.c ****             {
 265:Generated_Source\PSoC5/PWM_Clock.c ****                 /* If the clock is still enabled, use the shadow registers */
 266:Generated_Source\PSoC5/PWM_Clock.c ****                 CY_SET_REG16(CYREG_CLKDIST_WRK0, clkDivider);
 466              		.loc 1 266 0
 467 00fa 184A     		ldr	r2, .L30+28
 468 00fc FB88     		ldrh	r3, [r7, #6]	@ movhi
 469 00fe 1380     		strh	r3, [r2]	@ movhi
 267:Generated_Source\PSoC5/PWM_Clock.c **** 
 268:Generated_Source\PSoC5/PWM_Clock.c ****                 CLK_DIST_LD = (CYCLK_LD_LOAD | ((restart != 0u) ? CYCLK_LD_SYNC_EN : 0x00u));
 470              		.loc 1 268 0
 471 0100 124A     		ldr	r2, .L30+12
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 14


 472 0102 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 473 0104 002B     		cmp	r3, #0
 474 0106 01D0     		beq	.L27
 475              		.loc 1 268 0 is_stmt 0 discriminator 1
 476 0108 0323     		movs	r3, #3
 477 010a 00E0     		b	.L28
 478              	.L27:
 479              		.loc 1 268 0 discriminator 2
 480 010c 0123     		movs	r3, #1
 481              	.L28:
 482              		.loc 1 268 0 discriminator 4
 483 010e 1370     		strb	r3, [r2]
 269:Generated_Source\PSoC5/PWM_Clock.c ****                 while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 484              		.loc 1 269 0 is_stmt 1 discriminator 4
 485 0110 00BF     		nop
 486              	.L29:
 487              		.loc 1 269 0 is_stmt 0 discriminator 1
 488 0112 0E4B     		ldr	r3, .L30+12
 489 0114 1B78     		ldrb	r3, [r3]
 490 0116 DBB2     		uxtb	r3, r3
 491 0118 03F00103 		and	r3, r3, #1
 492 011c 002B     		cmp	r3, #0
 493 011e F8D1     		bne	.L29
 494 0120 0AE0     		b	.L17
 495              	.L26:
 270:Generated_Source\PSoC5/PWM_Clock.c ****             }
 271:Generated_Source\PSoC5/PWM_Clock.c ****             else
 272:Generated_Source\PSoC5/PWM_Clock.c ****             {
 273:Generated_Source\PSoC5/PWM_Clock.c ****                 /* If the clock is disabled, set the divider directly */
 274:Generated_Source\PSoC5/PWM_Clock.c ****                 CY_SET_REG16(PWM_Clock_DIV_PTR, clkDivider);
 496              		.loc 1 274 0 is_stmt 1
 497 0122 084A     		ldr	r2, .L30+4
 498 0124 FB88     		ldrh	r3, [r7, #6]	@ movhi
 499 0126 1380     		strh	r3, [r2]	@ movhi
 275:Generated_Source\PSoC5/PWM_Clock.c **** 				PWM_Clock_CLKEN |= enabled;
 500              		.loc 1 275 0
 501 0128 0549     		ldr	r1, .L30
 502 012a 054B     		ldr	r3, .L30
 503 012c 1B78     		ldrb	r3, [r3]
 504 012e DAB2     		uxtb	r2, r3
 505 0130 FB7A     		ldrb	r3, [r7, #11]
 506 0132 1343     		orrs	r3, r3, r2
 507 0134 DBB2     		uxtb	r3, r3
 508 0136 0B70     		strb	r3, [r1]
 509              	.L17:
 276:Generated_Source\PSoC5/PWM_Clock.c ****             }
 277:Generated_Source\PSoC5/PWM_Clock.c ****         }
 278:Generated_Source\PSoC5/PWM_Clock.c ****     }
 279:Generated_Source\PSoC5/PWM_Clock.c **** }
 510              		.loc 1 279 0
 511 0138 1037     		adds	r7, r7, #16
 512              		.cfi_def_cfa_offset 8
 513 013a BD46     		mov	sp, r7
 514              		.cfi_def_cfa_register 13
 515              		@ sp needed
 516 013c 80BD     		pop	{r7, pc}
 517              	.L31:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 15


 518 013e 00BF     		.align	2
 519              	.L30:
 520 0140 A2430040 		.word	1073759138
 521 0144 88400040 		.word	1073758344
 522 0148 8A400040 		.word	1073758346
 523 014c 01400040 		.word	1073758209
 524 0150 10400040 		.word	1073758224
 525 0154 14400040 		.word	1073758228
 526 0158 08400040 		.word	1073758216
 527 015c 02400040 		.word	1073758210
 528              		.cfi_endproc
 529              	.LFE4:
 530              		.size	PWM_Clock_SetDividerRegister, .-PWM_Clock_SetDividerRegister
 531              		.section	.text.PWM_Clock_GetDividerRegister,"ax",%progbits
 532              		.align	2
 533              		.global	PWM_Clock_GetDividerRegister
 534              		.thumb
 535              		.thumb_func
 536              		.type	PWM_Clock_GetDividerRegister, %function
 537              	PWM_Clock_GetDividerRegister:
 538              	.LFB5:
 280:Generated_Source\PSoC5/PWM_Clock.c **** 
 281:Generated_Source\PSoC5/PWM_Clock.c **** 
 282:Generated_Source\PSoC5/PWM_Clock.c **** /*******************************************************************************
 283:Generated_Source\PSoC5/PWM_Clock.c **** * Function Name: PWM_Clock_GetDividerRegister
 284:Generated_Source\PSoC5/PWM_Clock.c **** ********************************************************************************
 285:Generated_Source\PSoC5/PWM_Clock.c **** *
 286:Generated_Source\PSoC5/PWM_Clock.c **** * Summary:
 287:Generated_Source\PSoC5/PWM_Clock.c **** *  Gets the clock divider register value.
 288:Generated_Source\PSoC5/PWM_Clock.c **** *
 289:Generated_Source\PSoC5/PWM_Clock.c **** * Parameters:
 290:Generated_Source\PSoC5/PWM_Clock.c **** *  None
 291:Generated_Source\PSoC5/PWM_Clock.c **** *
 292:Generated_Source\PSoC5/PWM_Clock.c **** * Returns:
 293:Generated_Source\PSoC5/PWM_Clock.c **** *  Divide value of the clock minus 1. For example, if the clock is set to
 294:Generated_Source\PSoC5/PWM_Clock.c **** *  divide by 2, the return value will be 1.
 295:Generated_Source\PSoC5/PWM_Clock.c **** *
 296:Generated_Source\PSoC5/PWM_Clock.c **** *******************************************************************************/
 297:Generated_Source\PSoC5/PWM_Clock.c **** uint16 PWM_Clock_GetDividerRegister(void) 
 298:Generated_Source\PSoC5/PWM_Clock.c **** {
 539              		.loc 1 298 0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 0
 542              		@ frame_needed = 1, uses_anonymous_args = 0
 543              		@ link register save eliminated.
 544 0000 80B4     		push	{r7}
 545              		.cfi_def_cfa_offset 4
 546              		.cfi_offset 7, -4
 547 0002 00AF     		add	r7, sp, #0
 548              		.cfi_def_cfa_register 7
 299:Generated_Source\PSoC5/PWM_Clock.c ****     return CY_GET_REG16(PWM_Clock_DIV_PTR);
 549              		.loc 1 299 0
 550 0004 034B     		ldr	r3, .L34
 551 0006 1B88     		ldrh	r3, [r3]	@ movhi
 552 0008 9BB2     		uxth	r3, r3
 300:Generated_Source\PSoC5/PWM_Clock.c **** }
 553              		.loc 1 300 0
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 16


 554 000a 1846     		mov	r0, r3
 555 000c BD46     		mov	sp, r7
 556              		.cfi_def_cfa_register 13
 557              		@ sp needed
 558 000e 5DF8047B 		ldr	r7, [sp], #4
 559              		.cfi_restore 7
 560              		.cfi_def_cfa_offset 0
 561 0012 7047     		bx	lr
 562              	.L35:
 563              		.align	2
 564              	.L34:
 565 0014 88400040 		.word	1073758344
 566              		.cfi_endproc
 567              	.LFE5:
 568              		.size	PWM_Clock_GetDividerRegister, .-PWM_Clock_GetDividerRegister
 569              		.section	.text.PWM_Clock_SetModeRegister,"ax",%progbits
 570              		.align	2
 571              		.global	PWM_Clock_SetModeRegister
 572              		.thumb
 573              		.thumb_func
 574              		.type	PWM_Clock_SetModeRegister, %function
 575              	PWM_Clock_SetModeRegister:
 576              	.LFB6:
 301:Generated_Source\PSoC5/PWM_Clock.c **** 
 302:Generated_Source\PSoC5/PWM_Clock.c **** 
 303:Generated_Source\PSoC5/PWM_Clock.c **** /*******************************************************************************
 304:Generated_Source\PSoC5/PWM_Clock.c **** * Function Name: PWM_Clock_SetModeRegister
 305:Generated_Source\PSoC5/PWM_Clock.c **** ********************************************************************************
 306:Generated_Source\PSoC5/PWM_Clock.c **** *
 307:Generated_Source\PSoC5/PWM_Clock.c **** * Summary:
 308:Generated_Source\PSoC5/PWM_Clock.c **** *  Sets flags that control the operating mode of the clock. This function only
 309:Generated_Source\PSoC5/PWM_Clock.c **** *  changes flags from 0 to 1; flags that are already 1 will remain unchanged.
 310:Generated_Source\PSoC5/PWM_Clock.c **** *  To clear flags, use the ClearModeRegister function. The clock must be
 311:Generated_Source\PSoC5/PWM_Clock.c **** *  disabled before changing the mode.
 312:Generated_Source\PSoC5/PWM_Clock.c **** *
 313:Generated_Source\PSoC5/PWM_Clock.c **** * Parameters:
 314:Generated_Source\PSoC5/PWM_Clock.c **** *  clkMode: Bit mask containing the bits to set. For PSoC 3 and PSoC 5,
 315:Generated_Source\PSoC5/PWM_Clock.c **** *   clkMode should be a set of the following optional bits or'ed together.
 316:Generated_Source\PSoC5/PWM_Clock.c **** *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 317:Generated_Source\PSoC5/PWM_Clock.c **** *                 occur when the divider count reaches half of the divide
 318:Generated_Source\PSoC5/PWM_Clock.c **** *                 value.
 319:Generated_Source\PSoC5/PWM_Clock.c **** *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 320:Generated_Source\PSoC5/PWM_Clock.c **** *                 is asserted for approximately half of its period. When
 321:Generated_Source\PSoC5/PWM_Clock.c **** *                 disabled, the output clock is asserted for one period of the
 322:Generated_Source\PSoC5/PWM_Clock.c **** *                 source clock.
 323:Generated_Source\PSoC5/PWM_Clock.c **** *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 324:Generated_Source\PSoC5/PWM_Clock.c **** *                 be enabled for all synchronous clocks.
 325:Generated_Source\PSoC5/PWM_Clock.c **** *   See the Technical Reference Manual for details about setting the mode of
 326:Generated_Source\PSoC5/PWM_Clock.c **** *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 327:Generated_Source\PSoC5/PWM_Clock.c **** *
 328:Generated_Source\PSoC5/PWM_Clock.c **** * Returns:
 329:Generated_Source\PSoC5/PWM_Clock.c **** *  None
 330:Generated_Source\PSoC5/PWM_Clock.c **** *
 331:Generated_Source\PSoC5/PWM_Clock.c **** *******************************************************************************/
 332:Generated_Source\PSoC5/PWM_Clock.c **** void PWM_Clock_SetModeRegister(uint8 modeBitMask) 
 333:Generated_Source\PSoC5/PWM_Clock.c **** {
 577              		.loc 1 333 0
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 17


 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 8
 580              		@ frame_needed = 1, uses_anonymous_args = 0
 581              		@ link register save eliminated.
 582 0000 80B4     		push	{r7}
 583              		.cfi_def_cfa_offset 4
 584              		.cfi_offset 7, -4
 585 0002 83B0     		sub	sp, sp, #12
 586              		.cfi_def_cfa_offset 16
 587 0004 00AF     		add	r7, sp, #0
 588              		.cfi_def_cfa_register 7
 589 0006 0346     		mov	r3, r0
 590 0008 FB71     		strb	r3, [r7, #7]
 334:Generated_Source\PSoC5/PWM_Clock.c ****     PWM_Clock_MOD_SRC |= modeBitMask & (uint8)PWM_Clock_MODE_MASK;
 591              		.loc 1 334 0
 592 000a 094B     		ldr	r3, .L37
 593 000c 084A     		ldr	r2, .L37
 594 000e 1278     		ldrb	r2, [r2]
 595 0010 D2B2     		uxtb	r2, r2
 596 0012 D1B2     		uxtb	r1, r2
 597 0014 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 598 0016 22F00702 		bic	r2, r2, #7
 599 001a D2B2     		uxtb	r2, r2
 600 001c 0A43     		orrs	r2, r2, r1
 601 001e D2B2     		uxtb	r2, r2
 602 0020 D2B2     		uxtb	r2, r2
 603 0022 1A70     		strb	r2, [r3]
 335:Generated_Source\PSoC5/PWM_Clock.c **** }
 604              		.loc 1 335 0
 605 0024 0C37     		adds	r7, r7, #12
 606              		.cfi_def_cfa_offset 4
 607 0026 BD46     		mov	sp, r7
 608              		.cfi_def_cfa_register 13
 609              		@ sp needed
 610 0028 5DF8047B 		ldr	r7, [sp], #4
 611              		.cfi_restore 7
 612              		.cfi_def_cfa_offset 0
 613 002c 7047     		bx	lr
 614              	.L38:
 615 002e 00BF     		.align	2
 616              	.L37:
 617 0030 8A400040 		.word	1073758346
 618              		.cfi_endproc
 619              	.LFE6:
 620              		.size	PWM_Clock_SetModeRegister, .-PWM_Clock_SetModeRegister
 621              		.section	.text.PWM_Clock_ClearModeRegister,"ax",%progbits
 622              		.align	2
 623              		.global	PWM_Clock_ClearModeRegister
 624              		.thumb
 625              		.thumb_func
 626              		.type	PWM_Clock_ClearModeRegister, %function
 627              	PWM_Clock_ClearModeRegister:
 628              	.LFB7:
 336:Generated_Source\PSoC5/PWM_Clock.c **** 
 337:Generated_Source\PSoC5/PWM_Clock.c **** 
 338:Generated_Source\PSoC5/PWM_Clock.c **** /*******************************************************************************
 339:Generated_Source\PSoC5/PWM_Clock.c **** * Function Name: PWM_Clock_ClearModeRegister
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 18


 340:Generated_Source\PSoC5/PWM_Clock.c **** ********************************************************************************
 341:Generated_Source\PSoC5/PWM_Clock.c **** *
 342:Generated_Source\PSoC5/PWM_Clock.c **** * Summary:
 343:Generated_Source\PSoC5/PWM_Clock.c **** *  Clears flags that control the operating mode of the clock. This function
 344:Generated_Source\PSoC5/PWM_Clock.c **** *  only changes flags from 1 to 0; flags that are already 0 will remain
 345:Generated_Source\PSoC5/PWM_Clock.c **** *  unchanged. To set flags, use the SetModeRegister function. The clock must be
 346:Generated_Source\PSoC5/PWM_Clock.c **** *  disabled before changing the mode.
 347:Generated_Source\PSoC5/PWM_Clock.c **** *
 348:Generated_Source\PSoC5/PWM_Clock.c **** * Parameters:
 349:Generated_Source\PSoC5/PWM_Clock.c **** *  clkMode: Bit mask containing the bits to clear. For PSoC 3 and PSoC 5,
 350:Generated_Source\PSoC5/PWM_Clock.c **** *   clkMode should be a set of the following optional bits or'ed together.
 351:Generated_Source\PSoC5/PWM_Clock.c **** *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 352:Generated_Source\PSoC5/PWM_Clock.c **** *                 occur when the divider count reaches half of the divide
 353:Generated_Source\PSoC5/PWM_Clock.c **** *                 value.
 354:Generated_Source\PSoC5/PWM_Clock.c **** *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 355:Generated_Source\PSoC5/PWM_Clock.c **** *                 is asserted for approximately half of its period. When
 356:Generated_Source\PSoC5/PWM_Clock.c **** *                 disabled, the output clock is asserted for one period of the
 357:Generated_Source\PSoC5/PWM_Clock.c **** *                 source clock.
 358:Generated_Source\PSoC5/PWM_Clock.c **** *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 359:Generated_Source\PSoC5/PWM_Clock.c **** *                 be enabled for all synchronous clocks.
 360:Generated_Source\PSoC5/PWM_Clock.c **** *   See the Technical Reference Manual for details about setting the mode of
 361:Generated_Source\PSoC5/PWM_Clock.c **** *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 362:Generated_Source\PSoC5/PWM_Clock.c **** *
 363:Generated_Source\PSoC5/PWM_Clock.c **** * Returns:
 364:Generated_Source\PSoC5/PWM_Clock.c **** *  None
 365:Generated_Source\PSoC5/PWM_Clock.c **** *
 366:Generated_Source\PSoC5/PWM_Clock.c **** *******************************************************************************/
 367:Generated_Source\PSoC5/PWM_Clock.c **** void PWM_Clock_ClearModeRegister(uint8 modeBitMask) 
 368:Generated_Source\PSoC5/PWM_Clock.c **** {
 629              		.loc 1 368 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 8
 632              		@ frame_needed = 1, uses_anonymous_args = 0
 633              		@ link register save eliminated.
 634 0000 80B4     		push	{r7}
 635              		.cfi_def_cfa_offset 4
 636              		.cfi_offset 7, -4
 637 0002 83B0     		sub	sp, sp, #12
 638              		.cfi_def_cfa_offset 16
 639 0004 00AF     		add	r7, sp, #0
 640              		.cfi_def_cfa_register 7
 641 0006 0346     		mov	r3, r0
 642 0008 FB71     		strb	r3, [r7, #7]
 369:Generated_Source\PSoC5/PWM_Clock.c ****     PWM_Clock_MOD_SRC &= (uint8)(~modeBitMask) | (uint8)(~(uint8)(PWM_Clock_MODE_MASK));
 643              		.loc 1 369 0
 644 000a 0949     		ldr	r1, .L40
 645 000c 084B     		ldr	r3, .L40
 646 000e 1B78     		ldrb	r3, [r3]
 647 0010 DAB2     		uxtb	r2, r3
 648 0012 FB79     		ldrb	r3, [r7, #7]
 649 0014 DB43     		mvns	r3, r3
 650 0016 DBB2     		uxtb	r3, r3
 651 0018 43F00703 		orr	r3, r3, #7
 652 001c DBB2     		uxtb	r3, r3
 653 001e 1340     		ands	r3, r3, r2
 654 0020 DBB2     		uxtb	r3, r3
 655 0022 0B70     		strb	r3, [r1]
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 19


 370:Generated_Source\PSoC5/PWM_Clock.c **** }
 656              		.loc 1 370 0
 657 0024 0C37     		adds	r7, r7, #12
 658              		.cfi_def_cfa_offset 4
 659 0026 BD46     		mov	sp, r7
 660              		.cfi_def_cfa_register 13
 661              		@ sp needed
 662 0028 5DF8047B 		ldr	r7, [sp], #4
 663              		.cfi_restore 7
 664              		.cfi_def_cfa_offset 0
 665 002c 7047     		bx	lr
 666              	.L41:
 667 002e 00BF     		.align	2
 668              	.L40:
 669 0030 8A400040 		.word	1073758346
 670              		.cfi_endproc
 671              	.LFE7:
 672              		.size	PWM_Clock_ClearModeRegister, .-PWM_Clock_ClearModeRegister
 673              		.section	.text.PWM_Clock_GetModeRegister,"ax",%progbits
 674              		.align	2
 675              		.global	PWM_Clock_GetModeRegister
 676              		.thumb
 677              		.thumb_func
 678              		.type	PWM_Clock_GetModeRegister, %function
 679              	PWM_Clock_GetModeRegister:
 680              	.LFB8:
 371:Generated_Source\PSoC5/PWM_Clock.c **** 
 372:Generated_Source\PSoC5/PWM_Clock.c **** 
 373:Generated_Source\PSoC5/PWM_Clock.c **** /*******************************************************************************
 374:Generated_Source\PSoC5/PWM_Clock.c **** * Function Name: PWM_Clock_GetModeRegister
 375:Generated_Source\PSoC5/PWM_Clock.c **** ********************************************************************************
 376:Generated_Source\PSoC5/PWM_Clock.c **** *
 377:Generated_Source\PSoC5/PWM_Clock.c **** * Summary:
 378:Generated_Source\PSoC5/PWM_Clock.c **** *  Gets the clock mode register value.
 379:Generated_Source\PSoC5/PWM_Clock.c **** *
 380:Generated_Source\PSoC5/PWM_Clock.c **** * Parameters:
 381:Generated_Source\PSoC5/PWM_Clock.c **** *  None
 382:Generated_Source\PSoC5/PWM_Clock.c **** *
 383:Generated_Source\PSoC5/PWM_Clock.c **** * Returns:
 384:Generated_Source\PSoC5/PWM_Clock.c **** *  Bit mask representing the enabled mode bits. See the SetModeRegister and
 385:Generated_Source\PSoC5/PWM_Clock.c **** *  ClearModeRegister descriptions for details about the mode bits.
 386:Generated_Source\PSoC5/PWM_Clock.c **** *
 387:Generated_Source\PSoC5/PWM_Clock.c **** *******************************************************************************/
 388:Generated_Source\PSoC5/PWM_Clock.c **** uint8 PWM_Clock_GetModeRegister(void) 
 389:Generated_Source\PSoC5/PWM_Clock.c **** {
 681              		.loc 1 389 0
 682              		.cfi_startproc
 683              		@ args = 0, pretend = 0, frame = 0
 684              		@ frame_needed = 1, uses_anonymous_args = 0
 685              		@ link register save eliminated.
 686 0000 80B4     		push	{r7}
 687              		.cfi_def_cfa_offset 4
 688              		.cfi_offset 7, -4
 689 0002 00AF     		add	r7, sp, #0
 690              		.cfi_def_cfa_register 7
 390:Generated_Source\PSoC5/PWM_Clock.c ****     return PWM_Clock_MOD_SRC & (uint8)(PWM_Clock_MODE_MASK);
 691              		.loc 1 390 0
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 20


 692 0004 054B     		ldr	r3, .L44
 693 0006 1B78     		ldrb	r3, [r3]
 694 0008 DBB2     		uxtb	r3, r3
 695 000a 23F00703 		bic	r3, r3, #7
 696 000e DBB2     		uxtb	r3, r3
 391:Generated_Source\PSoC5/PWM_Clock.c **** }
 697              		.loc 1 391 0
 698 0010 1846     		mov	r0, r3
 699 0012 BD46     		mov	sp, r7
 700              		.cfi_def_cfa_register 13
 701              		@ sp needed
 702 0014 5DF8047B 		ldr	r7, [sp], #4
 703              		.cfi_restore 7
 704              		.cfi_def_cfa_offset 0
 705 0018 7047     		bx	lr
 706              	.L45:
 707 001a 00BF     		.align	2
 708              	.L44:
 709 001c 8A400040 		.word	1073758346
 710              		.cfi_endproc
 711              	.LFE8:
 712              		.size	PWM_Clock_GetModeRegister, .-PWM_Clock_GetModeRegister
 713              		.section	.text.PWM_Clock_SetSourceRegister,"ax",%progbits
 714              		.align	2
 715              		.global	PWM_Clock_SetSourceRegister
 716              		.thumb
 717              		.thumb_func
 718              		.type	PWM_Clock_SetSourceRegister, %function
 719              	PWM_Clock_SetSourceRegister:
 720              	.LFB9:
 392:Generated_Source\PSoC5/PWM_Clock.c **** 
 393:Generated_Source\PSoC5/PWM_Clock.c **** 
 394:Generated_Source\PSoC5/PWM_Clock.c **** /*******************************************************************************
 395:Generated_Source\PSoC5/PWM_Clock.c **** * Function Name: PWM_Clock_SetSourceRegister
 396:Generated_Source\PSoC5/PWM_Clock.c **** ********************************************************************************
 397:Generated_Source\PSoC5/PWM_Clock.c **** *
 398:Generated_Source\PSoC5/PWM_Clock.c **** * Summary:
 399:Generated_Source\PSoC5/PWM_Clock.c **** *  Sets the input source of the clock. The clock must be disabled before
 400:Generated_Source\PSoC5/PWM_Clock.c **** *  changing the source. The old and new clock sources must be running.
 401:Generated_Source\PSoC5/PWM_Clock.c **** *
 402:Generated_Source\PSoC5/PWM_Clock.c **** * Parameters:
 403:Generated_Source\PSoC5/PWM_Clock.c **** *  clkSource:  For PSoC 3 and PSoC 5 devices, clkSource should be one of the
 404:Generated_Source\PSoC5/PWM_Clock.c **** *   following input sources:
 405:Generated_Source\PSoC5/PWM_Clock.c **** *   - CYCLK_SRC_SEL_SYNC_DIG
 406:Generated_Source\PSoC5/PWM_Clock.c **** *   - CYCLK_SRC_SEL_IMO
 407:Generated_Source\PSoC5/PWM_Clock.c **** *   - CYCLK_SRC_SEL_XTALM
 408:Generated_Source\PSoC5/PWM_Clock.c **** *   - CYCLK_SRC_SEL_ILO
 409:Generated_Source\PSoC5/PWM_Clock.c **** *   - CYCLK_SRC_SEL_PLL
 410:Generated_Source\PSoC5/PWM_Clock.c **** *   - CYCLK_SRC_SEL_XTALK
 411:Generated_Source\PSoC5/PWM_Clock.c **** *   - CYCLK_SRC_SEL_DSI_G
 412:Generated_Source\PSoC5/PWM_Clock.c **** *   - CYCLK_SRC_SEL_DSI_D/CYCLK_SRC_SEL_DSI_A
 413:Generated_Source\PSoC5/PWM_Clock.c **** *   See the Technical Reference Manual for details on clock sources.
 414:Generated_Source\PSoC5/PWM_Clock.c **** *
 415:Generated_Source\PSoC5/PWM_Clock.c **** * Returns:
 416:Generated_Source\PSoC5/PWM_Clock.c **** *  None
 417:Generated_Source\PSoC5/PWM_Clock.c **** *
 418:Generated_Source\PSoC5/PWM_Clock.c **** *******************************************************************************/
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 21


 419:Generated_Source\PSoC5/PWM_Clock.c **** void PWM_Clock_SetSourceRegister(uint8 clkSource) 
 420:Generated_Source\PSoC5/PWM_Clock.c **** {
 721              		.loc 1 420 0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 16
 724              		@ frame_needed = 1, uses_anonymous_args = 0
 725 0000 80B5     		push	{r7, lr}
 726              		.cfi_def_cfa_offset 8
 727              		.cfi_offset 7, -8
 728              		.cfi_offset 14, -4
 729 0002 84B0     		sub	sp, sp, #16
 730              		.cfi_def_cfa_offset 24
 731 0004 00AF     		add	r7, sp, #0
 732              		.cfi_def_cfa_register 7
 733 0006 0346     		mov	r3, r0
 734 0008 FB71     		strb	r3, [r7, #7]
 421:Generated_Source\PSoC5/PWM_Clock.c ****     uint16 currDiv = PWM_Clock_GetDividerRegister();
 735              		.loc 1 421 0
 736 000a FFF7FEFF 		bl	PWM_Clock_GetDividerRegister
 737 000e 0346     		mov	r3, r0
 738 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 422:Generated_Source\PSoC5/PWM_Clock.c ****     uint8 oldSrc = PWM_Clock_GetSourceRegister();
 739              		.loc 1 422 0
 740 0012 FFF7FEFF 		bl	PWM_Clock_GetSourceRegister
 741 0016 0346     		mov	r3, r0
 742 0018 7B73     		strb	r3, [r7, #13]
 423:Generated_Source\PSoC5/PWM_Clock.c **** 
 424:Generated_Source\PSoC5/PWM_Clock.c ****     if (((oldSrc != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 743              		.loc 1 424 0
 744 001a 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 745 001c 002B     		cmp	r3, #0
 746 001e 1BD0     		beq	.L47
 747              		.loc 1 424 0 is_stmt 0 discriminator 1
 748 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 749 0022 002B     		cmp	r3, #0
 750 0024 18D1     		bne	.L47
 425:Generated_Source\PSoC5/PWM_Clock.c ****         (clkSource == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 751              		.loc 1 425 0 is_stmt 1
 752 0026 FB89     		ldrh	r3, [r7, #14]
 753 0028 002B     		cmp	r3, #0
 754 002a 15D1     		bne	.L47
 426:Generated_Source\PSoC5/PWM_Clock.c ****     {
 427:Generated_Source\PSoC5/PWM_Clock.c ****         /* Switching to Master and divider is 1, set SSS, which will output master, */
 428:Generated_Source\PSoC5/PWM_Clock.c ****         /* then set the source so we are consistent.                                */
 429:Generated_Source\PSoC5/PWM_Clock.c ****         PWM_Clock_MOD_SRC |= CYCLK_SSS;
 755              		.loc 1 429 0
 756 002c 224A     		ldr	r2, .L50
 757 002e 224B     		ldr	r3, .L50
 758 0030 1B78     		ldrb	r3, [r3]
 759 0032 DBB2     		uxtb	r3, r3
 760 0034 43F04003 		orr	r3, r3, #64
 761 0038 DBB2     		uxtb	r3, r3
 762 003a 1370     		strb	r3, [r2]
 430:Generated_Source\PSoC5/PWM_Clock.c ****         PWM_Clock_MOD_SRC =
 763              		.loc 1 430 0
 764 003c 1E4B     		ldr	r3, .L50
 431:Generated_Source\PSoC5/PWM_Clock.c ****             (PWM_Clock_MOD_SRC & (uint8)(~PWM_Clock_SRC_SEL_MSK)) | clkSource;
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 22


 765              		.loc 1 431 0
 766 003e 1E4A     		ldr	r2, .L50
 767 0040 1278     		ldrb	r2, [r2]
 768 0042 D2B2     		uxtb	r2, r2
 430:Generated_Source\PSoC5/PWM_Clock.c ****         PWM_Clock_MOD_SRC =
 769              		.loc 1 430 0
 770 0044 D2B2     		uxtb	r2, r2
 771 0046 22F00702 		bic	r2, r2, #7
 772 004a D1B2     		uxtb	r1, r2
 773 004c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 774 004e 0A43     		orrs	r2, r2, r1
 775 0050 D2B2     		uxtb	r2, r2
 776 0052 D2B2     		uxtb	r2, r2
 777 0054 1A70     		strb	r2, [r3]
 778 0056 2BE0     		b	.L46
 779              	.L47:
 432:Generated_Source\PSoC5/PWM_Clock.c ****     }
 433:Generated_Source\PSoC5/PWM_Clock.c ****     else if (((oldSrc == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 780              		.loc 1 433 0
 781 0058 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 782 005a 002B     		cmp	r3, #0
 783 005c 1BD1     		bne	.L49
 784              		.loc 1 433 0 is_stmt 0 discriminator 1
 785 005e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 786 0060 002B     		cmp	r3, #0
 787 0062 18D0     		beq	.L49
 434:Generated_Source\PSoC5/PWM_Clock.c ****             (clkSource != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 788              		.loc 1 434 0 is_stmt 1
 789 0064 FB89     		ldrh	r3, [r7, #14]
 790 0066 002B     		cmp	r3, #0
 791 0068 15D1     		bne	.L49
 435:Generated_Source\PSoC5/PWM_Clock.c ****     {
 436:Generated_Source\PSoC5/PWM_Clock.c ****         /* Switching from Master to not and divider is 1, set source, so we don't   */
 437:Generated_Source\PSoC5/PWM_Clock.c ****         /* lock when we clear SSS.                                                  */
 438:Generated_Source\PSoC5/PWM_Clock.c ****         PWM_Clock_MOD_SRC =
 792              		.loc 1 438 0
 793 006a 134B     		ldr	r3, .L50
 439:Generated_Source\PSoC5/PWM_Clock.c ****             (PWM_Clock_MOD_SRC & (uint8)(~PWM_Clock_SRC_SEL_MSK)) | clkSource;
 794              		.loc 1 439 0
 795 006c 124A     		ldr	r2, .L50
 796 006e 1278     		ldrb	r2, [r2]
 797 0070 D2B2     		uxtb	r2, r2
 438:Generated_Source\PSoC5/PWM_Clock.c ****             (PWM_Clock_MOD_SRC & (uint8)(~PWM_Clock_SRC_SEL_MSK)) | clkSource;
 798              		.loc 1 438 0
 799 0072 D2B2     		uxtb	r2, r2
 800 0074 22F00702 		bic	r2, r2, #7
 801 0078 D1B2     		uxtb	r1, r2
 802 007a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 803 007c 0A43     		orrs	r2, r2, r1
 804 007e D2B2     		uxtb	r2, r2
 805 0080 D2B2     		uxtb	r2, r2
 806 0082 1A70     		strb	r2, [r3]
 440:Generated_Source\PSoC5/PWM_Clock.c ****         PWM_Clock_MOD_SRC &= (uint8)(~CYCLK_SSS);
 807              		.loc 1 440 0
 808 0084 0C4A     		ldr	r2, .L50
 809 0086 0C4B     		ldr	r3, .L50
 810 0088 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 23


 811 008a DBB2     		uxtb	r3, r3
 812 008c 23F04003 		bic	r3, r3, #64
 813 0090 DBB2     		uxtb	r3, r3
 814 0092 1370     		strb	r3, [r2]
 815 0094 0CE0     		b	.L46
 816              	.L49:
 441:Generated_Source\PSoC5/PWM_Clock.c ****     }
 442:Generated_Source\PSoC5/PWM_Clock.c ****     else
 443:Generated_Source\PSoC5/PWM_Clock.c ****     {
 444:Generated_Source\PSoC5/PWM_Clock.c ****         PWM_Clock_MOD_SRC =
 817              		.loc 1 444 0
 818 0096 084B     		ldr	r3, .L50
 445:Generated_Source\PSoC5/PWM_Clock.c ****             (PWM_Clock_MOD_SRC & (uint8)(~PWM_Clock_SRC_SEL_MSK)) | clkSource;
 819              		.loc 1 445 0
 820 0098 074A     		ldr	r2, .L50
 821 009a 1278     		ldrb	r2, [r2]
 822 009c D2B2     		uxtb	r2, r2
 444:Generated_Source\PSoC5/PWM_Clock.c ****             (PWM_Clock_MOD_SRC & (uint8)(~PWM_Clock_SRC_SEL_MSK)) | clkSource;
 823              		.loc 1 444 0
 824 009e D2B2     		uxtb	r2, r2
 825 00a0 22F00702 		bic	r2, r2, #7
 826 00a4 D1B2     		uxtb	r1, r2
 827 00a6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 828 00a8 0A43     		orrs	r2, r2, r1
 829 00aa D2B2     		uxtb	r2, r2
 830 00ac D2B2     		uxtb	r2, r2
 831 00ae 1A70     		strb	r2, [r3]
 832              	.L46:
 446:Generated_Source\PSoC5/PWM_Clock.c ****     }
 447:Generated_Source\PSoC5/PWM_Clock.c **** }
 833              		.loc 1 447 0
 834 00b0 1037     		adds	r7, r7, #16
 835              		.cfi_def_cfa_offset 8
 836 00b2 BD46     		mov	sp, r7
 837              		.cfi_def_cfa_register 13
 838              		@ sp needed
 839 00b4 80BD     		pop	{r7, pc}
 840              	.L51:
 841 00b6 00BF     		.align	2
 842              	.L50:
 843 00b8 8A400040 		.word	1073758346
 844              		.cfi_endproc
 845              	.LFE9:
 846              		.size	PWM_Clock_SetSourceRegister, .-PWM_Clock_SetSourceRegister
 847              		.section	.text.PWM_Clock_GetSourceRegister,"ax",%progbits
 848              		.align	2
 849              		.global	PWM_Clock_GetSourceRegister
 850              		.thumb
 851              		.thumb_func
 852              		.type	PWM_Clock_GetSourceRegister, %function
 853              	PWM_Clock_GetSourceRegister:
 854              	.LFB10:
 448:Generated_Source\PSoC5/PWM_Clock.c **** 
 449:Generated_Source\PSoC5/PWM_Clock.c **** 
 450:Generated_Source\PSoC5/PWM_Clock.c **** /*******************************************************************************
 451:Generated_Source\PSoC5/PWM_Clock.c **** * Function Name: PWM_Clock_GetSourceRegister
 452:Generated_Source\PSoC5/PWM_Clock.c **** ********************************************************************************
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 24


 453:Generated_Source\PSoC5/PWM_Clock.c **** *
 454:Generated_Source\PSoC5/PWM_Clock.c **** * Summary:
 455:Generated_Source\PSoC5/PWM_Clock.c **** *  Gets the input source of the clock.
 456:Generated_Source\PSoC5/PWM_Clock.c **** *
 457:Generated_Source\PSoC5/PWM_Clock.c **** * Parameters:
 458:Generated_Source\PSoC5/PWM_Clock.c **** *  None
 459:Generated_Source\PSoC5/PWM_Clock.c **** *
 460:Generated_Source\PSoC5/PWM_Clock.c **** * Returns:
 461:Generated_Source\PSoC5/PWM_Clock.c **** *  The input source of the clock. See SetSourceRegister for details.
 462:Generated_Source\PSoC5/PWM_Clock.c **** *
 463:Generated_Source\PSoC5/PWM_Clock.c **** *******************************************************************************/
 464:Generated_Source\PSoC5/PWM_Clock.c **** uint8 PWM_Clock_GetSourceRegister(void) 
 465:Generated_Source\PSoC5/PWM_Clock.c **** {
 855              		.loc 1 465 0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 0
 858              		@ frame_needed = 1, uses_anonymous_args = 0
 859              		@ link register save eliminated.
 860 0000 80B4     		push	{r7}
 861              		.cfi_def_cfa_offset 4
 862              		.cfi_offset 7, -4
 863 0002 00AF     		add	r7, sp, #0
 864              		.cfi_def_cfa_register 7
 466:Generated_Source\PSoC5/PWM_Clock.c ****     return PWM_Clock_MOD_SRC & PWM_Clock_SRC_SEL_MSK;
 865              		.loc 1 466 0
 866 0004 054B     		ldr	r3, .L54
 867 0006 1B78     		ldrb	r3, [r3]
 868 0008 DBB2     		uxtb	r3, r3
 869 000a 03F00703 		and	r3, r3, #7
 870 000e DBB2     		uxtb	r3, r3
 467:Generated_Source\PSoC5/PWM_Clock.c **** }
 871              		.loc 1 467 0
 872 0010 1846     		mov	r0, r3
 873 0012 BD46     		mov	sp, r7
 874              		.cfi_def_cfa_register 13
 875              		@ sp needed
 876 0014 5DF8047B 		ldr	r7, [sp], #4
 877              		.cfi_restore 7
 878              		.cfi_def_cfa_offset 0
 879 0018 7047     		bx	lr
 880              	.L55:
 881 001a 00BF     		.align	2
 882              	.L54:
 883 001c 8A400040 		.word	1073758346
 884              		.cfi_endproc
 885              	.LFE10:
 886              		.size	PWM_Clock_GetSourceRegister, .-PWM_Clock_GetSourceRegister
 887              		.text
 888              	.Letext0:
 889              		.file 2 "Generated_Source\\PSoC5/cytypes.h"
 890              		.section	.debug_info,"",%progbits
 891              	.Ldebug_info0:
 892 0000 59020000 		.4byte	0x259
 893 0004 0400     		.2byte	0x4
 894 0006 00000000 		.4byte	.Ldebug_abbrev0
 895 000a 04       		.byte	0x4
 896 000b 01       		.uleb128 0x1
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 25


 897 000c F8000000 		.4byte	.LASF37
 898 0010 01       		.byte	0x1
 899 0011 E5020000 		.4byte	.LASF38
 900 0015 91020000 		.4byte	.LASF39
 901 0019 00000000 		.4byte	.Ldebug_ranges0+0
 902 001d 00000000 		.4byte	0
 903 0021 00000000 		.4byte	.Ldebug_line0
 904 0025 02       		.uleb128 0x2
 905 0026 01       		.byte	0x1
 906 0027 06       		.byte	0x6
 907 0028 A6010000 		.4byte	.LASF0
 908 002c 02       		.uleb128 0x2
 909 002d 01       		.byte	0x1
 910 002e 08       		.byte	0x8
 911 002f 8C010000 		.4byte	.LASF1
 912 0033 02       		.uleb128 0x2
 913 0034 02       		.byte	0x2
 914 0035 05       		.byte	0x5
 915 0036 2B000000 		.4byte	.LASF2
 916 003a 02       		.uleb128 0x2
 917 003b 02       		.byte	0x2
 918 003c 07       		.byte	0x7
 919 003d E5010000 		.4byte	.LASF3
 920 0041 02       		.uleb128 0x2
 921 0042 04       		.byte	0x4
 922 0043 05       		.byte	0x5
 923 0044 FD010000 		.4byte	.LASF4
 924 0048 02       		.uleb128 0x2
 925 0049 04       		.byte	0x4
 926 004a 07       		.byte	0x7
 927 004b 28020000 		.4byte	.LASF5
 928 004f 02       		.uleb128 0x2
 929 0050 08       		.byte	0x8
 930 0051 05       		.byte	0x5
 931 0052 CE000000 		.4byte	.LASF6
 932 0056 02       		.uleb128 0x2
 933 0057 08       		.byte	0x8
 934 0058 07       		.byte	0x7
 935 0059 B2010000 		.4byte	.LASF7
 936 005d 03       		.uleb128 0x3
 937 005e 04       		.byte	0x4
 938 005f 05       		.byte	0x5
 939 0060 696E7400 		.ascii	"int\000"
 940 0064 02       		.uleb128 0x2
 941 0065 04       		.byte	0x4
 942 0066 07       		.byte	0x7
 943 0067 D8010000 		.4byte	.LASF8
 944 006b 04       		.uleb128 0x4
 945 006c A0000000 		.4byte	.LASF9
 946 0070 02       		.byte	0x2
 947 0071 9201     		.2byte	0x192
 948 0073 2C000000 		.4byte	0x2c
 949 0077 04       		.uleb128 0x4
 950 0078 8A000000 		.4byte	.LASF10
 951 007c 02       		.byte	0x2
 952 007d 9301     		.2byte	0x193
 953 007f 3A000000 		.4byte	0x3a
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 26


 954 0083 02       		.uleb128 0x2
 955 0084 04       		.byte	0x4
 956 0085 04       		.byte	0x4
 957 0086 C8000000 		.4byte	.LASF11
 958 008a 02       		.uleb128 0x2
 959 008b 08       		.byte	0x8
 960 008c 04       		.byte	0x4
 961 008d 3A020000 		.4byte	.LASF12
 962 0091 02       		.uleb128 0x2
 963 0092 01       		.byte	0x1
 964 0093 08       		.byte	0x8
 965 0094 F8010000 		.4byte	.LASF13
 966 0098 04       		.uleb128 0x4
 967 0099 23020000 		.4byte	.LASF14
 968 009d 02       		.byte	0x2
 969 009e 3C02     		.2byte	0x23c
 970 00a0 A4000000 		.4byte	0xa4
 971 00a4 05       		.uleb128 0x5
 972 00a5 6B000000 		.4byte	0x6b
 973 00a9 04       		.uleb128 0x4
 974 00aa 25000000 		.4byte	.LASF15
 975 00ae 02       		.byte	0x2
 976 00af 3D02     		.2byte	0x23d
 977 00b1 B5000000 		.4byte	0xb5
 978 00b5 05       		.uleb128 0x5
 979 00b6 77000000 		.4byte	0x77
 980 00ba 06       		.uleb128 0x6
 981 00bb 08030000 		.4byte	.LASF16
 982 00bf 01       		.byte	0x1
 983 00c0 2D       		.byte	0x2d
 984 00c1 00000000 		.4byte	.LFB0
 985 00c5 34000000 		.4byte	.LFE0-.LFB0
 986 00c9 01       		.uleb128 0x1
 987 00ca 9C       		.byte	0x9c
 988 00cb 06       		.uleb128 0x6
 989 00cc C9010000 		.4byte	.LASF17
 990 00d0 01       		.byte	0x1
 991 00d1 47       		.byte	0x47
 992 00d2 00000000 		.4byte	.LFB1
 993 00d6 34000000 		.4byte	.LFE1-.LFB1
 994 00da 01       		.uleb128 0x1
 995 00db 9C       		.byte	0x9c
 996 00dc 07       		.uleb128 0x7
 997 00dd 63020000 		.4byte	.LASF18
 998 00e1 01       		.byte	0x1
 999 00e2 64       		.byte	0x64
 1000 00e3 00000000 		.4byte	.LFB2
 1001 00e7 B0000000 		.4byte	.LFE2-.LFB2
 1002 00eb 01       		.uleb128 0x1
 1003 00ec 9C       		.byte	0x9c
 1004 00ed 0A010000 		.4byte	0x10a
 1005 00f1 08       		.uleb128 0x8
 1006 00f2 14000000 		.4byte	.LBB2
 1007 00f6 70000000 		.4byte	.LBE2-.LBB2
 1008 00fa 09       		.uleb128 0x9
 1009 00fb 18020000 		.4byte	.LASF24
 1010 00ff 01       		.byte	0x1
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 27


 1011 0100 69       		.byte	0x69
 1012 0101 77000000 		.4byte	0x77
 1013 0105 02       		.uleb128 0x2
 1014 0106 91       		.byte	0x91
 1015 0107 76       		.sleb128 -10
 1016 0108 00       		.byte	0
 1017 0109 00       		.byte	0
 1018 010a 07       		.uleb128 0x7
 1019 010b B1000000 		.4byte	.LASF19
 1020 010f 01       		.byte	0x1
 1021 0110 9D       		.byte	0x9d
 1022 0111 00000000 		.4byte	.LFB3
 1023 0115 40000000 		.4byte	.LFE3-.LFB3
 1024 0119 01       		.uleb128 0x1
 1025 011a 9C       		.byte	0x9c
 1026 011b 2E010000 		.4byte	0x12e
 1027 011f 0A       		.uleb128 0xa
 1028 0120 86010000 		.4byte	.LASF21
 1029 0124 01       		.byte	0x1
 1030 0125 9D       		.byte	0x9d
 1031 0126 6B000000 		.4byte	0x6b
 1032 012a 02       		.uleb128 0x2
 1033 012b 91       		.byte	0x91
 1034 012c 77       		.sleb128 -9
 1035 012d 00       		.byte	0
 1036 012e 0B       		.uleb128 0xb
 1037 012f 00000000 		.4byte	.LASF20
 1038 0133 01       		.byte	0x1
 1039 0134 C1       		.byte	0xc1
 1040 0135 00000000 		.4byte	.LFB4
 1041 0139 60010000 		.4byte	.LFE4-.LFB4
 1042 013d 01       		.uleb128 0x1
 1043 013e 9C       		.byte	0x9c
 1044 013f 8A010000 		.4byte	0x18a
 1045 0143 0A       		.uleb128 0xa
 1046 0144 A6000000 		.4byte	.LASF22
 1047 0148 01       		.byte	0x1
 1048 0149 C1       		.byte	0xc1
 1049 014a 77000000 		.4byte	0x77
 1050 014e 02       		.uleb128 0x2
 1051 014f 91       		.byte	0x91
 1052 0150 6E       		.sleb128 -18
 1053 0151 0A       		.uleb128 0xa
 1054 0152 91000000 		.4byte	.LASF23
 1055 0156 01       		.byte	0x1
 1056 0157 C1       		.byte	0xc1
 1057 0158 6B000000 		.4byte	0x6b
 1058 015c 02       		.uleb128 0x2
 1059 015d 91       		.byte	0x91
 1060 015e 6D       		.sleb128 -19
 1061 015f 09       		.uleb128 0x9
 1062 0160 5B020000 		.4byte	.LASF25
 1063 0164 01       		.byte	0x1
 1064 0165 C4       		.byte	0xc4
 1065 0166 6B000000 		.4byte	0x6b
 1066 016a 02       		.uleb128 0x2
 1067 016b 91       		.byte	0x91
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 28


 1068 016c 73       		.sleb128 -13
 1069 016d 09       		.uleb128 0x9
 1070 016e 10020000 		.4byte	.LASF26
 1071 0172 01       		.byte	0x1
 1072 0173 C6       		.byte	0xc6
 1073 0174 6B000000 		.4byte	0x6b
 1074 0178 02       		.uleb128 0x2
 1075 0179 91       		.byte	0x91
 1076 017a 77       		.sleb128 -9
 1077 017b 09       		.uleb128 0x9
 1078 017c 18020000 		.4byte	.LASF24
 1079 0180 01       		.byte	0x1
 1080 0181 C7       		.byte	0xc7
 1081 0182 77000000 		.4byte	0x77
 1082 0186 02       		.uleb128 0x2
 1083 0187 91       		.byte	0x91
 1084 0188 74       		.sleb128 -12
 1085 0189 00       		.byte	0
 1086 018a 0C       		.uleb128 0xc
 1087 018b 35000000 		.4byte	.LASF30
 1088 018f 01       		.byte	0x1
 1089 0190 2901     		.2byte	0x129
 1090 0192 77000000 		.4byte	0x77
 1091 0196 00000000 		.4byte	.LFB5
 1092 019a 18000000 		.4byte	.LFE5-.LFB5
 1093 019e 01       		.uleb128 0x1
 1094 019f 9C       		.byte	0x9c
 1095 01a0 0D       		.uleb128 0xd
 1096 01a1 77020000 		.4byte	.LASF27
 1097 01a5 01       		.byte	0x1
 1098 01a6 4C01     		.2byte	0x14c
 1099 01a8 00000000 		.4byte	.LFB6
 1100 01ac 34000000 		.4byte	.LFE6-.LFB6
 1101 01b0 01       		.uleb128 0x1
 1102 01b1 9C       		.byte	0x9c
 1103 01b2 C6010000 		.4byte	0x1c6
 1104 01b6 0E       		.uleb128 0xe
 1105 01b7 9A010000 		.4byte	.LASF28
 1106 01bb 01       		.byte	0x1
 1107 01bc 4C01     		.2byte	0x14c
 1108 01be 6B000000 		.4byte	0x6b
 1109 01c2 02       		.uleb128 0x2
 1110 01c3 91       		.byte	0x91
 1111 01c4 77       		.sleb128 -9
 1112 01c5 00       		.byte	0
 1113 01c6 0D       		.uleb128 0xd
 1114 01c7 DC000000 		.4byte	.LASF29
 1115 01cb 01       		.byte	0x1
 1116 01cc 6F01     		.2byte	0x16f
 1117 01ce 00000000 		.4byte	.LFB7
 1118 01d2 34000000 		.4byte	.LFE7-.LFB7
 1119 01d6 01       		.uleb128 0x1
 1120 01d7 9C       		.byte	0x9c
 1121 01d8 EC010000 		.4byte	0x1ec
 1122 01dc 0E       		.uleb128 0xe
 1123 01dd 9A010000 		.4byte	.LASF28
 1124 01e1 01       		.byte	0x1
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 29


 1125 01e2 6F01     		.2byte	0x16f
 1126 01e4 6B000000 		.4byte	0x6b
 1127 01e8 02       		.uleb128 0x2
 1128 01e9 91       		.byte	0x91
 1129 01ea 77       		.sleb128 -9
 1130 01eb 00       		.byte	0
 1131 01ec 0C       		.uleb128 0xc
 1132 01ed 41020000 		.4byte	.LASF31
 1133 01f1 01       		.byte	0x1
 1134 01f2 8401     		.2byte	0x184
 1135 01f4 6B000000 		.4byte	0x6b
 1136 01f8 00000000 		.4byte	.LFB8
 1137 01fc 20000000 		.4byte	.LFE8-.LFB8
 1138 0200 01       		.uleb128 0x1
 1139 0201 9C       		.byte	0x9c
 1140 0202 0F       		.uleb128 0xf
 1141 0203 6E000000 		.4byte	.LASF32
 1142 0207 01       		.byte	0x1
 1143 0208 A301     		.2byte	0x1a3
 1144 020a 00000000 		.4byte	.LFB9
 1145 020e BC000000 		.4byte	.LFE9-.LFB9
 1146 0212 01       		.uleb128 0x1
 1147 0213 9C       		.byte	0x9c
 1148 0214 46020000 		.4byte	0x246
 1149 0218 0E       		.uleb128 0xe
 1150 0219 06020000 		.4byte	.LASF33
 1151 021d 01       		.byte	0x1
 1152 021e A301     		.2byte	0x1a3
 1153 0220 6B000000 		.4byte	0x6b
 1154 0224 02       		.uleb128 0x2
 1155 0225 91       		.byte	0x91
 1156 0226 6F       		.sleb128 -17
 1157 0227 10       		.uleb128 0x10
 1158 0228 1D000000 		.4byte	.LASF34
 1159 022c 01       		.byte	0x1
 1160 022d A501     		.2byte	0x1a5
 1161 022f 77000000 		.4byte	0x77
 1162 0233 02       		.uleb128 0x2
 1163 0234 91       		.byte	0x91
 1164 0235 76       		.sleb128 -10
 1165 0236 10       		.uleb128 0x10
 1166 0237 99000000 		.4byte	.LASF35
 1167 023b 01       		.byte	0x1
 1168 023c A601     		.2byte	0x1a6
 1169 023e 6B000000 		.4byte	0x6b
 1170 0242 02       		.uleb128 0x2
 1171 0243 91       		.byte	0x91
 1172 0244 75       		.sleb128 -11
 1173 0245 00       		.byte	0
 1174 0246 0C       		.uleb128 0xc
 1175 0247 52000000 		.4byte	.LASF36
 1176 024b 01       		.byte	0x1
 1177 024c D001     		.2byte	0x1d0
 1178 024e 6B000000 		.4byte	0x6b
 1179 0252 00000000 		.4byte	.LFB10
 1180 0256 20000000 		.4byte	.LFE10-.LFB10
 1181 025a 01       		.uleb128 0x1
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 30


 1182 025b 9C       		.byte	0x9c
 1183 025c 00       		.byte	0
 1184              		.section	.debug_abbrev,"",%progbits
 1185              	.Ldebug_abbrev0:
 1186 0000 01       		.uleb128 0x1
 1187 0001 11       		.uleb128 0x11
 1188 0002 01       		.byte	0x1
 1189 0003 25       		.uleb128 0x25
 1190 0004 0E       		.uleb128 0xe
 1191 0005 13       		.uleb128 0x13
 1192 0006 0B       		.uleb128 0xb
 1193 0007 03       		.uleb128 0x3
 1194 0008 0E       		.uleb128 0xe
 1195 0009 1B       		.uleb128 0x1b
 1196 000a 0E       		.uleb128 0xe
 1197 000b 55       		.uleb128 0x55
 1198 000c 17       		.uleb128 0x17
 1199 000d 11       		.uleb128 0x11
 1200 000e 01       		.uleb128 0x1
 1201 000f 10       		.uleb128 0x10
 1202 0010 17       		.uleb128 0x17
 1203 0011 00       		.byte	0
 1204 0012 00       		.byte	0
 1205 0013 02       		.uleb128 0x2
 1206 0014 24       		.uleb128 0x24
 1207 0015 00       		.byte	0
 1208 0016 0B       		.uleb128 0xb
 1209 0017 0B       		.uleb128 0xb
 1210 0018 3E       		.uleb128 0x3e
 1211 0019 0B       		.uleb128 0xb
 1212 001a 03       		.uleb128 0x3
 1213 001b 0E       		.uleb128 0xe
 1214 001c 00       		.byte	0
 1215 001d 00       		.byte	0
 1216 001e 03       		.uleb128 0x3
 1217 001f 24       		.uleb128 0x24
 1218 0020 00       		.byte	0
 1219 0021 0B       		.uleb128 0xb
 1220 0022 0B       		.uleb128 0xb
 1221 0023 3E       		.uleb128 0x3e
 1222 0024 0B       		.uleb128 0xb
 1223 0025 03       		.uleb128 0x3
 1224 0026 08       		.uleb128 0x8
 1225 0027 00       		.byte	0
 1226 0028 00       		.byte	0
 1227 0029 04       		.uleb128 0x4
 1228 002a 16       		.uleb128 0x16
 1229 002b 00       		.byte	0
 1230 002c 03       		.uleb128 0x3
 1231 002d 0E       		.uleb128 0xe
 1232 002e 3A       		.uleb128 0x3a
 1233 002f 0B       		.uleb128 0xb
 1234 0030 3B       		.uleb128 0x3b
 1235 0031 05       		.uleb128 0x5
 1236 0032 49       		.uleb128 0x49
 1237 0033 13       		.uleb128 0x13
 1238 0034 00       		.byte	0
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 31


 1239 0035 00       		.byte	0
 1240 0036 05       		.uleb128 0x5
 1241 0037 35       		.uleb128 0x35
 1242 0038 00       		.byte	0
 1243 0039 49       		.uleb128 0x49
 1244 003a 13       		.uleb128 0x13
 1245 003b 00       		.byte	0
 1246 003c 00       		.byte	0
 1247 003d 06       		.uleb128 0x6
 1248 003e 2E       		.uleb128 0x2e
 1249 003f 00       		.byte	0
 1250 0040 3F       		.uleb128 0x3f
 1251 0041 19       		.uleb128 0x19
 1252 0042 03       		.uleb128 0x3
 1253 0043 0E       		.uleb128 0xe
 1254 0044 3A       		.uleb128 0x3a
 1255 0045 0B       		.uleb128 0xb
 1256 0046 3B       		.uleb128 0x3b
 1257 0047 0B       		.uleb128 0xb
 1258 0048 27       		.uleb128 0x27
 1259 0049 19       		.uleb128 0x19
 1260 004a 11       		.uleb128 0x11
 1261 004b 01       		.uleb128 0x1
 1262 004c 12       		.uleb128 0x12
 1263 004d 06       		.uleb128 0x6
 1264 004e 40       		.uleb128 0x40
 1265 004f 18       		.uleb128 0x18
 1266 0050 9742     		.uleb128 0x2117
 1267 0052 19       		.uleb128 0x19
 1268 0053 00       		.byte	0
 1269 0054 00       		.byte	0
 1270 0055 07       		.uleb128 0x7
 1271 0056 2E       		.uleb128 0x2e
 1272 0057 01       		.byte	0x1
 1273 0058 3F       		.uleb128 0x3f
 1274 0059 19       		.uleb128 0x19
 1275 005a 03       		.uleb128 0x3
 1276 005b 0E       		.uleb128 0xe
 1277 005c 3A       		.uleb128 0x3a
 1278 005d 0B       		.uleb128 0xb
 1279 005e 3B       		.uleb128 0x3b
 1280 005f 0B       		.uleb128 0xb
 1281 0060 27       		.uleb128 0x27
 1282 0061 19       		.uleb128 0x19
 1283 0062 11       		.uleb128 0x11
 1284 0063 01       		.uleb128 0x1
 1285 0064 12       		.uleb128 0x12
 1286 0065 06       		.uleb128 0x6
 1287 0066 40       		.uleb128 0x40
 1288 0067 18       		.uleb128 0x18
 1289 0068 9742     		.uleb128 0x2117
 1290 006a 19       		.uleb128 0x19
 1291 006b 01       		.uleb128 0x1
 1292 006c 13       		.uleb128 0x13
 1293 006d 00       		.byte	0
 1294 006e 00       		.byte	0
 1295 006f 08       		.uleb128 0x8
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 32


 1296 0070 0B       		.uleb128 0xb
 1297 0071 01       		.byte	0x1
 1298 0072 11       		.uleb128 0x11
 1299 0073 01       		.uleb128 0x1
 1300 0074 12       		.uleb128 0x12
 1301 0075 06       		.uleb128 0x6
 1302 0076 00       		.byte	0
 1303 0077 00       		.byte	0
 1304 0078 09       		.uleb128 0x9
 1305 0079 34       		.uleb128 0x34
 1306 007a 00       		.byte	0
 1307 007b 03       		.uleb128 0x3
 1308 007c 0E       		.uleb128 0xe
 1309 007d 3A       		.uleb128 0x3a
 1310 007e 0B       		.uleb128 0xb
 1311 007f 3B       		.uleb128 0x3b
 1312 0080 0B       		.uleb128 0xb
 1313 0081 49       		.uleb128 0x49
 1314 0082 13       		.uleb128 0x13
 1315 0083 02       		.uleb128 0x2
 1316 0084 18       		.uleb128 0x18
 1317 0085 00       		.byte	0
 1318 0086 00       		.byte	0
 1319 0087 0A       		.uleb128 0xa
 1320 0088 05       		.uleb128 0x5
 1321 0089 00       		.byte	0
 1322 008a 03       		.uleb128 0x3
 1323 008b 0E       		.uleb128 0xe
 1324 008c 3A       		.uleb128 0x3a
 1325 008d 0B       		.uleb128 0xb
 1326 008e 3B       		.uleb128 0x3b
 1327 008f 0B       		.uleb128 0xb
 1328 0090 49       		.uleb128 0x49
 1329 0091 13       		.uleb128 0x13
 1330 0092 02       		.uleb128 0x2
 1331 0093 18       		.uleb128 0x18
 1332 0094 00       		.byte	0
 1333 0095 00       		.byte	0
 1334 0096 0B       		.uleb128 0xb
 1335 0097 2E       		.uleb128 0x2e
 1336 0098 01       		.byte	0x1
 1337 0099 3F       		.uleb128 0x3f
 1338 009a 19       		.uleb128 0x19
 1339 009b 03       		.uleb128 0x3
 1340 009c 0E       		.uleb128 0xe
 1341 009d 3A       		.uleb128 0x3a
 1342 009e 0B       		.uleb128 0xb
 1343 009f 3B       		.uleb128 0x3b
 1344 00a0 0B       		.uleb128 0xb
 1345 00a1 27       		.uleb128 0x27
 1346 00a2 19       		.uleb128 0x19
 1347 00a3 11       		.uleb128 0x11
 1348 00a4 01       		.uleb128 0x1
 1349 00a5 12       		.uleb128 0x12
 1350 00a6 06       		.uleb128 0x6
 1351 00a7 40       		.uleb128 0x40
 1352 00a8 18       		.uleb128 0x18
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 33


 1353 00a9 9642     		.uleb128 0x2116
 1354 00ab 19       		.uleb128 0x19
 1355 00ac 01       		.uleb128 0x1
 1356 00ad 13       		.uleb128 0x13
 1357 00ae 00       		.byte	0
 1358 00af 00       		.byte	0
 1359 00b0 0C       		.uleb128 0xc
 1360 00b1 2E       		.uleb128 0x2e
 1361 00b2 00       		.byte	0
 1362 00b3 3F       		.uleb128 0x3f
 1363 00b4 19       		.uleb128 0x19
 1364 00b5 03       		.uleb128 0x3
 1365 00b6 0E       		.uleb128 0xe
 1366 00b7 3A       		.uleb128 0x3a
 1367 00b8 0B       		.uleb128 0xb
 1368 00b9 3B       		.uleb128 0x3b
 1369 00ba 05       		.uleb128 0x5
 1370 00bb 27       		.uleb128 0x27
 1371 00bc 19       		.uleb128 0x19
 1372 00bd 49       		.uleb128 0x49
 1373 00be 13       		.uleb128 0x13
 1374 00bf 11       		.uleb128 0x11
 1375 00c0 01       		.uleb128 0x1
 1376 00c1 12       		.uleb128 0x12
 1377 00c2 06       		.uleb128 0x6
 1378 00c3 40       		.uleb128 0x40
 1379 00c4 18       		.uleb128 0x18
 1380 00c5 9742     		.uleb128 0x2117
 1381 00c7 19       		.uleb128 0x19
 1382 00c8 00       		.byte	0
 1383 00c9 00       		.byte	0
 1384 00ca 0D       		.uleb128 0xd
 1385 00cb 2E       		.uleb128 0x2e
 1386 00cc 01       		.byte	0x1
 1387 00cd 3F       		.uleb128 0x3f
 1388 00ce 19       		.uleb128 0x19
 1389 00cf 03       		.uleb128 0x3
 1390 00d0 0E       		.uleb128 0xe
 1391 00d1 3A       		.uleb128 0x3a
 1392 00d2 0B       		.uleb128 0xb
 1393 00d3 3B       		.uleb128 0x3b
 1394 00d4 05       		.uleb128 0x5
 1395 00d5 27       		.uleb128 0x27
 1396 00d6 19       		.uleb128 0x19
 1397 00d7 11       		.uleb128 0x11
 1398 00d8 01       		.uleb128 0x1
 1399 00d9 12       		.uleb128 0x12
 1400 00da 06       		.uleb128 0x6
 1401 00db 40       		.uleb128 0x40
 1402 00dc 18       		.uleb128 0x18
 1403 00dd 9742     		.uleb128 0x2117
 1404 00df 19       		.uleb128 0x19
 1405 00e0 01       		.uleb128 0x1
 1406 00e1 13       		.uleb128 0x13
 1407 00e2 00       		.byte	0
 1408 00e3 00       		.byte	0
 1409 00e4 0E       		.uleb128 0xe
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 34


 1410 00e5 05       		.uleb128 0x5
 1411 00e6 00       		.byte	0
 1412 00e7 03       		.uleb128 0x3
 1413 00e8 0E       		.uleb128 0xe
 1414 00e9 3A       		.uleb128 0x3a
 1415 00ea 0B       		.uleb128 0xb
 1416 00eb 3B       		.uleb128 0x3b
 1417 00ec 05       		.uleb128 0x5
 1418 00ed 49       		.uleb128 0x49
 1419 00ee 13       		.uleb128 0x13
 1420 00ef 02       		.uleb128 0x2
 1421 00f0 18       		.uleb128 0x18
 1422 00f1 00       		.byte	0
 1423 00f2 00       		.byte	0
 1424 00f3 0F       		.uleb128 0xf
 1425 00f4 2E       		.uleb128 0x2e
 1426 00f5 01       		.byte	0x1
 1427 00f6 3F       		.uleb128 0x3f
 1428 00f7 19       		.uleb128 0x19
 1429 00f8 03       		.uleb128 0x3
 1430 00f9 0E       		.uleb128 0xe
 1431 00fa 3A       		.uleb128 0x3a
 1432 00fb 0B       		.uleb128 0xb
 1433 00fc 3B       		.uleb128 0x3b
 1434 00fd 05       		.uleb128 0x5
 1435 00fe 27       		.uleb128 0x27
 1436 00ff 19       		.uleb128 0x19
 1437 0100 11       		.uleb128 0x11
 1438 0101 01       		.uleb128 0x1
 1439 0102 12       		.uleb128 0x12
 1440 0103 06       		.uleb128 0x6
 1441 0104 40       		.uleb128 0x40
 1442 0105 18       		.uleb128 0x18
 1443 0106 9642     		.uleb128 0x2116
 1444 0108 19       		.uleb128 0x19
 1445 0109 01       		.uleb128 0x1
 1446 010a 13       		.uleb128 0x13
 1447 010b 00       		.byte	0
 1448 010c 00       		.byte	0
 1449 010d 10       		.uleb128 0x10
 1450 010e 34       		.uleb128 0x34
 1451 010f 00       		.byte	0
 1452 0110 03       		.uleb128 0x3
 1453 0111 0E       		.uleb128 0xe
 1454 0112 3A       		.uleb128 0x3a
 1455 0113 0B       		.uleb128 0xb
 1456 0114 3B       		.uleb128 0x3b
 1457 0115 05       		.uleb128 0x5
 1458 0116 49       		.uleb128 0x49
 1459 0117 13       		.uleb128 0x13
 1460 0118 02       		.uleb128 0x2
 1461 0119 18       		.uleb128 0x18
 1462 011a 00       		.byte	0
 1463 011b 00       		.byte	0
 1464 011c 00       		.byte	0
 1465              		.section	.debug_aranges,"",%progbits
 1466 0000 6C000000 		.4byte	0x6c
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 35


 1467 0004 0200     		.2byte	0x2
 1468 0006 00000000 		.4byte	.Ldebug_info0
 1469 000a 04       		.byte	0x4
 1470 000b 00       		.byte	0
 1471 000c 0000     		.2byte	0
 1472 000e 0000     		.2byte	0
 1473 0010 00000000 		.4byte	.LFB0
 1474 0014 34000000 		.4byte	.LFE0-.LFB0
 1475 0018 00000000 		.4byte	.LFB1
 1476 001c 34000000 		.4byte	.LFE1-.LFB1
 1477 0020 00000000 		.4byte	.LFB2
 1478 0024 B0000000 		.4byte	.LFE2-.LFB2
 1479 0028 00000000 		.4byte	.LFB3
 1480 002c 40000000 		.4byte	.LFE3-.LFB3
 1481 0030 00000000 		.4byte	.LFB4
 1482 0034 60010000 		.4byte	.LFE4-.LFB4
 1483 0038 00000000 		.4byte	.LFB5
 1484 003c 18000000 		.4byte	.LFE5-.LFB5
 1485 0040 00000000 		.4byte	.LFB6
 1486 0044 34000000 		.4byte	.LFE6-.LFB6
 1487 0048 00000000 		.4byte	.LFB7
 1488 004c 34000000 		.4byte	.LFE7-.LFB7
 1489 0050 00000000 		.4byte	.LFB8
 1490 0054 20000000 		.4byte	.LFE8-.LFB8
 1491 0058 00000000 		.4byte	.LFB9
 1492 005c BC000000 		.4byte	.LFE9-.LFB9
 1493 0060 00000000 		.4byte	.LFB10
 1494 0064 20000000 		.4byte	.LFE10-.LFB10
 1495 0068 00000000 		.4byte	0
 1496 006c 00000000 		.4byte	0
 1497              		.section	.debug_ranges,"",%progbits
 1498              	.Ldebug_ranges0:
 1499 0000 00000000 		.4byte	.LFB0
 1500 0004 34000000 		.4byte	.LFE0
 1501 0008 00000000 		.4byte	.LFB1
 1502 000c 34000000 		.4byte	.LFE1
 1503 0010 00000000 		.4byte	.LFB2
 1504 0014 B0000000 		.4byte	.LFE2
 1505 0018 00000000 		.4byte	.LFB3
 1506 001c 40000000 		.4byte	.LFE3
 1507 0020 00000000 		.4byte	.LFB4
 1508 0024 60010000 		.4byte	.LFE4
 1509 0028 00000000 		.4byte	.LFB5
 1510 002c 18000000 		.4byte	.LFE5
 1511 0030 00000000 		.4byte	.LFB6
 1512 0034 34000000 		.4byte	.LFE6
 1513 0038 00000000 		.4byte	.LFB7
 1514 003c 34000000 		.4byte	.LFE7
 1515 0040 00000000 		.4byte	.LFB8
 1516 0044 20000000 		.4byte	.LFE8
 1517 0048 00000000 		.4byte	.LFB9
 1518 004c BC000000 		.4byte	.LFE9
 1519 0050 00000000 		.4byte	.LFB10
 1520 0054 20000000 		.4byte	.LFE10
 1521 0058 00000000 		.4byte	0
 1522 005c 00000000 		.4byte	0
 1523              		.section	.debug_line,"",%progbits
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 36


 1524              	.Ldebug_line0:
 1525 0000 A0010000 		.section	.debug_str,"MS",%progbits,1
 1525      02004600 
 1525      00000201 
 1525      FB0E0D00 
 1525      01010101 
 1526              	.LASF20:
 1527 0000 50574D5F 		.ascii	"PWM_Clock_SetDividerRegister\000"
 1527      436C6F63 
 1527      6B5F5365 
 1527      74446976 
 1527      69646572 
 1528              	.LASF34:
 1529 001d 63757272 		.ascii	"currDiv\000"
 1529      44697600 
 1530              	.LASF15:
 1531 0025 72656731 		.ascii	"reg16\000"
 1531      3600
 1532              	.LASF2:
 1533 002b 73686F72 		.ascii	"short int\000"
 1533      7420696E 
 1533      7400
 1534              	.LASF30:
 1535 0035 50574D5F 		.ascii	"PWM_Clock_GetDividerRegister\000"
 1535      436C6F63 
 1535      6B5F4765 
 1535      74446976 
 1535      69646572 
 1536              	.LASF36:
 1537 0052 50574D5F 		.ascii	"PWM_Clock_GetSourceRegister\000"
 1537      436C6F63 
 1537      6B5F4765 
 1537      74536F75 
 1537      72636552 
 1538              	.LASF32:
 1539 006e 50574D5F 		.ascii	"PWM_Clock_SetSourceRegister\000"
 1539      436C6F63 
 1539      6B5F5365 
 1539      74536F75 
 1539      72636552 
 1540              	.LASF10:
 1541 008a 75696E74 		.ascii	"uint16\000"
 1541      313600
 1542              	.LASF23:
 1543 0091 72657374 		.ascii	"restart\000"
 1543      61727400 
 1544              	.LASF35:
 1545 0099 6F6C6453 		.ascii	"oldSrc\000"
 1545      726300
 1546              	.LASF9:
 1547 00a0 75696E74 		.ascii	"uint8\000"
 1547      3800
 1548              	.LASF22:
 1549 00a6 636C6B44 		.ascii	"clkDivider\000"
 1549      69766964 
 1549      657200
 1550              	.LASF19:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 37


 1551 00b1 50574D5F 		.ascii	"PWM_Clock_StandbyPower\000"
 1551      436C6F63 
 1551      6B5F5374 
 1551      616E6462 
 1551      79506F77 
 1552              	.LASF11:
 1553 00c8 666C6F61 		.ascii	"float\000"
 1553      7400
 1554              	.LASF6:
 1555 00ce 6C6F6E67 		.ascii	"long long int\000"
 1555      206C6F6E 
 1555      6720696E 
 1555      7400
 1556              	.LASF29:
 1557 00dc 50574D5F 		.ascii	"PWM_Clock_ClearModeRegister\000"
 1557      436C6F63 
 1557      6B5F436C 
 1557      6561724D 
 1557      6F646552 
 1558              	.LASF37:
 1559 00f8 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1559      4320342E 
 1559      392E3320 
 1559      32303135 
 1559      30333033 
 1560 012b 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1560      20726576 
 1560      6973696F 
 1560      6E203232 
 1560      31323230 
 1561 015e 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1561      66756E63 
 1561      74696F6E 
 1561      2D736563 
 1561      74696F6E 
 1562              	.LASF21:
 1563 0186 73746174 		.ascii	"state\000"
 1563      6500
 1564              	.LASF1:
 1565 018c 756E7369 		.ascii	"unsigned char\000"
 1565      676E6564 
 1565      20636861 
 1565      7200
 1566              	.LASF28:
 1567 019a 6D6F6465 		.ascii	"modeBitMask\000"
 1567      4269744D 
 1567      61736B00 
 1568              	.LASF0:
 1569 01a6 7369676E 		.ascii	"signed char\000"
 1569      65642063 
 1569      68617200 
 1570              	.LASF7:
 1571 01b2 6C6F6E67 		.ascii	"long long unsigned int\000"
 1571      206C6F6E 
 1571      6720756E 
 1571      7369676E 
 1571      65642069 
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 38


 1572              	.LASF17:
 1573 01c9 50574D5F 		.ascii	"PWM_Clock_Stop\000"
 1573      436C6F63 
 1573      6B5F5374 
 1573      6F7000
 1574              	.LASF8:
 1575 01d8 756E7369 		.ascii	"unsigned int\000"
 1575      676E6564 
 1575      20696E74 
 1575      00
 1576              	.LASF3:
 1577 01e5 73686F72 		.ascii	"short unsigned int\000"
 1577      7420756E 
 1577      7369676E 
 1577      65642069 
 1577      6E7400
 1578              	.LASF13:
 1579 01f8 63686172 		.ascii	"char\000"
 1579      00
 1580              	.LASF4:
 1581 01fd 6C6F6E67 		.ascii	"long int\000"
 1581      20696E74 
 1581      00
 1582              	.LASF33:
 1583 0206 636C6B53 		.ascii	"clkSource\000"
 1583      6F757263 
 1583      6500
 1584              	.LASF26:
 1585 0210 63757272 		.ascii	"currSrc\000"
 1585      53726300 
 1586              	.LASF24:
 1587 0218 6F6C6444 		.ascii	"oldDivider\000"
 1587      69766964 
 1587      657200
 1588              	.LASF14:
 1589 0223 72656738 		.ascii	"reg8\000"
 1589      00
 1590              	.LASF5:
 1591 0228 6C6F6E67 		.ascii	"long unsigned int\000"
 1591      20756E73 
 1591      69676E65 
 1591      6420696E 
 1591      7400
 1592              	.LASF12:
 1593 023a 646F7562 		.ascii	"double\000"
 1593      6C6500
 1594              	.LASF31:
 1595 0241 50574D5F 		.ascii	"PWM_Clock_GetModeRegister\000"
 1595      436C6F63 
 1595      6B5F4765 
 1595      744D6F64 
 1595      65526567 
 1596              	.LASF25:
 1597 025b 656E6162 		.ascii	"enabled\000"
 1597      6C656400 
 1598              	.LASF18:
 1599 0263 50574D5F 		.ascii	"PWM_Clock_StopBlock\000"
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccAd8yVC.s 			page 39


 1599      436C6F63 
 1599      6B5F5374 
 1599      6F70426C 
 1599      6F636B00 
 1600              	.LASF27:
 1601 0277 50574D5F 		.ascii	"PWM_Clock_SetModeRegister\000"
 1601      436C6F63 
 1601      6B5F5365 
 1601      744D6F64 
 1601      65526567 
 1602              	.LASF39:
 1603 0291 433A5C53 		.ascii	"C:\\SVN\\apps\\trunk\\Cypress Academy\\PSoC-121-Ana"
 1603      564E5C61 
 1603      7070735C 
 1603      7472756E 
 1603      6B5C4379 
 1604 02bf 6C6F675C 		.ascii	"log\\Scope\\KEES_Scope\\PSoC\\Scope.cydsn\000"
 1604      53636F70 
 1604      655C4B45 
 1604      45535F53 
 1604      636F7065 
 1605              	.LASF38:
 1606 02e5 47656E65 		.ascii	"Generated_Source\\PSoC5\\PWM_Clock.c\000"
 1606      72617465 
 1606      645F536F 
 1606      75726365 
 1606      5C50536F 
 1607              	.LASF16:
 1608 0308 50574D5F 		.ascii	"PWM_Clock_Start\000"
 1608      436C6F63 
 1608      6B5F5374 
 1608      61727400 
 1609              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
